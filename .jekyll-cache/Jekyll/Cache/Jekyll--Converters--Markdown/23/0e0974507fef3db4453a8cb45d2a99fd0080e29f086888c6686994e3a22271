I"<p><br /></p>

<h1 id="25장-클래스">25장 클래스</h1>
<h2 id="251-클래스는-프로토타입의-문법적-설탕인가">25.1 클래스는 프로토타입의 문법적 설탕인가?</h2>
<p>클래스는 함수이며 기존 프로토타입 기반 패턴을 클래스 기반 패턴처럼 사용할 ㅅ 있도록 하는 문법적 설탕이라고 볼 수도 있다.<br />
단, 클래스와 생성자 함수는 모두 프로토타입 기반의 인스턴스를 생성하지만 정확히 동일하게 동작하지는 않는다. 클래스는 함수보다 엄격하고 생성자 함수에서는 제공하지 않는 기능도 제공한다.</p>
<h3 id="클래스와-생성자-함수-차이점">클래스와 생성자 함수 차이점</h3>
<ul>
  <li>클래스를 new 연산자 없이 호출하면 에러가 발생한다. 하지만 생성자 함수를 new 연산자 없이 호출하면 일반 함수로서 호출된다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

  <span class="kd">function</span> <span class="nx">outerFunc</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>

    <span class="kd">function</span> <span class="nx">innerFunc</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span> <span class="c1">// 10</span>
    <span class="p">}</span>
    <span class="nx">innerFunc</span><span class="p">();</span>
  <span class="p">}</span>
  <span class="nx">outerFunc</span><span class="p">();</span>
</code></pre></div></div>
<p>중첩 함수 innerFunc의 상위 스코프는 외부함수 outerFunc의 스코프다. 따라서 중첩 함수 innerFunc 내부에서 자신을 포함하고 있는 외부 함수 outerFunc의 x변수에 접근할 수 있다.<br />
만약 innerFunc 함수가 outerFunc 함수의 내부에서 정의된 중첩 함수가 아니라면 innerFunc 함수를 outerFunc 함수의 내부에서 호출한다 하더라도 outerFunc 함수 변수에 접근할 수 없다. 이 같은 현상이 발행하는 이유는 자바스크립트가 렉시컬 스코프를 따르는 프로그래밍 언어이기 때문이다.</p>

<h2 id="241-렉시컬-스코프">24.1 렉시컬 스코프</h2>
<p>자바스크립트 엔진은 함수를 어디서 호출했는지가 아니라 함수를 어디에 정의했는지에 따라 상위 스코프를 결정한다. 이를 렉시컬 스코프(정적 스코프)라 한다.<br />
렉시컬 환경의 <code class="language-plaintext highlighter-rouge">함수의 상위 스코프를 결정한다</code>는 것은 <code class="language-plaintext highlighter-rouge">렉시컬 환경의 외부 렉시컬 환경에 대한 참조에 저장할 참조값을 결정한다</code>는 것과 같다.<br />
다시 말해 렉시컬 환경의 “외부 렉시컬 환경에 대한 참조”에 저장할 참조값, 즉 상위 스코프에 대한 참조는 함수 정의가 평가되는 시점에 함수가 정의된 환경(위치)에 의해 결정된다. 이것이 바로 렉시컬 스코프다.</p>

<h2 id="242-함수-객체의-내부-슬롯environment">24.2 함수 객체의 내부 슬롯[[Environment]]</h2>
<p>렉시컬 스코프가 가능하려면 함수는 자신이 호출되는 환경과는 상관없이 자신이 정의된 환경, 즉 상위 스코프를 기억해야 한다. 이를 위해 함수는 함수 정의가 평가되어 함수 객체를 생성항 때 자신의 내부 슬롯[[Environmnet]]에 자신이 정의된 환경, 즉 상위 스코프의 참조를 저장한다.<br />
(그림 24-1)<br />
함수 객체의 내부 슬롯 [[Environment]]에 저장된 현재 실행중인 실행 컨텍스트의 렉시컬 환경의 참조가 바로 상위 스코프다. 또한 자신이 호출되었을 때 생성될 함수 렉시컬 환경의 “외부 렉시컬 환경에 대한 참조”에 저장될 참조 값이다. 함수 객체는 내부 슬롯 [[Environment]]에 저장한 렉시컬 환경의 참조, 즉 상위 스코프를 자신이 존재하는 한 기억한다.<br />
함수 코드를 평가할 때 함수 렉시컬 환경의 구성 요소인 외부 렉시컬 환경에 대한 참조에는 함수 객체의 내부 슬롯[[Environment]]에 저장된 렉시컬 환경의 참조가 할당된다.(그림에서 2, 3) 즉, 함수 객체의 내부 슬롯[[Environment]]에 저장된 렉시컬 환경의 참조는 바로 함수의 상위 스코프를 의미한다.</p>

<h2 id="243-클로저와-렉시컬-환경">24.3 클로저와 렉시컬 환경</h2>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

  <span class="c1">// ①</span>
  <span class="kd">function</span> <span class="nx">outer</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">inner</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span> <span class="p">};</span> <span class="c1">// ②</span>
    <span class="k">return</span> <span class="nx">inner</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="c1">// outer 함수를 호출하면 중첩 함수 inner를 반환한다.</span>
  <span class="c1">// 그리고 outer 함수의 실행 컨텍스트는 실행 컨텍스트 스택에서 팝되어 제거된다.</span>
  <span class="kd">const</span> <span class="nx">innerFunc</span> <span class="o">=</span> <span class="nx">outer</span><span class="p">();</span>
  <span class="nx">innerFunc</span><span class="p">();</span> <span class="c1">// 10</span>
</code></pre></div></div>

:ET