I"2"<p><br /></p>

<h1 id="04장-변수">04장 변수</h1>
<h2 id="41-변수란-무엇인가-왜-필요한가">4.1 변수란 무엇인가? 왜 필요한가?</h2>
<h3 id="변수란">변수란?</h3>
<p><code class="language-plaintext highlighter-rouge">변수</code>는 하나의 값을 저장하기 위해 확보한 메모리 공간 자체 또는 그 멤모리 공간을 식별하기 위해 붙인 이름이다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">userId</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="kd">var</span> <span class="nx">userName</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Lee</span><span class="dl">'</span><span class="p">;</span>
  <span class="c1">// 객체나 배열 같은 자료구조를 사용하면 여러개의 값을 하나로 그룹화해서 하나의 값처럼 사용할 수 있다.</span>
  <span class="kd">var</span> <span class="nx">user</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="na">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Lee</span><span class="dl">'</span><span class="p">},</span>
    <span class="p">{</span><span class="na">id</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Kim</span><span class="dl">'</span><span class="p">}</span>
  <span class="p">]</span>
</code></pre></div></div>
<h3 id="변수-명칭">변수 명칭</h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">resualt</span> <span class="o">=</span> <span class="mi">10</span> <span class="o">+</span> <span class="mi">20</span><span class="p">;</span>
</code></pre></div></div>
<p>변수 명 -&gt; result<br />
변수 값 -&gt; 변수에 저장된 값 30<br />
할당 -&gt; 변수에 값을 저장하는 것<br />
참초 -&gt; 변수에 저장된 값을 읽어 들이는 것</p>

<h2 id="42-식별자">4.2 식별자</h2>
<p>변수 이름을 <code class="language-plaintext highlighter-rouge">식별자</code>라고도 한다. <code class="language-plaintext highlighter-rouge">식별자는 값이 아니라 메모리 주소를 기억하고 있다.</code> 식별자로 값을 구별해서 식별한다는 것은 식별자가 기억하고 있는 메모리 주소를 통해 메모리 공간에 저장된 값에 접근할 수 있다는 의미이다. 식별자는 메모리 주소에 붙인 이름이라고 할 수 있다.</p>

<h2 id="43-변수-선언">4.3 변수 선언</h2>
<p>변수를 선언할 때는 var, let, const 키워드를 사용한다.</p>
<blockquote>
  <p>var 키워드는 여러 단점이 있다. 가장 대표적인 것이 블록 레벨 스코프를 지원하지 않고 함수 레벨 스코프를 지원한다는 것이다. 이로 인해 의도치 않게 전역 변수가 선언되어 심각한 부작용이 발생하기도 한다.
<br />
자바스크립트 엔진은 변수 선언을 다음과 같은 2단계에 거쳐 수행한다.</p>
</blockquote>

<ol>
  <li>변수 선언<br />
변수의 이름을 등록하고 값을 저장할 메모리 공간 확보.
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="kd">var</span> <span class="nx">score</span><span class="p">;</span> <span class="c1">// 변수 선언</span>
</code></pre></div>    </div>
  </li>
  <li>변수 초기화<br />
변수 선언 후, 아직 변수에 값을 할당하지 않았지만 자바스크립트 엔진에 의해 <code class="language-plaintext highlighter-rouge">undefined라는 값이 암묵적으로 할당되어 초기화</code> 된다.</li>
</ol>

<h2 id="44-변수-선언의-실행-시점과-변수-호이스팅">4.4 변수 선언의 실행 시점과 변수 호이스팅</h2>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">80</span>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">score</span><span class="p">)</span> <span class="c1">// undefined</span>

  <span class="kd">var</span> <span class="nx">score</span><span class="p">;</span> <span class="c1">// 변수 선언</span>
</code></pre></div></div>
<p>console.log(score);가 실행되는 시점에는 아직 score 변수의 선언이 실행되지 않았으므로 참조에러가 발생할 것처럼 보인다. 하지만 참조 에러가 발생하지 않고 undefined가 출력된다.<br />
그 이유는 <code class="language-plaintext highlighter-rouge">변수 선언</code>이 소스코드가 한 줄씩 순차적으로 실행되는 시점, 즉 <code class="language-plaintext highlighter-rouge">런타임이 아니라 그 이전 단계(소스코드 평가 과정)에서 먼저 실행되기 때문이다.</code><br />
변수 선언문이 코드의 선두로 끌어 올려진 것처럼 동작하는 자바스크립트 고유의 특징을 <code class="language-plaintext highlighter-rouge">호이스팅</code>이라 한다.</p>

<h2 id="45-값의-할당">4.5 값의 할당</h2>
<p><code class="language-plaintext highlighter-rouge">변수 선언</code>은 소스코드가 순차적으로 실행되는 시점인 <code class="language-plaintext highlighter-rouge">런타임 이전</code>에 먼저 실행되지만 <code class="language-plaintext highlighter-rouge">변수 값의 할당은</code> 소스코드가 순차적으로 실행되는 시점인 <code class="language-plaintext highlighter-rouge">런타임에 실행</code>된다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">score</span><span class="p">)</span> <span class="c1">// undefined</span>

  <span class="kd">var</span> <span class="nx">score</span><span class="p">;</span> <span class="c1">// 1 변수 선언</span>
  <span class="nx">score</span> <span class="o">=</span> <span class="mi">80</span><span class="p">;</span> <span class="c1">// 2 값의 할당</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">score</span><span class="p">);</span> <span class="c1">// 80</span>
</code></pre></div></div>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">score</span><span class="p">)</span> <span class="c1">// undefined</span>

  <span class="nx">score</span> <span class="o">=</span> <span class="mi">80</span><span class="p">;</span> <span class="c1">// 값의 할당</span>
  <span class="kd">var</span> <span class="nx">score</span><span class="p">;</span> <span class="c1">// 변수 선언</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">score</span><span class="p">);</span> <span class="c1">// 80</span>
  <span class="c1">// score 변수 선언이 호이스팅되어 undefinde로 초기화 되었고, 런타임 시 순차적인 실행에 의해 80으로 값이 할당되었다.</span>
</code></pre></div></div>

<h2 id="46-값의-재할당">4.6 값의 재할당</h2>
<p>재할당은 변수에 저장된 값을 다른 값으로 변경한다. 만약 <code class="language-plaintext highlighter-rouge">값을 재할당할 수 없어서 변수에 저장된 값을 변경할 수 없다면 변수가 아니라 상수라 한다.</code> 상수는 단 한번만 할당할 수 있는 변수다.</p>
<blockquote>
  <p>ES6에서 도입된 const 키워드를 사용해 선언한 변수는 재할당이 금지된다. const 키워드를 사용하면 상수를 표현할 수 있다.</p>
</blockquote>

<h3 id="변수-값-할당에-따른-메모리-변화">변수 값 할당에 따른 메모리 변화</h3>
<ol>
  <li>변수 선언시 undefined로 초기화</li>
  <li>80이라는 값을 할당</li>
  <li>90으로 값을 재할당<br />
(메모리 그림)
저장되어 있던 이전 값의 메모리 공간을 지우고 새롭게 저장하는 것이 아니라 새로운 메모리 공간을 확보하고 그 공간에 재할당한 값을 저장한다.</li>
</ol>
:ET