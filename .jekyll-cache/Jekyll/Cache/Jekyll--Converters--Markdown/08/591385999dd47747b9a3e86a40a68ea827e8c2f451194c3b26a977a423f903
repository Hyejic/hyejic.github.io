I"l<p><br /></p>

<h1 id="14장-전역-변수의-문제점">14장 전역 변수의 문제점</h1>

<h2 id="141-변수의-생명-주기">14.1 변수의 생명 주기</h2>
<h3 id="1411-지역-변수의-생명-주기">14.1.1 지역 변수의 생명 주기</h3>
<p>변수는 자신이 선언된 위치에서 생성되고 소멸한다. 함수 내부에서 선언한 변수는 함수가 호출된 직후에 함수 몸체의 코드가 한 줄씩 순차적으로 실행되기 이전에 자스크립트 엔진에 의해 먼저 실행된다. 즉, 지역변수의 생명주기는 함수의 생명 주기와 일치한다.</p>

<p><img width="351" alt="14-1 지역 변수의 생명 주기" src="https://user-images.githubusercontent.com/44577555/165106439-35cda26f-b0b2-4f36-97ae-e730d2ab183f.png" /></p>

<p>변수는 메모리공간에 저장 되었다가 저장된 메모리 공간을 더이상 참조하지 않을 때 가비지 콜렉터에 의헤 해제되어 가용 메모리를 반환한다. 즉, 누군가가 메모리 공간을 참조하고 있으면 해제되지 않고 확보된 상태로 남아있게 되어 함수의 생명주기와 다를 수 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">global</span><span class="dl">'</span><span class="p">;</span>

  <span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span>  <span class="c1">// 🤔</span>
    <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">local</span><span class="dl">'</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="nx">foo</span><span class="p">();</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span> <span class="c1">// global</span>
</code></pre></div></div>

<p>위 예제에서 foo 함수 내부에서 선언된 지역 변수 x는 🤔 시점에 이미 선언되었고 undefined로 초기화되어 있다. x변수는 전역 변수 x가 아닌 지역 변수 x를 참조하고 할당문이 실행되기 전까지는 undefined 값을 갖는다. 이처럼 호이스팅은 스코프를 단위로 동장한다.</p>
<blockquote>
  <p><code class="language-plaintext highlighter-rouge">호이스팅?</code> 변수 선언이 스코프의 선두로 끌어 올려진 것처럼 동작하는 자바스크립트 고유의 특징</p>
</blockquote>

<h3 id="1412-전역-변수의-생명-주기">14.1.2 전역 변수의 생명 주기</h3>
<p>함수와 달리 전역 코드는 명시적인 호출 없이 실행된다. 전역 코드에는 반환문을 사용할 수 없으므로 마지막 문이 실행되어 더 이상 실행할 문이 없을 때 종료한다.<br />
var 키워드로 선언한 전역 변수는 전역 객체의 프로퍼티가 된다. 즉, 전역 변수의 생명 주기가 전역 객체의 생명 주기와 일치한다.</p>

<p><img width="420" alt="14-2 전역 변수의 생명 주기" src="https://user-images.githubusercontent.com/44577555/165118277-b36b8668-068f-42d8-b60d-8ef109348f5b.png" /></p>

<p>브라우저 환경에서 전역 객체는 window -&gt; var 키워드로 선언한 전역변수는 window의 프로퍼티이므로 생명주기는 전역 객체 window의 생명 주기와 같다.</p>
:ET