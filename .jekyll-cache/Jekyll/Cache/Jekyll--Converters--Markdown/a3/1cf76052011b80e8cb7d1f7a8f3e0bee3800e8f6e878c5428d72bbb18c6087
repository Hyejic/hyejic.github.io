I"π<p><br /></p>

<h1 id="23장-실행-컨텍스트">23장 실행 컨텍스트</h1>
<p>실행 컨텍스트는 자바스크립트의 동작 원리를 담고 있는 핵심 개념이다.</p>

<h2 id="231-소스코드의-타입">23.1 소스코드의 타입</h2>
<p>ECMAScript 사양은 소스코드를 4가지 타입으로 구분한다. 소스코드 타입에 따라 실행 컨텍스트를 생성하는 과정과 관리 내용이 다르다.</p>
<ul>
  <li>전역 코드<br />
전역 변수를 관리하기 위해 최상위 스코프인 전역 스코프를 생성해야한다. var 키워드로 선언된 전역 변수와 함수 선언문으로 정의된 전역 함수를 전역 객체의 프로퍼티와 메서드로 바인딩하고 참조하기 위해 전역 객체와 연결되어야 한다. 이를 위해 <code class="language-plaintext highlighter-rouge">전역 코드가 평가되면 전역 실행 컨텍스트가 생성</code>된다.</li>
  <li>함수 코드<br />
지역 스코프를 생성하고 지역변수, 매개변수, arguments 객체를 관리해야 한다. 그리고 생성한 지역 스코프를 전역 스코프에서 시작하는 스코프 체인의 일원으로 연결해야 한다. 이를 위해 <code class="language-plaintext highlighter-rouge">함수 코드가 평가되면 함수 실행 컨텍스트</code>가 생성된다.</li>
  <li>eval 코드 <br />
strict mode에서 자신만의 독자적인 스코프를 생성한다. 이를 위해 <code class="language-plaintext highlighter-rouge">eval 코드가 평가되면 eval 실행 컨텍스트가 생성</code>된다.</li>
  <li>모듈 코드<br />
모듈별로 독립적인 모듈 스코프를 생성한다. 이를 위해 <code class="language-plaintext highlighter-rouge">모듈 코드가 평가되면 모듈 실행 컨텍스트가 생성</code>된다.</li>
</ul>

<h2 id="232-소스코드의-평가와-실행">23.2 소스코드의 평가와 실행</h2>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">circle</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">radius</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span>
    <span class="nx">getDiameter</span><span class="p">()</span> <span class="p">{</span>
      <span class="c1">// this는 메서드를 호출한 객체를 가리킨다.</span>
      <span class="k">return</span> <span class="mi">2</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">};</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">circle</span><span class="p">.</span><span class="nx">getDiameter</span><span class="p">());</span> <span class="c1">// 10</span>
</code></pre></div></div>
<p>위 예제처럼 객체 리터럴 내부에서의 this는 메서드를 호출한 객체, 즉 circle을 가리킨다.</p>

<h3 id="생성자함수-this">생성자함수 this</h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">Circle</span><span class="p">(</span><span class="nx">radius</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// this는 생성자 함수가 생성할 인스턴스를 가리킨다.</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">radius</span> <span class="o">=</span> <span class="nx">radius</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="nx">Circle</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getDiameter</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="mi">2</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="p">;</span>
  <span class="p">};</span>

  <span class="c1">// 인스턴스 생성</span>
  <span class="kd">const</span> <span class="nx">circle</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Circle</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">circle</span><span class="p">.</span><span class="nx">getDiameter</span><span class="p">());</span> <span class="c1">// 10</span>
</code></pre></div></div>
<p>위 예제처럼 생성자 함수 내부에서의 this는 함수가 생성할 인스턴스를 가리킨다.</p>

<h3 id="자바스크립트에서의-this">자바스크립트에서의 this</h3>
<p>함수가 호출되는 방식에 따라 this에 바인딩될 값, 즉 this 바인딩이 동적으로 결정된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// this는 어디서든지 참조 가능하다.</span>
  <span class="c1">// 전역에서 this는 전역 객체 window를 가리킨다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">);</span> <span class="c1">// window</span>

  <span class="kd">function</span> <span class="nx">square</span><span class="p">(</span><span class="nx">number</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 일반 함수 내부에서 this는 전역 객체 window를 가리킨다.</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">);</span> <span class="c1">// window</span>
    <span class="k">return</span> <span class="nx">number</span> <span class="o">*</span> <span class="nx">number</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="nx">square</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>

  <span class="kd">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Lee</span><span class="dl">'</span><span class="p">,</span>
    <span class="nx">getName</span><span class="p">()</span> <span class="p">{</span>
      <span class="c1">// 메서드 내부에서 this는 메서드를 호출한 객체를 가리킨다.</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">);</span> <span class="c1">// {name: 'Lee', getName: f}</span>
      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">getName</span><span class="p">());</span> <span class="c1">// Lee</span>
  
  <span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
    <span class="c1">// 생성자 함수 내부에서 this는 생성자 함수가 생성할 인스턴스를 가리킨다.</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">);</span> <span class="c1">// Person {name: "Lee"}</span>
  <span class="p">}</span>

  <span class="kd">const</span> <span class="nx">me</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="dl">'</span><span class="s1">Lee</span><span class="dl">'</span><span class="p">);</span>
</code></pre></div></div>

<h2 id="222-함수-호출-방식과-this-바인딩">22.2 함수 호출 방식과 this 바인딩</h2>
<p>this 바인딩은 함수 호출 방식, 즉 함수가 어떻게 호출되었는지에 따라 동적으로 결정된다.</p>

<h3 id="2221-일반-함수-호출">22.2.1 일반 함수 호출</h3>
<p>기본적으로 this에는 전역 객체가 바인딩된다.<br />
일반 함수로 호출하면 함수 내부의 this에는 전역 객체가 바인딩된다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`foo is this: </span><span class="p">${</span><span class="k">this</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span> <span class="c1">// window</span>
    <span class="kd">function</span> <span class="nx">bar</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`bar is this: </span><span class="p">${</span><span class="k">this</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span> <span class="c1">// window</span>
    <span class="p">}</span>
    <span class="nx">bar</span><span class="p">();</span>
  <span class="p">}</span>
  <span class="nx">foo</span><span class="p">();</span>
</code></pre></div></div>
<p>어떠한 함수라도 모든 함수(중첩 함수, 콜백 함수)는 일반 함수로 호출되면 내부의 this에는 전역 객체가 바인딩된다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">value</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

  <span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">value</span><span class="p">:</span> <span class="mi">100</span><span class="p">,</span>
    <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`foo is this: </span><span class="p">${</span><span class="k">this</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span> <span class="c1">// {value: 100. foo: f}</span>
      <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`callback is this: </span><span class="p">${</span><span class="k">this</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span> <span class="c1">// window</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`callback is this.value: </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span> <span class="c1">// 1</span>
      <span class="p">},</span> <span class="mi">100</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">};</span>

  <span class="nx">obj</span><span class="p">.</span><span class="nx">foo</span><span class="p">();</span>
</code></pre></div></div>

<h4 id="매서드-내부의-중첩-함수나-콜백-함수의-this-바인딩을-메서드의-this-바인딩과-일치하는-방법">매서드 내부의 중첩 함수나 콜백 함수의 this 바인딩을 메서드의 this 바인딩과 일치하는 방법</h4>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">value</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

  <span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">value</span><span class="p">:</span> <span class="mi">100</span><span class="p">,</span>
    <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
      <span class="c1">// this 바인딩(obj)을 변수 that에 할당한다.</span>
      <span class="kd">const</span> <span class="nx">that</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
      <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">that</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span> <span class="c1">// 100</span>
      <span class="p">},</span> <span class="mi">100</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">};</span>

  <span class="nx">obj</span><span class="p">.</span><span class="nx">foo</span><span class="p">();</span>
</code></pre></div></div>
<p>위 예제와 같은 방법 이외에도 this를 명시적으로 바인딩할 수 있는 Function.prototype.apply, Function.prototype.call, Function.prototype.bind 메서드를 제공한다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">value</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

  <span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">value</span><span class="p">:</span> <span class="mi">100</span><span class="p">,</span>
    <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
      <span class="c1">// 콜백 함수에 명시적으로 this를 바인딩</span>
      <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span> <span class="c1">// 100</span>
      <span class="p">}.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">),</span> <span class="mi">100</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">};</span>

  <span class="nx">obj</span><span class="p">.</span><span class="nx">foo</span><span class="p">();</span>
</code></pre></div></div>
<p>또는 화살표 함수를 사용해서 this 바인딩을 할 수 있다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">value</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

  <span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">value</span><span class="p">:</span> <span class="mi">100</span><span class="p">,</span>
    <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
      <span class="c1">// 화삻표 함수 내부의 this는 상위 스코프의 this를 가리킨다.</span>
      <span class="nx">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span> <span class="c1">// 100</span>
      <span class="p">},</span> <span class="mi">100</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">};</span>

  <span class="nx">obj</span><span class="p">.</span><span class="nx">foo</span><span class="p">();</span>
</code></pre></div></div>

<h3 id="2222-메서드-호출">22.2.2 메서드 호출</h3>
<p>매서드 내부의 this에는 메서드를 호출한 객체, 즉 메서드를 호출할 때 메서드 이름 앞의 마침표(.) 연산자 앞에 기술한 객체가 바인딩 된다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Lee</span><span class="dl">'</span><span class="p">,</span>
    <span class="nx">getName</span><span class="p">()</span> <span class="p">{</span>
      <span class="c1">// 메서드 내부의 this는 메서드를 호출한 객체에 바인딩된다.</span>
      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">};</span>

  <span class="c1">// 메서드 getName을 호출한 객체는 person이다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">getName</span><span class="p">());</span> <span class="c1">// Lee</span>
</code></pre></div></div>
<p>위 예제의 person객체의 getName 프로퍼티가 가리키는 함수 객체는 person 객체에 포함된 것이 아니라 <code class="language-plaintext highlighter-rouge">독립적으로 존재하는 별도의 객체</code>다. getName 프로퍼티가 함수 객체를 가리키고 있을 뿐이다.<br />
(그림 22-1)<br />
프로토타입 메서드 내부에서 사용된 this도 일반 메서드와 마찬가지로 해당 메서드를 호출한 객체에 바인딩된다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getName</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
  <span class="p">};</span>

  <span class="kd">const</span> <span class="nx">me</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="dl">'</span><span class="s1">Lee</span><span class="dl">'</span><span class="p">);</span>

  <span class="c1">// getName 메서드를 호출한 객체는 me다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">me</span><span class="p">.</span><span class="nx">getName</span><span class="p">());</span> <span class="c1">// Lee  1</span>

  <span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Kim</span><span class="dl">'</span><span class="p">;</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getName</span><span class="p">());</span> <span class="c1">// Kim   2</span>
</code></pre></div></div>
<p>1의 경우 getName 메서드 내부의 this는 me를 가리키며 this.name은 ‘Lee’다.
2의 경우 Person.prototype도 객체이므로 직접 메서드 호출이 가능하다. getName 메서드 내부의 this는 Person.prototype을 가리키며 this.name은 ‘Kim’이다.<br />
(그림 22-3)</p>

<h3 id="2223-생성자-함수-호출">22.2.3 생성자 함수 호출</h3>
<p>생성자 함수 내부의 this에는 생성자 함수가 생성할 인스턴스가 바인딩된다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">Circle</span><span class="p">(</span><span class="nx">radius</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">radius</span> <span class="o">=</span> <span class="nx">radius</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">getDiameter</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="mi">2</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="p">;</span>
    <span class="p">};</span>
  <span class="p">}</span>

  <span class="kd">const</span> <span class="nx">circle1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Circle</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">circle2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Circle</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
  
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">circle1</span><span class="p">.</span><span class="nx">getDiameter</span><span class="p">());</span> <span class="c1">// 10</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">circle2</span><span class="p">.</span><span class="nx">getDiameter</span><span class="p">());</span> <span class="c1">// 20</span>

  <span class="c1">// new 연산자 없이 호출하면 생성자 함수로 동작하지 않는다. 일반 함수 호출</span>
  <span class="kd">const</span> <span class="nx">circle3</span> <span class="o">=</span> <span class="nx">Circle</span><span class="p">(</span><span class="mi">15</span><span class="p">);</span>

  <span class="c1">// 일반 함수로 호출된 Circle에는 반환문이 없으므로 암묵적으로 undefined가 반환</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">circle3</span><span class="p">);</span> <span class="c1">// undefined</span>

  <span class="c1">// 일반 함수로 호출된 Circle 내부의 this는 전역 객체를 가리킨다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">radius</span><span class="p">);</span> <span class="c1">// 15</span>
</code></pre></div></div>

<h3 id="2224-functionprototypeapplycallbind-메서드에-의한-간접-호출">22.2.4 Function.prototype.apply/call/bind 메서드에 의한 간접 호출</h3>
<p>apply, call, bind 메서드는 Function.prototype의 메서드다. 즉, 이들 메서드는 모든 함수가 상속받아 사용할 수 있다.</p>

<h4 id="functionprototypeapplyfunctionprototypecall">Function.prototype.apply/Function.prototype.call</h4>
<p>this로 사용할 객체과 인수 리스트를 인수로 전달받아 함수를 호출한다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="cm">/**
   * apply 사용법
   * 주어진 this 바인딩과 인수 리스트 배열을 사용하여 함수를 호출한다.
   * @param thisArg - this로 사용할 객체
   * @param argsArray - 함수에게 전달할 인수 리스트의 배열 또는 유사 배열 객체
   * @returns 호출된 함수의 반환값
  */</span>
  <span class="c1">// Function.prototype.apply(thisArg[, argsArray])</span>
  <span class="nb">Function</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">thisArg</span><span class="p">,</span> <span class="p">[</span><span class="nx">argsArray</span><span class="p">])</span>
  
  <span class="cm">/**
   * call 사용법
   * 주어진 this 바인딩과 ,로 구분된 인수 리스트를 사용하여 함수를 호출한다.
   * @param thisArg - this로 사용할 객체
   * @param arg1, arg2, ... - 함수에게 전달할 인수 리스트
   * @returns 호출된 함수의 반환값
  */</span>
  <span class="c1">// Function.prototype.call(thisArg[, arg1[, arg2[, ...]]])</span>
  <span class="nb">Function</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">thisArg</span><span class="p">,</span> <span class="nx">arg1</span><span class="p">,</span> <span class="nx">arg2</span><span class="p">,</span> <span class="p">...)</span>
</code></pre></div></div>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">getThisBinding</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arguments</span><span class="p">);</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="c1">// this로 사용할 객체</span>
  <span class="kd">const</span> <span class="nx">thisArg</span> <span class="o">=</span> <span class="p">{</span> <span class="na">a</span><span class="p">:</span> <span class="mi">1</span> <span class="p">};</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">getThisBinding</span><span class="p">());</span> <span class="c1">// window</span>

  <span class="c1">// getThisBinding 함수를 호출하면서 인수로 전달한 객체를 getThisBinding 함수의 this에 바인딩한다.</span>
  <span class="c1">// apply 메서드는 호출할 함수의 인수를 배열로 묶어 전달한다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">getThisBinding</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">thisArg</span><span class="p">,[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]));</span> 
  <span class="c1">// Arguments(3) [1, 2, 3, callee: ƒ, Symbol(Symbol.iterator): ƒ]</span>
  <span class="c1">//{ a: 1 }</span>

  <span class="c1">// call 메서드는 호출할 함수의 인수를 쉼표로 구분한 리스트 형식으로 전달한다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">getThisBinding</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">thisArg</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">));</span> 
  <span class="c1">// Arguments(3) [1, 2, 3, callee: ƒ, Symbol(Symbol.iterator): ƒ]</span>
  <span class="c1">//{ a: 1 }</span>
</code></pre></div></div>
<p>apply와 call 메서드의 본질적인 기능은 함수를 호출하는 것이다. 인수를 전달하는 방식만 다를 뿐 동일하게 동작한다.</p>

<h4 id="functionprototypebind">Function.prototype.bind</h4>
<p>apply, call 메서드와 달리 함수를 호출하지 않는다. 다만 첫 번째 인수로 전달한 값으로 this 바인딩이 교체된 함수를 새롭게 생성해 반환한다.
bind 메서드는 메서드의 this와 메서드 내부의 중첩 함수 또는 콜백 함수의 this가 불일치하는 문제를 해결하기 위해 유용하게 사용된다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">getThisBinding</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="c1">// this로 사용할 객체</span>
  <span class="kd">const</span> <span class="nx">thisArg</span> <span class="o">=</span> <span class="p">{</span> <span class="na">a</span><span class="p">:</span> <span class="mi">1</span> <span class="p">};</span>

  <span class="c1">// bind 메서드는 첫 번쨰 인수로 전달한 thisArg로 this 바인딩이 교체된</span>
  <span class="c1">// getThisBinding 함수를 새롭게 생성해 반환한다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">getThisBinding</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">thisArg</span><span class="p">));</span> <span class="c1">// getThisBinding</span>
  <span class="c1">// bind 메서드는 함수를 호출하지는 않으므로 명시적으로 호출해야 한다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">getThisBinding</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">thisArg</span><span class="p">()));</span> <span class="c1">//{ a: 1 }</span>

  <span class="c1">// 콜백 함수의 this가 불일치하는 문제를 해결 </span>
  <span class="kd">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span><span class="p">,</span>
    <span class="nx">foo</span><span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// bind 메서드로 callback 함수 내부의 this 바인딩을 전달</span>
      <span class="nx">setTimeout</span><span class="p">(</span><span class="nx">callback</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">),</span> <span class="mi">100</span><span class="p">);</span> 
    <span class="p">}</span>
  <span class="p">}</span>

<span class="nx">person</span><span class="p">.</span><span class="nx">foo</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`my name is </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="s2">.`</span><span class="p">);</span> <span class="c1">// my name is Choi.</span>
<span class="p">});</span>
</code></pre></div></div>

<h2 id="this-바인딩-동적-결정-정리">this 바인딩 동적 결정 정리</h2>
<p>함수 호출 방식 | this 바인딩
–|–
일반 함수 호출 | 전역 객체
메서드 호출 | 메서드를 호출한 객체
생성자 함수 호출 | 생성자 함수가 생성할 인스턴스
Function.prototype.apply/call/bind 메서드에 의한 간접 호출 | Function.prototype.apply/call/bind 메서드의 첫번째 인수로 전달한 객체</p>
:ET