I"H.<p><br /></p>

<h1 id="06장-데이터-타입">06장 데이터 타입</h1>
<table>
  <tr>
    <td>구분</td>
    <td>데이터 티입</td>
    <td>설명</td>
  </tr>
  <tr>
    <td rowspan="6">원시 타입</td>
    <td>숫자 타입(number)</td>
    <td>숫자, 정수와 실수 구분 없이 하나의 숫자 타입만 존재</td>
  </tr>
  <tr>
    <td>문자열 타입(string)</td>
    <td>문자열</td>
  </tr>
  <tr>
    <td>불리언 타입(boolean)</td>
    <td>논리적 참(true)과 거짓(false)</td>
  </tr>
  <tr>
    <td>undefined 타입</td>
    <td>var 키워드로 선언된 변수에 암묵적으로 할당되는 값</td>
  </tr>
  <tr>
    <td>null 타입</td>
    <td>값이 없다는 것을 의도적으로 명시할 때 사용하는 값</td>
  </tr>
  <tr>
    <td>실벌 타입(symbol)</td>
    <td>ES6에 추가된 7번째 타입</td>
  </tr>
  <tr>
    <td colspan="2">객체 타입</td>
    <td>객체, 함수, 배열 등</td>
  </tr>

</table>

<h2 id="61-숫자-타입">6.1 숫자 타입</h2>
<p>자바스크립트에서는 <code class="language-plaintext highlighter-rouge">모슨 수를 실수로 처리</code>하며, 정수만 표현하기 위한 데이터 타입이 별도로 존재하지 않는다. 따라서 정수로 표시된다 해도 사실은 실수라는 것을 의미한다. 자바스크립트는 2진수, 8진수, 16진수를 표현하기 위한 데이터 타입을 제공하지 않기 때문에 이들 값을 참조하면 모두 10진수로 해석된다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">integer</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span> <span class="c1">// 정수</span>
  <span class="kd">var</span> <span class="nx">double</span> <span class="o">=</span> <span class="mf">10.12</span><span class="p">;</span> <span class="c1">// 실수</span>
  <span class="kd">var</span> <span class="nx">negative</span> <span class="o">=</span> <span class="o">-</span><span class="mi">20</span><span class="p">;</span> <span class="c1">// 음의 정수</span>
  <span class="kd">var</span> <span class="nx">octal</span> <span class="o">=</span> <span class="mo">0o101</span><span class="p">;</span> 

</code></pre></div></div>
<h3 id="변수-명칭">변수 명칭</h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">resualt</span> <span class="o">=</span> <span class="mi">10</span> <span class="o">+</span> <span class="mi">20</span><span class="p">;</span>
</code></pre></div></div>
<p>변수 명 -&gt; result<br />
변수 값 -&gt; 변수에 저장된 값 30<br />
할당 -&gt; 변수에 값을 저장하는 것<br />
참초 -&gt; 변수에 저장된 값을 읽어 들이는 것</p>

<h2 id="42-식별자">4.2 식별자</h2>
<p>변수 이름을 <code class="language-plaintext highlighter-rouge">식별자</code>라고도 한다. <code class="language-plaintext highlighter-rouge">식별자는 값이 아니라 메모리 주소를 기억하고 있다.</code> 식별자로 값을 구별해서 식별한다는 것은 식별자가 기억하고 있는 메모리 주소를 통해 메모리 공간에 저장된 값에 접근할 수 있다는 의미이다. 식별자는 메모리 주소에 붙인 이름이라고 할 수 있다.</p>

<h2 id="43-변수-선언">4.3 변수 선언</h2>
<p>변수를 선언할 때는 var, let, const 키워드를 사용한다.</p>
<blockquote>
  <p>var 키워드는 여러 단점이 있다. 가장 대표적인 것이 블록 레벨 스코프를 지원하지 않고 함수 레벨 스코프를 지원한다는 것이다. 이로 인해 의도치 않게 전역 변수가 선언되어 심각한 부작용이 발생하기도 한다.
<br />
자바스크립트 엔진은 변수 선언을 다음과 같은 2단계에 거쳐 수행한다.</p>
</blockquote>

<ol>
  <li>변수 선언<br />
변수의 이름을 등록하고 값을 저장할 메모리 공간 확보.
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="kd">var</span> <span class="nx">score</span><span class="p">;</span> <span class="c1">// 변수 선언</span>
</code></pre></div>    </div>
  </li>
  <li>변수 초기화<br />
변수 선언 후, 아직 변수에 값을 할당하지 않았지만 자바스크립트 엔진에 의해 <code class="language-plaintext highlighter-rouge">undefined라는 값이 암묵적으로 할당되어 초기화</code> 된다.</li>
</ol>

<h2 id="44-변수-선언의-실행-시점과-변수-호이스팅">4.4 변수 선언의 실행 시점과 변수 호이스팅</h2>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">80</span>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">score</span><span class="p">)</span> <span class="c1">// undefined</span>

  <span class="kd">var</span> <span class="nx">score</span><span class="p">;</span> <span class="c1">// 변수 선언</span>
</code></pre></div></div>
<p>console.log(score);가 실행되는 시점에는 아직 score 변수의 선언이 실행되지 않았으므로 참조에러가 발생할 것처럼 보인다. 하지만 참조 에러가 발생하지 않고 undefined가 출력된다.<br />
그 이유는 <code class="language-plaintext highlighter-rouge">변수 선언</code>이 소스코드가 한 줄씩 순차적으로 실행되는 시점, 즉 <code class="language-plaintext highlighter-rouge">런타임이 아니라 그 이전 단계(소스코드 평가 과정)에서 먼저 실행되기 때문이다.</code><br />
변수 선언문이 코드의 선두로 끌어 올려진 것처럼 동작하는 자바스크립트 고유의 특징을 <code class="language-plaintext highlighter-rouge">호이스팅</code>이라 한다.</p>

<h2 id="45-값의-할당">4.5 값의 할당</h2>
<p><code class="language-plaintext highlighter-rouge">변수 선언</code>은 소스코드가 순차적으로 실행되는 시점인 <code class="language-plaintext highlighter-rouge">런타임 이전</code>에 먼저 실행되지만 <code class="language-plaintext highlighter-rouge">변수 값의 할당은</code> 소스코드가 순차적으로 실행되는 시점인 <code class="language-plaintext highlighter-rouge">런타임에 실행</code>된다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">score</span><span class="p">)</span> <span class="c1">// undefined</span>

  <span class="kd">var</span> <span class="nx">score</span><span class="p">;</span> <span class="c1">// 1 변수 선언</span>
  <span class="nx">score</span> <span class="o">=</span> <span class="mi">80</span><span class="p">;</span> <span class="c1">// 2 값의 할당</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">score</span><span class="p">);</span> <span class="c1">// 80</span>
</code></pre></div></div>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">score</span><span class="p">)</span> <span class="c1">// undefined</span>

  <span class="nx">score</span> <span class="o">=</span> <span class="mi">80</span><span class="p">;</span> <span class="c1">// 값의 할당</span>
  <span class="kd">var</span> <span class="nx">score</span><span class="p">;</span> <span class="c1">// 변수 선언</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">score</span><span class="p">);</span> <span class="c1">// 80</span>
  <span class="c1">// score 변수 선언이 호이스팅되어 undefinde로 초기화 되었고, 런타임 시 순차적인 실행에 의해 80으로 값이 할당되었다.</span>
</code></pre></div></div>

<h2 id="46-값의-재할당">4.6 값의 재할당</h2>
<p>재할당은 변수에 저장된 값을 다른 값으로 변경한다. 만약 <code class="language-plaintext highlighter-rouge">값을 재할당할 수 없어서 변수에 저장된 값을 변경할 수 없다면 변수가 아니라 상수라 한다.</code> 상수는 단 한번만 할당할 수 있는 변수다.</p>
<blockquote>
  <p>ES6에서 도입된 const 키워드를 사용해 선언한 변수는 재할당이 금지된다. const 키워드를 사용하면 상수를 표현할 수 있다.</p>
</blockquote>

<h3 id="변수-값-할당에-따른-메모리-변화">변수 값 할당에 따른 메모리 변화</h3>
<ol>
  <li>변수 선언시 undefined로 초기화</li>
  <li>80이라는 값을 할당</li>
  <li>90으로 값을 재할당</li>
</ol>

<p>(메모리 그림)</p>

<p>저장되어 있던 이전 값의 메모리 공간을 지우고 새롭게 저장하는 것이 아니라 새로운 메모리 공간을 확보하고 그 공간에 재할당한 값을 저장한다.</p>

<p>그림에서 알 수 있듯이 undefined와 80이 더 이상 필요하지 않다는 것을 의미한다. 이런 불필요한 값들은 가비지 콜렉터에 의해 메모리에서 자동 해제된다.</p>

<h2 id="47-식별자-네이밍-규칙">4.7 식별자 네이밍 규칙</h2>
<ul>
  <li>특수문자를 제외한 문자, 숫자, 언더스코어(_), 달러 기호($)를 포함할 수 있다.</li>
  <li>숫자로 시작하는 것은 허용하지 않는다.</li>
  <li>예약어는 식별자로 사용할 수 없다. [ <a href="http://www.w3bai.com/ko/js/js_reserved.html" title="예약어 확인 링크">javascript 예약어</a> ]</li>
  <li>변수 이름은 변수의 존재 목적을 쉽게 이해할 수 있도록 의미를 명확히 표현해야 한다. (가독성 고려)
    <h3 id="네이밍-컨벤션">네이밍 컨벤션</h3>
    <p>하나 이상의 영어 단어로 구성된 식별자를 만들때 가독성 좋게 단어를 한눈에 구분하기 위해 규정한 명명 규칙</p>
  </li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">firstName</span><span class="p">;</span> <span class="c1">// 카멜 케이스(camelCase)</span>
  <span class="kd">var</span> <span class="nx">first_name</span><span class="p">;</span> <span class="c1">// 스네이크 케이스(snake_case)</span>
  <span class="kd">var</span> <span class="nx">FirstName</span><span class="p">;</span> <span class="c1">// 파스칼 케이스(PascalCase)</span>
   
  <span class="c1">// 헝가이언 케이스 (typeHungarianCase)</span>
  <span class="kd">var</span> <span class="nx">strFirstName</span><span class="p">;</span> <span class="c1">// type + identifier</span>
  <span class="kd">var</span> <span class="nx">$elem</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">myId</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// Dom 노드</span>
  <span class="kd">var</span> <span class="nx">ovservable$</span> <span class="o">=</span> <span class="nx">fromEvent</span><span class="p">(</span><span class="nb">document</span><span class="p">,</span> <span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// RxJS 옵저버블</span>
</code></pre></div></div>
:ET