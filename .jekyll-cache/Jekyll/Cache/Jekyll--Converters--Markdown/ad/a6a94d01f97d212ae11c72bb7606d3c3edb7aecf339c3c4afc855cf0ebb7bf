I";6<p><br /></p>

<h1 id="11장-원시-값과-객체의-비교">11장 원시 값과 객체의 비교</h1>
<p>자바스크립트가 제공하는 데이터 타입은 크게 원시타입과 객체 타입으로 구분할 수 있다.<br />
<code class="language-plaintext highlighter-rouge">원시 값은 변경 불가능</code>한 값이고 <code class="language-plaintext highlighter-rouge">객체는 변경 가능</code>한 값이다.</p>

<h2 id="111-원시-값">11.1 원시 값</h2>
<h3 id="1111-변경-불가능한-값">11.1.1 변경 불가능한 값</h3>
<p>원시 값은 변경 불가능한 값, 즉 읽기 전용 값이다. 어떤일이 있어도 불변한다. 원시 값 자체를 변경할 수 없다는 것이지 변수의 값을 변경할 수 없다는 것이 아니다.
변수는 재할당을 통해 값을 변경할 수 있다. 상대 개념인 상수는 재할당이 금지된 변수를 말한다. 따라서 상수는 재할당이 금지된 변수일 뿐이다.</p>

<p>변수가 참조하던 메모리 공간의 주소가 변경된 이유는 변수에 할당된 원시 값이 변경 불가능한 값이기 때문이다.
만약 원시 값이 변경 가능한 값이라면 메모리 공간의 주소를 바꿀 필요없이 원시 값 자체를 변경하면 그만이다. (아래 그림 참고)</p>

<p>(그림 11-2)</p>

<p>따라서 변수 값을 변경하기 위해 원시 값을 재할당하면 새로운 메모리 공간을 확보하고 재할당한 값을 저장한 후, 변수가 참조하던 메모리 공간의 주소를 변경한다. 이러한 특성을 불변성이라 한다. (아래 그림 참고)</p>

<p>(그림 11-1)</p>

<h3 id="1112-문자열과-불변성">11.1.2 문자열과 불변성</h3>
<p>원시 값인 문자열은 다른 원시 값과 비교할 때 독특한 특징이 있다. 문자열은 몇 개의 문자로 이뤄졌느냐에 따라 필요한 메모리 공간의 크기가 결정된다. 숫자 값은 1도 10000도 동일한 8바이트가 필요하지만 문자열의 경우 1개의 문자라면 2바이트, 10개의 문자로 이뤄졌다면 20바이트가 필요하다. 문자열은 유사 배열 객체이면서 이터러블이으로 배열과 유사하게 각 문자에 접근이 가능하다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">str</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">string</span><span class="dl">'</span><span class="p">;</span>

  <span class="nx">str</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">S</span><span class="dl">'</span><span class="p">;</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">str</span><span class="p">);</span> <span class="c1">// string</span>
</code></pre></div></div>

<p>이미 생성된 문자열의 일부 문자를 변경해도 반영되지 않는다. 문자열은 변경 불가능한 값이기 때문이다.</p>

<blockquote>
  <p>유사 배열 객체<br />
마치 배열처럼 인덱스로 프로퍼티 값에 접근할 수 있고 length 프로퍼티를 갖는 객체를 말한다.</p>
</blockquote>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 문자열은 유사 배열이므로 배열과 유사하게 인덱스를 사용해 각 문자에 접근할 수 있다.</span>
  <span class="kd">var</span> <span class="nx">str</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">string</span><span class="dl">'</span><span class="p">;</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">str</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span> <span class="c1">// s</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">str</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span> <span class="c1">// 6</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">str</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">);</span> <span class="c1">// STRING</span>
</code></pre></div></div>

<h3 id="1113-값에-의한-전달">11.1.3 값에 의한 전달</h3>
<p>변수에 원시 값을 갖는 변수를 할당하면 할당받는 변수에는 할당되는 변수의 <code class="language-plaintext highlighter-rouge">원시 값이 복사되어 전달</code>된다. 이것을 <code class="language-plaintext highlighter-rouge">값에 의한 전달</code>이라 한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">score</span> <span class="o">=</span> <span class="mi">80</span><span class="p">;</span>
  <span class="kd">var</span> <span class="nx">copy</span> <span class="o">=</span> <span class="nx">score</span><span class="p">;</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">score</span><span class="p">,</span> <span class="nx">copy</span><span class="p">);</span> <span class="c1">// 80 80</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">score</span> <span class="o">===</span> <span class="nx">copy</span><span class="p">)</span> <span class="c1">// true</span>
</code></pre></div></div>
<p>copy 변수에 원시 값을 갖는 score 변수를 할당하면 원시 값 80이 복사되어 전달된다.<br />
score 변수와 copy 변수의 값은 80으로 동일하지만, 각 변수의 값 80은 다른 메모리 공간에 저장된 별개의 값이다.<br />
(그림 11-3)</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">score</span> <span class="o">=</span> <span class="mi">80</span><span class="p">;</span>
  <span class="kd">var</span> <span class="nx">copy</span> <span class="o">=</span> <span class="nx">score</span><span class="p">;</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">score</span><span class="p">,</span> <span class="nx">copy</span><span class="p">);</span> <span class="c1">// 80 80</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">score</span> <span class="o">===</span> <span class="nx">copy</span><span class="p">)</span> <span class="c1">// true</span>

  <span class="nx">score</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">score</span><span class="p">,</span> <span class="nx">copy</span><span class="p">);</span> <span class="c1">// 100 80</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">score</span> <span class="o">===</span> <span class="nx">copy</span><span class="p">)</span> <span class="c1">// false</span>
</code></pre></div></div>
<p>score 변수와 copy 변수의 값 80은 다른 메모리 공간에 저장된 별개의 값이기 때문에 score 변수를 변경해도 copy 변수의 값에는 어떠한 영향도 주지 않는다.<br />
<code class="language-plaintext highlighter-rouge">"값의 의한 전달"</code>도 사실은 값을 전달하는 것이 아니라 메모리 주소를 전달한다. 단, 전달된 메모리 주소를 통해 메모리 공간에 접근하면 값을 참조할 수 있다.</p>

<h2 id="112-객체">11.2 객체</h2>
<p>객체는 프로퍼티의 개수가 정해져 있지 않으며, 동적으로 추가되고 삭제할 수 있다. 또한 프로퍼티의 값에도 제약이 없다. 따라서 객체는 원시 값과 같이 확보해야 할 메모리 공간의 크기를 사전에 정해 둘 수 없다.</p>

<h3 id="1121-변경-가능한-값">11.2.1 변경 가능한 값</h3>
<p>객체 타입의 값. 즉 객체는 변경 가능한 값이다. 객체를 할당한 변수를 참조하면 메모리에 저장되어 있는 참조 값을 통해 실제 객체에 접근한다. 객체는 변경 가능한 값이다. 따라서 객체를 할당한 변수는 재할당 없이 객체를 직접 변경할 수 있다. 즉, 재할당 없이 프로퍼티를 동적으로 추가할 수도 있고 프로퍼티 값을 갱산할 수도 있으며 프로퍼티 자체를 삭제할 수도 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Lee</span><span class="dl">'</span>
  <span class="p">};</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">)</span> <span class="c1">// {name: "Lee"}</span>

  <span class="c1">// 프로퍼티 값 갱신</span>
  <span class="nx">person</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Kim</span><span class="dl">'</span><span class="p">;</span>
  <span class="c1">// 프로퍼티 동적 생성 </span>
  <span class="nx">person</span><span class="p">.</span><span class="nx">address</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Seoul</span><span class="dl">'</span><span class="p">;</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">)</span> <span class="c1">// {name: "Kim", address: "Seoul"}</span>
</code></pre></div></div>
<blockquote>
  <p><code class="language-plaintext highlighter-rouge">얕은 복사와 깊은 복사</code><br />
객체를 프로퍼트 값으로 갖는 객체의 경우 얕은 복사는 한 단계까지만 복사하는것을 말하고 깊은 복사는 객체에 중첩되어 있는 객체까지 모두 복사하는 것을 말한다.</p>
</blockquote>

<h3 id="1122-참조에-의한-전달">11.2.2 참조에 의한 전달</h3>
<p>객체를 가리키는 변수를 다른 변수에 할당하면 원본의 참조 값이 복사되어 전달된다. 이를 참조에 의한 전달이라 한다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Lee</span><span class="dl">'</span>
  <span class="p">};</span>

  <span class="c1">// 참조 값을 복사(얕은 복사)</span>
  <span class="kd">var</span> <span class="nx">copy</span> <span class="o">=</span> <span class="nx">person</span><span class="p">;</span>
</code></pre></div></div>
<p>(그림 11-9)<br />
원본 person을 사본 copy에 할당하면 원본 person의 참조 값을 복사해서 copy에 저장한다. 원본 person과 사본 copy는 서로 다른 매모리 주소를 가지지만 동일한 참조 값을 갖는다. 두 개의 식별자가 하나의 객체를 공유한다는 것을 의미한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Lee</span><span class="dl">'</span>
  <span class="p">};</span>

  <span class="c1">// 참조 값을 복사(얕은 복사)</span>
  <span class="kd">var</span> <span class="nx">copy</span> <span class="o">=</span> <span class="nx">person</span><span class="p">;</span>

  <span class="c1">//person과 copy는 동일한 객체를 참조한다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">copy</span> <span class="o">===</span> <span class="nx">person</span><span class="p">);</span> <span class="c1">//true</span>

  <span class="nx">copy</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Kim</span><span class="dl">'</span><span class="p">;</span>

  <span class="nx">person</span><span class="p">.</span><span class="nx">address</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Seoul</span><span class="dl">'</span><span class="p">;</span>

  <span class="c1">// copy와 person은 동일한 객체를 참조하기 때문에 어느 한쪽에서 객체를 변경하면 서로 영향을 주고받는다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span> <span class="c1">// {name: "Kim", address: "Seoul"}</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">copy</span><span class="p">);</span> <span class="c1">// {name: "Kim", address: "Seoul"}</span>
</code></pre></div></div>
:ET