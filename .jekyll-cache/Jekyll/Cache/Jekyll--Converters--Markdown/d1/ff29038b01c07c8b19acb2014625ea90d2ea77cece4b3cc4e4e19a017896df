I"<p><br /></p>

<h1 id="23장-실행-컨텍스트">23장 실행 컨텍스트</h1>
<p>실행 컨텍스트는 자바스크립트의 동작 원리를 담고 있는 핵심 개념이다.</p>

<h2 id="231-소스코드의-타입">23.1 소스코드의 타입</h2>
<p>ECMAScript 사양은 소스코드를 4가지 타입으로 구분한다. 소스코드 타입에 따라 실행 컨텍스트를 생성하는 과정과 관리 내용이 다르다.</p>
<ul>
  <li>전역 코드<br />
전역 변수를 관리하기 위해 최상위 스코프인 전역 스코프를 생성해야한다. var 키워드로 선언된 전역 변수와 함수 선언문으로 정의된 전역 함수를 전역 객체의 프로퍼티와 메서드로 바인딩하고 참조하기 위해 전역 객체와 연결되어야 한다. 이를 위해 <code class="language-plaintext highlighter-rouge">전역 코드가 평가되면 전역 실행 컨텍스트가 생성</code>된다.</li>
  <li>함수 코드<br />
지역 스코프를 생성하고 지역변수, 매개변수, arguments 객체를 관리해야 한다. 그리고 생성한 지역 스코프를 전역 스코프에서 시작하는 스코프 체인의 일원으로 연결해야 한다. 이를 위해 <code class="language-plaintext highlighter-rouge">함수 코드가 평가되면 함수 실행 컨텍스트</code>가 생성된다.</li>
  <li>eval 코드 <br />
strict mode에서 자신만의 독자적인 스코프를 생성한다. 이를 위해 <code class="language-plaintext highlighter-rouge">eval 코드가 평가되면 eval 실행 컨텍스트가 생성</code>된다.</li>
  <li>모듈 코드<br />
모듈별로 독립적인 모듈 스코프를 생성한다. 이를 위해 <code class="language-plaintext highlighter-rouge">모듈 코드가 평가되면 모듈 실행 컨텍스트가 생성</code>된다.</li>
</ul>

<h2 id="232-소스코드의-평가와-실행">23.2 소스코드의 평가와 실행</h2>
<p>자바스크립트 엔진은 소스코드를 2개의 과정, 즉 <code class="language-plaintext highlighter-rouge">소스코드 평가</code>와 <code class="language-plaintext highlighter-rouge">소스코드의 실행</code> 과정으로 나누어 처리한다.</p>
<ul>
  <li>소스코드 평가<br />
실행 컨텍스트 생성하고 변수나 함수 식별자를 키로 실행 컨텍스트가 관리하는 스코프에 등록</li>
  <li>소스코드의 실행<br />
런타임 시작<br />
변수나 함수의 참조를 실행 컨텍스트가 관리하는 스코프에서 검색하여 취득<br />
변수 값의 변경 등 소스코드의 실행 결과는 다시 실행컨텍스트가 관리하는 스코프에 등록된다</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">x</span><span class="p">;</span>
  <span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</code></pre></div></div>
<p>위 예제 설명</p>
<ol>
  <li>소스코드 평가<br />
  변수 선언문 var x; 실행. 변수 식별자 x는 실행 컨텍스트가 관리하는 스코프에 등록되고 undefined로 초기화된다.</li>
  <li>소스코드 실행<br />
  변수 할당문 x = 1; 실행. x변수가 소스코드 평가 과정에서 선언문이 실행되어진 변수라면 값을 할당하고 할당 결과를 실행 컨텍스트에 등록하여 관리한다.</li>
</ol>

<h2 id="233-실행-컨텍스트의-역할">23.3 실행 컨텍스트의 역할</h2>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 전역 변수 선언</span>
  <span class="kd">const</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="kd">const</span> <span class="nx">y</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>

  <span class="c1">// 함수 정의</span>
  <span class="kd">function</span> <span class="nx">foo</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 지역 변수 선언</span>
    <span class="kd">const</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">y</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>

    <span class="c1">// 메서드 호출</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span> <span class="o">+</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span><span class="p">);</span> <span class="c1">// 130</span>
  <span class="p">}</span>

  <span class="c1">// 함수 호출</span>
  <span class="nx">foo</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>

  <span class="c1">// 메서드 호출</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span><span class="p">);</span> <span class="c1">// 3</span>
</code></pre></div></div>
<p>위 예제 설명</p>
<ol>
  <li>전역 코드 평가<br />
  전역 코드의 변수 선언문과 함수 선언문이 먼저 실행되고, 그 결과 생성된 전역 변수와 전역 함수가 실행 컨첵스트가 관리하는 전역 스코프에 등록된다.<br />
  var 키워드로 선언된 전역 변수와 함수 선언문으로 정의된 전역 함수는 전역 객체의 프로퍼티와 메서드가 된다.</li>
  <li>전역 코드 실행<br />
  런타임이 시작되어 전역 코드가 순차적으로 실행되기 시작한다.<br />
  이때 전역 변수에 값이 할당되고 함수가 호출. 함수가 호출되면 전역 코드의 실행을 중단하고 함수 내부로 진입한다.</li>
  <li>함수 코드 평가<br />
  함수 내부 문들을 실행하기에 앞서 함수 코드 평가 과정을 거치며 함수 코드를 실행하기 위한 준비를 한다.<br />
  이때 매개변수와 지역 변수 선언문이 먼저 실행되고, 그 결과 생성된 매개변수와 지역 변수가 실행 컨텍스트가 관하리는 지역 스코프에 등록된다. 또한 aguments 객체가 생성되어 지역 스코프에 등록되고 this 바인딩도 결정된다.</li>
  <li>함수 코드 실행<br />
  함수 코드 평가 후 함수 코드 런타임 시작. 이때 매개변수와 지역 변수에 값이 할당되고, console.log 메서드가 호출된다.<br />
  console을 스코프 체인을 통해 검색 -&gt; log 프로퍼티를 console 객체의 프로토타입 체인을 통해 검색 -&gt; console.log 메서드에 인수로 전달된 표현식 a + x + y가 평가 -&gt;  console.log 메서드의 실행이 종료되면 함수코드에서 빠져나가 함수 호출 이전으로 되돌아간다.<br />
  이처럼 코드가 실행되려면 다음과 같이 스코프, 식별자, 코드 실행 순서 등의 관리가 필요하다.<br />
  1. 선언에 의해 생성된 모든 식별자를 스코프를 구분하여 등록하고 상태 변화를 지속적으로 관리할 수 있어야 한다.<br />
  2. 스코프는 중첩 관계에 의해 스코프 체인을 형성해야 한다. 즉, 스코프 체인을 통해 상외 스코프로 이동하며 식별자를 검색할 수 있어야 한다.<br />
  3. 현재 실행 중인 코드의 실행 순서를 변결할 수 있어야 하며 다시 되돌아갈 수도 있어야 한다.</li>
</ol>
:ET