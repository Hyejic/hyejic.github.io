I"M8<p><br /></p>

<h1 id="09장-타입-변환과-단축-평가">09장 타입 변환과 단축 평가</h1>

<h2 id="91-타입-변환이란">9.1 타입 변환이란?</h2>
<p>개발자가 의도적으로 값의 타입을 변환하는 것을 <code class="language-plaintext highlighter-rouge">명시적 타입 변환</code> 또는 <code class="language-plaintext highlighter-rouge">타입 캐스팅</code>이라 한다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>

  <span class="c1">// 의도적으로 x의 값의 타입을 string으로 변경</span>
  <span class="kd">var</span> <span class="nx">str</span> <span class="o">=</span> <span class="nx">x</span><span class="p">.</span><span class="nx">toString</span><span class="p">();</span> 
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">str</span><span class="p">,</span> <span class="nx">str</span><span class="p">)</span> <span class="c1">// string 10</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">x</span><span class="p">,</span> <span class="nx">x</span><span class="p">)</span> <span class="c1">// number 10</span>
</code></pre></div></div>
<p>개발자의 의도와는 상관없이 자바스크립트 엔진에 의해 암묵적으로 타입이 자동 변환되는 것을 <code class="language-plaintext highlighter-rouge">암묵적 타입 변환</code> 또는 <code class="language-plaintext highlighter-rouge">타입 강제 변환</code> 이라 한다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>

  <span class="c1">// 문자열 연결 연산자는 숫자 타입 x의 값을 바탕으로 새로운 문자열을 생성한다.</span>
  <span class="kd">var</span> <span class="nx">str</span> <span class="o">=</span> <span class="nx">x</span> <span class="o">+</span> <span class="dl">''</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">str</span><span class="p">,</span> <span class="nx">str</span><span class="p">)</span> <span class="c1">// string 10</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">x</span><span class="p">,</span> <span class="nx">x</span><span class="p">)</span> <span class="c1">// number 10</span>
  
</code></pre></div></div>

<h2 id="92-암묵적-타입-변환">9.2 암묵적 타입 변환</h2>
<p>암묵적 타입 변환이 발생하면 문자열, 숫자, 불리언과 같은 원시 타입 중 하나로 타일을 자동 변환한다.</p>
<h3 id="921-문자열-타입으로-변환">9.2.1 문자열 타입으로 변환</h3>
<ul>
  <li>연산자는 피연산자 중 하나 이상이 문자열이면 문자열 연결 연산자로 동작한다.
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">1</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">2</span><span class="dl">'</span> <span class="c1">// "12"</span>
<span class="mi">0</span> <span class="o">+</span> <span class="dl">''</span> <span class="c1">//  "0"</span>
<span class="kc">true</span> <span class="o">+</span> <span class="dl">''</span> <span class="c1">// "true"</span>
<span class="kc">undefined</span> <span class="o">+</span> <span class="dl">''</span> <span class="c1">// "undefined"</span>
<span class="p">(</span><span class="nb">Symbol</span><span class="p">())</span> <span class="o">+</span> <span class="dl">''</span> <span class="c1">// typeError : Cannot conver a Symbol value to a string</span>
<span class="p">({})</span> <span class="o">+</span> <span class="dl">''</span> <span class="c1">// "[object Object]"</span>
<span class="p">[</span><span class="mi">10</span><span class="p">,</span><span class="mi">20</span><span class="p">]</span> <span class="o">+</span> <span class="dl">''</span> <span class="c1">// "10,20"</span>
<span class="p">(</span><span class="kd">function</span><span class="p">(){})</span> <span class="c1">// "function(){}"</span>
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="63-템플릿-리터럴">6.3 템플릿 리터럴</h2>
<p>ES6부터 템플릿 리터럴이라고 하는 새로운 문자열 표기법이 도입되었다. <code class="language-plaintext highlighter-rouge">백틱</code>을 사용해 표현한다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">string</span> <span class="o">=</span> <span class="s2">`hello`</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="631-멀티라인-문자열">6.3.1 멀티라인 문자열</h3>
<p>일반 문자열 내에서는 줄바꿈이 허용되지 않는다. 따라서 일반 문자열 내에서 줄바꿈을 표현하려면 백슬래스로 시작하는 이스케이프 시퀀스를 사용해야한다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">string</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">hello
  world.</span><span class="dl">'</span><span class="p">;</span> 
  <span class="c1">// syntaxError</span>
  <span class="kd">var</span> <span class="nx">string</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">hello </span><span class="se">\n</span><span class="s1"> world.</span><span class="dl">'</span><span class="p">;</span> 
  <span class="kd">var</span> <span class="nx">template</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">&lt;ul&gt;</span><span class="se">\n\t</span><span class="s1">&lt;li&gt;hello&lt;/li&gt;</span><span class="se">\n</span><span class="s1">&lt;/ul&gt;</span><span class="dl">'</span><span class="p">;</span> 
</code></pre></div></div>

<p>템플릿 리터럴 내에서는 이스케이프 시퀀스를 사용하지 않고도 줄바꿈과 공백이 허용된다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">string</span> <span class="o">=</span> <span class="s2">`hello
    wolrd`</span><span class="p">;</span>
  <span class="kd">var</span> <span class="nx">template</span> <span class="o">=</span> <span class="s2">`&lt;ul&gt;
    &lt;li&gt;hello&lt;/li&gt;
  &lt;/ul&gt;`</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="632-표현식-삽입">6.3.2 표현식 삽입</h3>
<p>문자열은 문자열 연산자 +를 사용해 연결이 가능하고, 템플릿 리터럴 내에서는 ${}으로 표현식을 감싸 사용한다. 이때 표현식의 평가 결과가 문자열이 아니더라도 문자열로 타입이 강제 변환되어 삽입된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="kd">var</span> <span class="nx">first</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Ung-mo</span><span class="dl">'</span><span class="p">;</span>
   <span class="kd">var</span> <span class="nx">last</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Lee</span><span class="dl">'</span><span class="p">;</span>

   <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">My name is </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">first</span> <span class="o">+</span> <span class="dl">'</span><span class="s1"> </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">last</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">.</span><span class="dl">'</span><span class="p">)</span> <span class="c1">// 문자열</span>
   <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`My name is </span><span class="p">${</span><span class="nx">first</span><span class="p">}</span><span class="s2"> </span><span class="p">${</span><span class="nx">last</span><span class="p">}</span><span class="s2">.`</span><span class="p">)</span> <span class="c1">// 템플릿 리터럴</span>

   <span class="c1">// My name is Ung-mo Lee</span>
</code></pre></div></div>
<h2 id="64-불리언-타입">6.4 불리언 타입</h2>
<p>논리적 참, 거짓을 나타내는 true와 false뿐이다.</p>

<h2 id="65-undefined-타입">6.5 undefined 타입</h2>
<p>undefined가 유일하다.<br />
undefined는 개발자가 의도적으로 할당하기 위한 값이 아니라 자바스크립트 엔진이 변수를 초기화 할 때 사용하는 값이다.
따라서 변수를 <code class="language-plaintext highlighter-rouge">참조했을 때 undefined가 반환된다면</code> 참조한 변수가 선언 이후 값이 할당된적이 없는, 즉 <code class="language-plaintext highlighter-rouge">초기화 되지 않은 변수</code>라는 것을 간파할 수 있다.<br />
<code class="language-plaintext highlighter-rouge">변수에 값이 없다는 것을 명시</code>하고 싶을 때는 <code class="language-plaintext highlighter-rouge">null</code>을 할당한다.</p>

<h2 id="66-null-타입">6.6 null 타입</h2>
<p>null은 변수에 값이 없다는 것을 의도적으로 명시할 때 사용한다. 또는 함수가 유효한 값을 반환할 수 없는 경우 명시적으로 null을 반환하기도 한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">element</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">'</span><span class="s1">.myClass</span><span class="dl">'</span><span class="p">);</span>
  <span class="c1">// HTML문서에 myClass라는 클래스를 가진 요소가 없다면 null 반환</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">element</span><span class="p">)</span> <span class="c1">// null</span>
</code></pre></div></div>

<h2 id="67-심벌-타입">6.7 심벌 타입</h2>
<p>ES6에서 추가된 7번째 타입으로, 변경 불가능한 원시 타입의 값이다. 심벌은 symbol 함수를 호출해 생성한다.  이때 생성된 심벌값은 <code class="language-plaintext highlighter-rouge">외부에 노출되지 않으며, 다른 값과 절대 중복되지 않는 유일무이한 값</code>이다.</p>

<h2 id="68-객체-타입">6.8 객체 타입</h2>
<p>자바스크립트 타입은 크게 원시 타입과 객체타입으로 분류된다. 자바스크립트는 객체 기반의 언어이며, 자바스크립트를 이루고 있는 거의 모든 것이 객체다.</p>

<h2 id="69-데이터-타입의-필요성">6.9 데이터 타입의 필요성</h2>
<ul>
  <li><code class="language-plaintext highlighter-rouge">값을 저장</code>할 때 확보해야 하는 <code class="language-plaintext highlighter-rouge">메모리 공간의 크기를 결정</code>하기 위해<br />
변수에 할당되는 값의 데이터 타입에 따라 확보해야 할 메모리 공간의 크기가 결정된다.</li>
  <li><code class="language-plaintext highlighter-rouge">값을 참조</code>할 때 한 번에 읽어 들여야 할 <code class="language-plaintext highlighter-rouge">메모리 공간의 크기를 결정</code>하기 위해<br />
선두 메모리 셀 주소를 기준으로 값의 데이터 타입에 맞는 메모리 셀의 개수를 읽어들인다.</li>
  <li>메모리에서 읽어 들인 <code class="language-plaintext highlighter-rouge">2진수를 어떻게 해석할지 결정</code>하기 위해<br />
01000001 이라는 2진수를 숫자로 해석하면 65지만 문자열로 해석하면 ‘A’다</li>
</ul>

<h2 id="610-동적-타이핑">6.10 동적 타이핑</h2>
<p><code class="language-plaintext highlighter-rouge">자바스크립트의 변수는 선언이 아닌 할당에 의해 타입이 결정(타입 추론)된다.</code> 그리고 재할당에 의해 변수의 타입은 언제든지 동적으로 변할 수 있다. 이러한 특징을 동적 타이핑 이라 하며, 자바스크립트를 동적 타입 언어라 한다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">foo</span><span class="p">;</span>
  <span class="nx">foo</span> <span class="o">=</span> <span class="mi">123</span><span class="p">;</span> <span class="c1">// number</span>
  <span class="nx">foo</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">문자열</span><span class="dl">'</span><span class="p">;</span> <span class="c1">// string</span>
  <span class="nx">foo</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span> <span class="c1">// boolean</span>
  <span class="nx">foo</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span> <span class="c1">// object</span>
  <span class="nx">foo</span> <span class="o">=</span> <span class="nb">Symbol</span><span class="p">();</span> <span class="c1">// symbol</span>
  <span class="nx">foo</span> <span class="o">=</span> <span class="p">[];</span> <span class="c1">// object</span>
  <span class="nx">foo</span> <span class="o">=</span> <span class="p">{};</span> <span class="c1">// object</span>
  <span class="nx">foo</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{}</span> <span class="c1">// function</span>
</code></pre></div></div>
:ET