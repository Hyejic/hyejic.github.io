<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-05-18T00:07:51+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">공부해서 남주자</title><subtitle>공부한것을 기록하고 공유하는 블로그입니다.</subtitle><author><name>Hyejic</name></author><entry><title type="html">23장 실행 컨텍스트</title><link href="http://localhost:4000/js/modernJS23/" rel="alternate" type="text/html" title="23장 실행 컨텍스트" /><published>2022-05-17T00:00:00+09:00</published><updated>2022-05-17T00:00:00+09:00</updated><id>http://localhost:4000/js/modernJS23</id><content type="html" xml:base="http://localhost:4000/js/modernJS23/"><![CDATA[<p><br /></p>

<h1 id="23장-실행-컨텍스트">23장 실행 컨텍스트</h1>
<p>실행 컨텍스트는 자바스크립트의 동작 원리를 담고 있는 핵심 개념이다.</p>

<h2 id="231-소스코드의-타입">23.1 소스코드의 타입</h2>
<p>ECMAScript 사양은 소스코드를 4가지 타입으로 구분한다. 소스코드 타입에 따라 실행 컨텍스트를 생성하는 과정과 관리 내용이 다르다.</p>
<ul>
  <li>전역 코드<br />
전역 변수를 관리하기 위해 최상위 스코프인 전역 스코프를 생성해야한다. var 키워드로 선언된 전역 변수와 함수 선언문으로 정의된 전역 함수를 전역 객체의 프로퍼티와 메서드로 바인딩하고 참조하기 위해 전역 객체와 연결되어야 한다. 이를 위해 <code class="language-plaintext highlighter-rouge">전역 코드가 평가되면 전역 실행 컨텍스트가 생성</code>된다.</li>
  <li>함수 코드<br />
지역 스코프를 생성하고 지역변수, 매개변수, arguments 객체를 관리해야 한다. 그리고 생성한 지역 스코프를 전역 스코프에서 시작하는 스코프 체인의 일원으로 연결해야 한다. 이를 위해 <code class="language-plaintext highlighter-rouge">함수 코드가 평가되면 함수 실행 컨텍스트</code>가 생성된다.</li>
  <li>eval 코드 <br />
strict mode에서 자신만의 독자적인 스코프를 생성한다. 이를 위해 <code class="language-plaintext highlighter-rouge">eval 코드가 평가되면 eval 실행 컨텍스트가 생성</code>된다.</li>
  <li>모듈 코드<br />
모듈별로 독립적인 모듈 스코프를 생성한다. 이를 위해 <code class="language-plaintext highlighter-rouge">모듈 코드가 평가되면 모듈 실행 컨텍스트가 생성</code>된다.</li>
</ul>

<h2 id="232-소스코드의-평가와-실행">23.2 소스코드의 평가와 실행</h2>
<p>자바스크립트 엔진은 소스코드를 2개의 과정, 즉 <code class="language-plaintext highlighter-rouge">소스코드 평가</code>와 <code class="language-plaintext highlighter-rouge">소스코드의 실행</code> 과정으로 나누어 처리한다.</p>
<ul>
  <li>소스코드 평가<br />
실행 컨텍스트 생성하고 변수나 함수 식별자를 키로 실행 컨텍스트가 관리하는 스코프에 등록</li>
  <li>소스코드의 실행<br />
런타임 시작<br />
변수나 함수의 참조를 실행 컨텍스트가 관리하는 스코프에서 검색하여 취득<br />
변수 값의 변경 등 소스코드의 실행 결과는 다시 실행컨텍스트가 관리하는 스코프에 등록된다</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">x</span><span class="p">;</span>
  <span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</code></pre></div></div>
<p>위 예제 설명</p>
<ol>
  <li>소스코드 평가<br />
  변수 선언문 var x; 실행. 변수 식별자 x는 실행 컨텍스트가 관리하는 스코프에 등록되고 undefined로 초기화된다.</li>
  <li>소스코드 실행<br />
  변수 할당문 x = 1; 실행. x변수가 소스코드 평가 과정에서 선언문이 실행되어진 변수라면 값을 할당하고 할당 결과를 실행 컨텍스트에 등록하여 관리한다.</li>
</ol>

<h2 id="233-실행-컨텍스트의-역할">23.3 실행 컨텍스트의 역할</h2>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 전역 변수 선언</span>
  <span class="kd">const</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="kd">const</span> <span class="nx">y</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>

  <span class="c1">// 함수 정의</span>
  <span class="kd">function</span> <span class="nx">foo</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 지역 변수 선언</span>
    <span class="kd">const</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">y</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>

    <span class="c1">// 메서드 호출</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span> <span class="o">+</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span><span class="p">);</span> <span class="c1">// 130</span>
  <span class="p">}</span>

  <span class="c1">// 함수 호출</span>
  <span class="nx">foo</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>

  <span class="c1">// 메서드 호출</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span><span class="p">);</span> <span class="c1">// 3</span>
</code></pre></div></div>
<p>위 예제 설명</p>
<ol>
  <li>전역 코드 평가<br />
  전역 코드의 변수 선언문과 함수 선언문이 먼저 실행되고, 그 결과 생성된 전역 변수와 전역 함수가 실행 컨첵스트가 관리하는 전역 스코프에 등록된다.<br />
  var 키워드로 선언된 전역 변수와 함수 선언문으로 정의된 전역 함수는 전역 객체의 프로퍼티와 메서드가 된다.</li>
  <li>전역 코드 실행<br />
  런타임이 시작되어 전역 코드가 순차적으로 실행되기 시작한다.<br />
  이때 전역 변수에 값이 할당되고 함수가 호출. 함수가 호출되면 전역 코드의 실행을 중단하고 함수 내부로 진입한다.</li>
  <li>함수 코드 평가<br />
  함수 내부 문들을 실행하기에 앞서 함수 코드 평가 과정을 거치며 함수 코드를 실행하기 위한 준비를 한다.<br />
  이때 매개변수와 지역 변수 선언문이 먼저 실행되고, 그 결과 생성된 매개변수와 지역 변수가 실행 컨텍스트가 관하리는 지역 스코프에 등록된다. 또한 aguments 객체가 생성되어 지역 스코프에 등록되고 this 바인딩도 결정된다.</li>
  <li>함수 코드 실행<br />
  함수 코드 평가 후 함수 코드 런타임 시작. 이때 매개변수와 지역 변수에 값이 할당되고, console.log 메서드가 호출된다.<br />
  console을 스코프 체인을 통해 검색 -&gt; log 프로퍼티를 console 객체의 프로토타입 체인을 통해 검색 -&gt; console.log 메서드에 인수로 전달된 표현식 a + x + y가 평가 -&gt;  console.log 메서드의 실행이 종료되면 함수코드에서 빠져나가 함수 호출 이전으로 되돌아간다.<br />
  이처럼 코드가 실행되려면 다음과 같이 스코프, 식별자, 코드 실행 순서 등의 관리가 필요하다.<br />
  —<br />
  1. 선언에 의해 생성된 모든 식별자를 스코프를 구분하여 등록하고 상태 변화를 지속적으로 관리할 수 있어야 한다.<br />
  2. 스코프는 중첩 관계에 의해 스코프 체인을 형성해야 한다. 즉, 스코프 체인을 통해 상외 스코프로 이동하며 식별자를 검색할 수 있어야 한다.<br />
  3. 현재 실행 중인 코드의 실행 순서를 변결할 수 있어야 하며 다시 되돌아갈 수도 있어야 한다.<br />
  —</li>
</ol>

<p>이 모든 것을 관리하는 것이 바로 실행 컨텍스트다. 실행 컨텍스트는 소스코드를 실행하는 데 필요한 환경을 제공하고 코드의 실행 결과를 실제로 관리하는 영역이다.<br />
실행 컨텍스트는 식별자를 등록하고 관리하는 스코프와 코드 실행 순서 관리를 구현한 내부 매커니즘으로, 모든 코드는 실행 컨텍스트를 통해 실행되고 관리된다.
식별자와 스코프는 <code class="language-plaintext highlighter-rouge">실행 컨텍스트의 렉시컬 환경</code>으로 관리하고 코드 실행 순서는 <code class="language-plaintext highlighter-rouge">실행 컨텍스트 스택</code>으로 관리한다.</p>

<h2 id="234-실행-컨텍스트-스택">23.4 실행 컨텍스트 스택</h2>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

  <span class="kd">function</span> <span class="nx">foo</span> <span class="p">()</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">y</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>

    <span class="kd">function</span> <span class="nx">bar</span> <span class="p">()</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">z</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span> <span class="o">+</span> <span class="nx">z</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="nx">bar</span><span class="p">();</span>
  <span class="p">}</span>
  <span class="nx">foo</span><span class="p">();</span> <span class="c1">// 6</span>
</code></pre></div></div>
<p>위 예제는 전역 코드와 함수 코드로 이루어져있다. 전역 코드를 평가하여 전역 실행 컨텍스트를 생성하고 함수가 호출되면 함수 코드를 평가하여 함수 실행 컨텍스트를 생성한다. 이때 생성된 실행 컨텍스트는 스택 자료구조로 관히된다. 이를 실행 컨텍스트 스택이라고 부른다.<br />
(그림 23-5)</p>
<ol>
  <li>전역 코드의 평가와 실행<br />
  전역 변수 x와 전역 함수 foo는 전역 실행 컨텍스트에 등록된다. 이후 전역 코드가 실행되기 시작하여 전역 변수 x에 값이 할당되고 전역 함수 foo가 호출된다.</li>
  <li>foo 함수 코드의 평가와 실행<br />
  전역 함수 foo가 호출되면 코드의 제어권이 foo 함수 내부로 이동한다. foo 함수 내부의 함수 코드를 평가하여 foo 함수의 실행 컨텍스트를 생성하고 실행 컨텍스트 스택에 푸시한다.<br />
  foo 함수의 지역 변수 y와 중첩 함수 bar가 foo 함수 실행 컨텍스트에 등록된다.<br />
  이후 foo함수 코드 실행. 지역 변수 y에 값이 할당되고 중첩 함수 bar가 호출.</li>
  <li>bar 함수 코드의 평가와 실행<br />
  코드의 제어권이 bar 함수 내부로 이동한다. bar 함수 내부의 코드를 평가하여 bar 함수 실행 컨텍스트를 생성하고 실행 컨텍스트에 푸시한다.<br />
  bar 함수의 지역 변수 z가 bar 함수 실행 컨텍스트에 등록된다.<br />
  이후 bar 함수 코드 실행. 지역 변수 z에 값이 할당되고 console.log 메서드를 호출한 이후 bar 함수 종료.</li>
  <li>foo 함수 코드로 복귀<br />
  bar 함수 종료 후 foo 함수로 코드 제어권이 이동하고, 이때 bar 함수 실행 컨텍스트를 실행 컨텍스트에서 팝하여 제거.<br />
  foo 함수는 더이상 실행 할 코드가 없으므로 종료.</li>
  <li>전역 코드로 복귀<br />
  foo 함수가 종료되면 코드의 제어권은 다시 전역 코드로 이동. 이때 foo 함수 실행 컨텍스트를 실행 컨텍스트에서 팝하여 제거.</li>
</ol>

<p>이처럼 실행 컨텍스트 스택은 코드의 실행 순서를 관리한다. 실행 컨텍스트 스택의 최상위에 존재하는 실행 컨텍스트는 언제나 현재 실행중인 코드의 실행 컨텍스트다. 따라서 최상위에 존재하는 실행 컨텍스트를 실행 중인 실행 컨텍스트라 부른다.</p>

<h2 id="235-렉시컬-환경">23.5 렉시컬 환경</h2>
<p>렉시컬 환경은 실행 컨텍스트를 구성하는 컴포넌트다. 실행 컨텍스트 스택이 코드의 실행순서를 관리 했다면 렉시컬 환경은 스코프와 식별자를 관리한다.<br />
렉시컬 환경은 스코프를 구분하여 식별자를 등록하고 관리하는 저장소 역할을 하는 렉시컬 스코프의 실체다.
렉시컬 환경은 다음과 같이 두개의 컴포넌트로 구성된다.<br />
(그림 23-8)</p>
<ol>
  <li>환경 레코드(Enviroment Record)<br />
  스코프에 포함된 식별자를 등록하고 등록된 식별자에 바인딩된 값을 관리하는 저장고. 환경 레코드는 소스코드의 타입에 따라 솬리하는 내용에 차이가 있다.</li>
  <li>외부 렉시컬 환경에 대한 참조(Outer Lexical Enviroment Reference)<br />
  외부 렉시컬 환경에 대한 참조는 상위 스코프를 가리킨다. 해당 실행 컨텍스트를 생성한 소스코드를 포함하는 상위 코드의 렉시컬 환경을 말한다. 외부 렉시컬 환경에 대한 참조를 통해 단방향 링크드 리스트인 스코프 체인을 구현한다.</li>
</ol>

<h2 id="236-실행-컨텍스트의-생성과-식별자-검색-과정">23.6 실행 컨텍스트의 생성과 식별자 검색 과정</h2>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="kd">const</span> <span class="nx">y</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>

  <span class="kd">function</span> <span class="nx">foo</span> <span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">y</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
    
    <span class="kd">function</span> <span class="nx">bar</span> <span class="p">(</span><span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">z</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span> <span class="o">+</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span> <span class="o">+</span> <span class="nx">z</span><span class="p">);</span> 
    <span class="p">}</span>
    <span class="nx">bar</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="nx">foo</span><span class="p">(</span><span class="mi">20</span><span class="p">);</span> <span class="c1">// 42</span>
</code></pre></div></div>
<p>예제의 실행 컨텍스트의 생성과 식별자 검색 과정을 알아보자</p>

<h3 id="2361-전역-객체-생성">23.6.1 전역 객체 생성</h3>
<p>전역 객체는 전역 코드가 평가되기 이전에 생성된다.<br />
전역 객체에는 빌트인 전역 프로퍼티와 빌트인 전역 함수, 그리고 표준 빌트인 객체가 추가되며 동작 환경에 따라 클라이언트 사이드 Web API또는 특정 환경을 위한 호스트 객체를 포함한다.
전역 객체도 Object.prototype을 상속받는다. 전역 객체도 프로토타입 체인의 일원이다.</p>

<h3 id="2362-전역-코드-평가">23.6.2 전역 코드 평가</h3>

<p>전역 코드 평가 순서</p>
<ol>
  <li>전역 실행 컨텍스트 생성</li>
  <li>전역 렉시컬 환경 생성<br />
2.1 전역 환경 레코드 생성<br />
      2.1.1 객체 환경 레코드 생성<br />
      2.1.2 선언적 환경 레코드 생성<br />
2.2 this 바인딩<br />
2.3 외부 렉시컬 환경에 대한 참조 결정</li>
</ol>

<h4 id="전역-실행-컨텍스트-생성">전역 실행 컨텍스트 생성</h4>
<p>먼저 비어있는 실행 컨텍스트를 생성하여 실행 컨텍스트 스택에 푸시한다. 이떄 전역 실행 컨텍스트는 실행 중인 실행 컨텍스트가 된다.</p>

<h4 id="전역-렉시컬-환경-생성">전역 렉시컬 환경 생성</h4>
<p>전역 렉시컬 환경을 생성하고 전역 실행 컨텍스트에 바인딩한다. 렉시컬 환경은 환경 레코드와 외부 렉시컬 환경에 대한 참조로 구성된다.</p>

<h4 id="전역-환경-레코드-생성">전역 환경 레코드 생성</h4>
<p>전역 환경 레코드는 전역 변수를 관리하는 전역 스코프, 전역 객체의 빌트인 전역 프로퍼티와 빌트인 전역 함수, 표준 빌트인 객체를 제공한다.<br />
기존의 var 키워드로 선언한 전역 변수와 let, const 키워드로 선언한 전역 변수를 구분하여 관리하기 위해 전역 스코프 역할을 하는 전역 환경 레코드는 객체 환경 레코드와 선언적 환경 레코드로 구성되어 있다.</p>
<ul>
  <li>객체 환경 레코드 - var 전역변수, 함수 선언문으로 정의한 전역 함수, 빌트인 전역 프로퍼티, 빌트인 전역 함수, 표준 빌트인 객체 관리</li>
  <li>선언적 환경 레코드 - let, const 전역 변수 관리</li>
</ul>

<h4 id="객체-환경-레코드-생성">객체 환경 레코드 생성</h4>
<p>객체 환경 레코드는 BindingObject라고 부르는 객체와 연결된다. BindingObject는 전역 객체 생성에서 생성된 전역 객체다.<br />
전역 코드 평가 과정에서 var 키워드로 선언한 전역 변수와 함수 선언문으로 정의된 전역 함수는 전역 환경 레코드의 객체 환경 레코드에 연결된 BindingObject를 통해 전역 객체의 프로퍼티와 메서드가 된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1">// 전역 변수 x와 전역 함수 foo는 객체 환경 레코드를 통해 </span>
    <span class="c1">// 객체 환경 레코드의 BindingObject에 바인딩되어 있는 전역 객체의 프로퍼티와 메서드가 된다. </span>
    <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">y</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>

    <span class="kd">function</span> <span class="nx">foo</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">...</span>
</code></pre></div></div>
<p>var 키워드로 선언한 변수는 선언단계와 초기화 단계가 동시에 진행된다. 따라서 var 키워드로 선언한 변수는 코드 실행 단계에서 변수 선언문 이전에도 참조할 수 있다. 단, 변수 선언문 이전에 참조한 변수의 값은 언제나 undefined다.<br />
  함수 선언문으로 정의한 함수는 함수 선언문 이전에 호출할 수 있다.</p>

<h4 id="선언적-환경-레코드-생성">선언적 환경 레코드 생성</h4>
<p>let, const 키워드로 선언한 전역 변수는 선언적 환경 레코드에 등록되고 관리된다.  let, const 키워드로 선언한 전역 변수는 전역 걕체의 프로퍼티가 되지 않고 개념적인 블록 내에 존재하게 된다. 여기서 개념적인 블록이 바로 전역 환경 레코드의 선언적 환경 레코드다.<br />
window.y와 같이 전역 객체의 프로퍼티로서 참조할 수 없다. const 키워드로 선언한 변수는 “선언 단계”와 “초기화 단계”가 분리되어 진행 되기 때문에 일시적 사각지대에 빠지게 된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kd">let</span> <span class="nx">foo</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// 전역 변수</span>

    <span class="p">{</span>
      <span class="c1">// let const 키워드로 선언한 변수도 호이스팅이 발생하기 때문에 참조 에러가 발생한다.</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span> <span class="c1">// ReferenceError: Cannot access 'foo' before initialization (일시적 사각지대)</span>
      <span class="kd">let</span> <span class="nx">foo</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="c1">// 지역 변수</span>
    <span class="p">}</span>
</code></pre></div></div>

<h4 id="this-바인딩">this 바인딩</h4>
<p>전역 환경 레코드의 [[GlobalThisValue]] 내부 슬롯에 this가 바인딩 된다. 전역 코드에서 this를 참조하면 전역 환경 레코드의 [[GlobalThisValue]] 내부 슬록에 바인딩되어 있는 객체가 반환된다. this 바인딩은 전역 환경 레코드와 함수 환경 레코드에만 존재한다.</p>

<h4 id="외부-렉시컬-환경에-대한-참조-결정">외부 렉시컬 환경에 대한 참조 결정</h4>
<p>외부 렉시컬 환경에 대한 참조는 현재 평가 중인 소스코드를 포함하는 외부 소스코드의 렉시컬 환경, 즉 상위 스코프를 가리킨다.<br />
전역 코드를 포함하는 소스코드는 없으므로 전역 렉시컬 환경의 외부 렉시컬 환경에 대한 참조에 null이 할당된다. 이는 전역 렉시컬 환경이 스코프 체인의 종점에 존재함을 의미한다.<br />
(그림 23-15)</p>

<h3 id="2363-전역-코드-실행">23.6.3 전역 코드 실행</h3>
<p>전역 코드가 순차적으로 실행. 변수 할당문이 실행되어 변수 x, y에 값이 할당된다. foo함수도 호출.<br />
동일한 이름의 식별자가 다른 스코프에 여러 개 존재할 수도 있다. 따라서 어느 스코프의 실별자를 참조하면 되는지 결정할 필요가 있다. 이를 식별자 결정이라 한다.<br />
식별자 결정을 위해 식별자를 검색할 때는 실행 중인 실행 컨텍스트에서 식별자를 검색한다. 만약 실행중이 실행 컨텍스트의 렉시컬 환경에서 식별자를 검색할 수 없으면 상위 스코프로 이동하여 식별자를 검색한다.<br />
실행 컨텍스트는 소스코드를 실행하기 위해 필요한 환경을 제공하고 코드의 실행 결과를 실제로 관리하는 영역이다.</p>

<h3 id="2364-foo-함수-코드-평가">23.6.4 foo 함수 코드 평가</h3>
<p>foo 함수가 호출되면 전역 코드의 실행을 일시중단하고 foo 함수 내부로 코드의 제어권이 이동한다. 그리고 코드를 평가한다.</p>
<ol>
  <li>함수 실행 컨텍스트 생성</li>
  <li>함수 렉시컬 환경 생성<br />
2.1 함수 환경 레코드 생성<br />
2.2 this 바인딩<br />
2.3 외부 렉시컬 환경에 대한 참조 결정</li>
</ol>

<p>(그림 23-17)</p>

<h4 id="함수-실행-컨텍스트-생성">함수 실행 컨텍스트 생성</h4>
<p>foo 함수 실행 컨텍스트 생성. 실행 컨텍스트는 함수 렉시컬 환경이 완성된 다음 실행 컨텍스트 스택에 푸시. 이때 foo 함수 실행 컨텍스트는 실행 컨텍스트 스택의 최상위, 즉 실행 중인 실행 컨텍스트가 된다.</p>

<h4 id="함수-렉시컬-환경-생성">함수 렉시컬 환경 생성</h4>
<p>foo 함수 렉시컬 환경을 생성하고 foo 함수 실행 컨텍스트에 바인딩.</p>

<h4 id="함수-환경-레코드-생성">함수 환경 레코드 생성</h4>
<p>함수 렉시컬 환경을 구성하는 컴포넌트 중 하나인 함수 환결 레코드는 매개변수, arguments 객체, 함수 내부에서 선언한 지역 변수와 중첩 함수를 등록하고 관리한다.</p>

<h4 id="this-바인딩-1">this 바인딩</h4>
<p>함수 환경 레코드의 [[ThisValue]] 내부 슬롯에 this가 바인딩.<br />
foo 함수는 일반함수로 호출되어 this는 전역 객체를 가리킨다. 따라서 함수 환경 레코드의 [[ThisValue]] 내부 슬롯에는 전역 객체가 바인딩돤다.</p>

<h4 id="외부-렉시컬-환경에-대한-참조-결정-1">외부 렉시컬 환경에 대한 참조 결정</h4>
<p>foo 함수는 전역 코드에 정의된 전역 함수다. 따라서 전역 코드 평가 시점에 평가된다. 이 시점의 실행중인 실행 컨텍스트는 전역 실행 컨텍스트고 외부 렉시컬 환경에 대한 참조에는 전역 렉시컬 환경의 참조가 할당된다.<br />
자바스크립트 엔진은 함수 정의를 평가하여 함수 객체를 생성할 때 함수의 상위 스코프를 함수 객체의 내부 슬롯 [[Environment]]에 저장한다. 즉, 함수 객체의 내부 슬롯 [[Environment]]가 바로 렉시컬 스코프를 구현하는 매커니즘이다.</p>

<h3 id="2365-foo-함수-코드-실행">23.6.5 foo 함수 코드 실행</h3>
<p>이제 런타인이 시작되어 foo 함수의 소스코드가 실행된다. 매개변수에 인수가 할당되고, 변수 할당문이 실행되어 지역 변수 x, y에 값이 할당된다. 그리고 bar 함수가 호출된다. 이떄 식별자 결정을 위해 실행 중인 실행 컨텍스트의 렉시컬 환경에서 식별자를 검색하기 시작한다. 만약 실행 중인 실행 컨텍스트의 렉시컬 환경에서 식별자를 검색할 수 없으면 외부 렉시컬 환경에 대한 참조가 가리키는 렉시컬 환경으로 이동하여 검색.</p>

<h3 id="2366-bar-함수-코드-평가">23.6.6 bar 함수 코드 평가</h3>
<p>bar 함수가 호출되면 bar 함수 내부로 코드의 제어권이 이동되고 bar 함수의 코드를 평가한다. 생성된 bar 함수 실행 컨텍스트와 렉시컬 환경은 다음과 같다.<br />
(그림 23-23)</p>

<h3 id="2367-bar-함수-코드-실행">23.6.7 bar 함수 코드 실행</h3>
<p>런타임 시작 -&gt; bar 함수의 소스코드 실행 -&gt; 매개변수에 인수 할당 -&gt; 변수 할당문이 실행되어 z에 값 저장 -&gt; console.log 실행</p>
<ol>
  <li>
    <p>console 식별자 검색<br />
console 식별자를 스코프 체인에서 검색한다. console 식별자는 객체 환경 레코드의 BindingObject를 통해 전역 객쳉에서 찾을 수 있다.
따라서 console 식별자를 찾아 스코프 체인 상의 상위 스코프, 즉 외부 렉시컬 환경에 대한 참고가 가리키는 상위 렉시컬 환경으로 이동하여 검색하기를 반복하고 전역 렉시컬 환경에 도달했을 때 마침내 검색할 수 있다.</p>
  </li>
  <li>
    <p>log 메서드 검색<br />
console 객체의 프로토타입 체인을 통해 메서드를 검색한다. log 메서드는 상속된 프로퍼티가 아니라 console 객체가 직접 소유하는 프로퍼티다.</p>
  </li>
  <li>
    <p>표현식 a + b + x + y + z의 평가<br />
a, b, x, y, z 식별자를 검색한다. 식별자는 스코프체인, 즉 현재 실행중인 실행 컨텍스트의 렉시컬 환경에서 시작하여 외부 렉시컬환경에 대한 참조로 이어지는 렉시컬 환경의 연속에서 검색한다.</p>
  </li>
  <li>
    <p>console.log 메서드 호출
표현식 a + b + x + y + z의 평가되어 생성한 값 42를 console.log 메서드에 전달하여 호출한다.</p>
  </li>
</ol>

<h3 id="2368-bar-함수-코드-실행-종료">23.6.8 bar 함수 코드 실행 종료</h3>
<p>console.log 메서드가 호출되고 종료하면 더는 실행할 코드가 없으므로 bar 함수 코드의 실행이 종료되고 bar 함수의 실행 컨텍스트가 팝되어 제거된다. 실행 컨텍스트 스택에서 bar 함수 실행 컨텍스트가 제거 되었다고해서 렉시컬 환경까지 즉시 소멸하는 것은 아니다. 독립적인 객체이기 때문에 누군가에 의해 참조되지 않을 때 비로소 가비지 컬렉터에 의해 메모리 공간의 확보가 해제되어 소멸된다.</p>

<h3 id="2369-foo-함수-코드-실행-종료">23.6.9 foo 함수 코드 실행 종료</h3>
<p>foo 함수 코드의 실행이 종료되면 이때 실행 컨텍스트 스택에서 foo 함수의 실행 컨텍스트가 팝되어 제거되고 전역 실행 컨텍스트가 실행중인 컨텍스트가 된다.</p>

<h3 id="23610-전역-코드-실행-종료">23.6.10 전역 코드 실행 종료</h3>
<p>foo 함수가 종료되면 더이상 실행할 전역 코드가 없으므로 코드의 실행이 종료되고 전역 실행 컨텍스트도 팝되어 실행 컨텍스트에는 아무것도 남아있지 않게 된다.</p>

<h2 id="237-실행-컨텍스트와-블록-레벨-스코프">23.7 실행 컨텍스트와 블록 레벨 스코프</h2>
<p>let, const 키워드로 선언한 변수는 모든 코드 블록을 지역 스코프로 인정하는 블록 레벨 스코프를 따른다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">let</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

  <span class="k">if</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span> <span class="c1">// 10</span>
  <span class="p">}</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span> <span class="c1">// 1</span>
</code></pre></div></div>
<p>if 문의 코드블록이 실행되면 if문의 코드 블로을 위한 블록 레벨 스코프를 생성해야 한다. 이를 위해 선언적 환경 레코드를 갖는 렉시컬 환경을 새롭게 생성하여 기존의 전역 렉시컬 환경을 교체한다.<br />
if 문 코드 불록의 실행이 종료되면 if 문의 코드 블록이 실행되기 이전의 렉시컬 환경으로 되돌린다. 이는 if문 뿐만 아니라 보든 블록문에 적용된다.<br />
(그림 23-28/29)<br />
for 문은 코드 블록이 반복해서 실행될 때마다 코드 블록을 위한 새로운 렉시컬 환경을 생성한다.</p>]]></content><author><name>Hyejic</name></author><category term="js" /><category term="javascript" /><summary type="html"><![CDATA[모던 자바스크립트 Deep Dive 23장 실행 컨텍스트 내용 정리]]></summary></entry><entry><title type="html">22장 this</title><link href="http://localhost:4000/js/modernJS22/" rel="alternate" type="text/html" title="22장 this" /><published>2022-05-17T00:00:00+09:00</published><updated>2022-05-17T00:00:00+09:00</updated><id>http://localhost:4000/js/modernJS22</id><content type="html" xml:base="http://localhost:4000/js/modernJS22/"><![CDATA[<p><br /></p>

<h1 id="22장-this">22장 this</h1>

<h2 id="221-this-키워드">22.1 this 키워드</h2>
<p>동작을 나타내는 메서드는 자신이 속한 객체의 상태, 즉 프로퍼티를 참조하고 변경할 수 있어야 한다. 이떄 메서드가 자신이 속한 객체의 프로퍼티를 참조하려면 먼저 자신이 속한 객체를 가리키는 식별자를 참조할 수 있어야 한다.<br />
자신이 속한 객체 또는 자신이 생성할 인스턴스를 카리키는 특수한 식별자가 필요하다. 이를 위해 자바스크립트는 this라는 특수한 식별자를 제공한다.
<code class="language-plaintext highlighter-rouge">this는 자신이 속한 객체 또는 자신이 생성한 인스턴스를 가리키는 자기 참조 변수다. this를 통해 자신이 속한 객체 또는 자신이 생성할 인스턴스의 프로퍼티나 메서드를 참조할 수 있다.</code><br />
this 바인딩은 함수 호출 방식에 의해 동적으로 결정된다.</p>
<blockquote>
  <p><code class="language-plaintext highlighter-rouge">this 바인딩</code> 바인딩이한 식별자와 값을 연결하는 과정을 의미한다. 예를 들어, 변수 선언은 변수 이름과 확보된 메모리 공간의 주소를 바인딩하는 것이다. this 바인딩은 this와 this가 가리킬 객체를 바인딩하는 것이다.</p>
</blockquote>

<h3 id="객체-리터럴-this">객체 리터럴 this</h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">circle</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">radius</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span>
    <span class="nx">getDiameter</span><span class="p">()</span> <span class="p">{</span>
      <span class="c1">// this는 메서드를 호출한 객체를 가리킨다.</span>
      <span class="k">return</span> <span class="mi">2</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">};</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">circle</span><span class="p">.</span><span class="nx">getDiameter</span><span class="p">());</span> <span class="c1">// 10</span>
</code></pre></div></div>
<p>위 예제처럼 객체 리터럴 내부에서의 this는 메서드를 호출한 객체, 즉 circle을 가리킨다.</p>

<h3 id="생성자함수-this">생성자함수 this</h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">Circle</span><span class="p">(</span><span class="nx">radius</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// this는 생성자 함수가 생성할 인스턴스를 가리킨다.</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">radius</span> <span class="o">=</span> <span class="nx">radius</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="nx">Circle</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getDiameter</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="mi">2</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="p">;</span>
  <span class="p">};</span>

  <span class="c1">// 인스턴스 생성</span>
  <span class="kd">const</span> <span class="nx">circle</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Circle</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">circle</span><span class="p">.</span><span class="nx">getDiameter</span><span class="p">());</span> <span class="c1">// 10</span>
</code></pre></div></div>
<p>위 예제처럼 생성자 함수 내부에서의 this는 함수가 생성할 인스턴스를 가리킨다.</p>

<h3 id="자바스크립트에서의-this">자바스크립트에서의 this</h3>
<p>함수가 호출되는 방식에 따라 this에 바인딩될 값, 즉 this 바인딩이 동적으로 결정된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// this는 어디서든지 참조 가능하다.</span>
  <span class="c1">// 전역에서 this는 전역 객체 window를 가리킨다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">);</span> <span class="c1">// window</span>

  <span class="kd">function</span> <span class="nx">square</span><span class="p">(</span><span class="nx">number</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 일반 함수 내부에서 this는 전역 객체 window를 가리킨다.</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">);</span> <span class="c1">// window</span>
    <span class="k">return</span> <span class="nx">number</span> <span class="o">*</span> <span class="nx">number</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="nx">square</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>

  <span class="kd">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Lee</span><span class="dl">'</span><span class="p">,</span>
    <span class="nx">getName</span><span class="p">()</span> <span class="p">{</span>
      <span class="c1">// 메서드 내부에서 this는 메서드를 호출한 객체를 가리킨다.</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">);</span> <span class="c1">// {name: 'Lee', getName: f}</span>
      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">getName</span><span class="p">());</span> <span class="c1">// Lee</span>
  
  <span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
    <span class="c1">// 생성자 함수 내부에서 this는 생성자 함수가 생성할 인스턴스를 가리킨다.</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">);</span> <span class="c1">// Person {name: "Lee"}</span>
  <span class="p">}</span>

  <span class="kd">const</span> <span class="nx">me</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="dl">'</span><span class="s1">Lee</span><span class="dl">'</span><span class="p">);</span>
</code></pre></div></div>

<h2 id="222-함수-호출-방식과-this-바인딩">22.2 함수 호출 방식과 this 바인딩</h2>
<p>this 바인딩은 함수 호출 방식, 즉 함수가 어떻게 호출되었는지에 따라 동적으로 결정된다.</p>

<h3 id="2221-일반-함수-호출">22.2.1 일반 함수 호출</h3>
<p>기본적으로 this에는 전역 객체가 바인딩된다.<br />
일반 함수로 호출하면 함수 내부의 this에는 전역 객체가 바인딩된다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`foo is this: </span><span class="p">${</span><span class="k">this</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span> <span class="c1">// window</span>
    <span class="kd">function</span> <span class="nx">bar</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`bar is this: </span><span class="p">${</span><span class="k">this</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span> <span class="c1">// window</span>
    <span class="p">}</span>
    <span class="nx">bar</span><span class="p">();</span>
  <span class="p">}</span>
  <span class="nx">foo</span><span class="p">();</span>
</code></pre></div></div>
<p>어떠한 함수라도 모든 함수(중첩 함수, 콜백 함수)는 일반 함수로 호출되면 내부의 this에는 전역 객체가 바인딩된다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">value</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

  <span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">value</span><span class="p">:</span> <span class="mi">100</span><span class="p">,</span>
    <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`foo is this: </span><span class="p">${</span><span class="k">this</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span> <span class="c1">// {value: 100. foo: f}</span>
      <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`callback is this: </span><span class="p">${</span><span class="k">this</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span> <span class="c1">// window</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`callback is this.value: </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span> <span class="c1">// 1</span>
      <span class="p">},</span> <span class="mi">100</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">};</span>

  <span class="nx">obj</span><span class="p">.</span><span class="nx">foo</span><span class="p">();</span>
</code></pre></div></div>

<h4 id="매서드-내부의-중첩-함수나-콜백-함수의-this-바인딩을-메서드의-this-바인딩과-일치하는-방법">매서드 내부의 중첩 함수나 콜백 함수의 this 바인딩을 메서드의 this 바인딩과 일치하는 방법</h4>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">value</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

  <span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">value</span><span class="p">:</span> <span class="mi">100</span><span class="p">,</span>
    <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
      <span class="c1">// this 바인딩(obj)을 변수 that에 할당한다.</span>
      <span class="kd">const</span> <span class="nx">that</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
      <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">that</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span> <span class="c1">// 100</span>
      <span class="p">},</span> <span class="mi">100</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">};</span>

  <span class="nx">obj</span><span class="p">.</span><span class="nx">foo</span><span class="p">();</span>
</code></pre></div></div>
<p>위 예제와 같은 방법 이외에도 this를 명시적으로 바인딩할 수 있는 Function.prototype.apply, Function.prototype.call, Function.prototype.bind 메서드를 제공한다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">value</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

  <span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">value</span><span class="p">:</span> <span class="mi">100</span><span class="p">,</span>
    <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
      <span class="c1">// 콜백 함수에 명시적으로 this를 바인딩</span>
      <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span> <span class="c1">// 100</span>
      <span class="p">}.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">),</span> <span class="mi">100</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">};</span>

  <span class="nx">obj</span><span class="p">.</span><span class="nx">foo</span><span class="p">();</span>
</code></pre></div></div>
<p>또는 화살표 함수를 사용해서 this 바인딩을 할 수 있다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">value</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

  <span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">value</span><span class="p">:</span> <span class="mi">100</span><span class="p">,</span>
    <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
      <span class="c1">// 화삻표 함수 내부의 this는 상위 스코프의 this를 가리킨다.</span>
      <span class="nx">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span> <span class="c1">// 100</span>
      <span class="p">},</span> <span class="mi">100</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">};</span>

  <span class="nx">obj</span><span class="p">.</span><span class="nx">foo</span><span class="p">();</span>
</code></pre></div></div>

<h3 id="2222-메서드-호출">22.2.2 메서드 호출</h3>
<p>매서드 내부의 this에는 메서드를 호출한 객체, 즉 메서드를 호출할 때 메서드 이름 앞의 마침표(.) 연산자 앞에 기술한 객체가 바인딩 된다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Lee</span><span class="dl">'</span><span class="p">,</span>
    <span class="nx">getName</span><span class="p">()</span> <span class="p">{</span>
      <span class="c1">// 메서드 내부의 this는 메서드를 호출한 객체에 바인딩된다.</span>
      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">};</span>

  <span class="c1">// 메서드 getName을 호출한 객체는 person이다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">getName</span><span class="p">());</span> <span class="c1">// Lee</span>
</code></pre></div></div>
<p>위 예제의 person객체의 getName 프로퍼티가 가리키는 함수 객체는 person 객체에 포함된 것이 아니라 <code class="language-plaintext highlighter-rouge">독립적으로 존재하는 별도의 객체</code>다. getName 프로퍼티가 함수 객체를 가리키고 있을 뿐이다.<br />
(그림 22-1)<br />
프로토타입 메서드 내부에서 사용된 this도 일반 메서드와 마찬가지로 해당 메서드를 호출한 객체에 바인딩된다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getName</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
  <span class="p">};</span>

  <span class="kd">const</span> <span class="nx">me</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="dl">'</span><span class="s1">Lee</span><span class="dl">'</span><span class="p">);</span>

  <span class="c1">// getName 메서드를 호출한 객체는 me다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">me</span><span class="p">.</span><span class="nx">getName</span><span class="p">());</span> <span class="c1">// Lee  1</span>

  <span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Kim</span><span class="dl">'</span><span class="p">;</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getName</span><span class="p">());</span> <span class="c1">// Kim   2</span>
</code></pre></div></div>
<p>1의 경우 getName 메서드 내부의 this는 me를 가리키며 this.name은 ‘Lee’다.
2의 경우 Person.prototype도 객체이므로 직접 메서드 호출이 가능하다. getName 메서드 내부의 this는 Person.prototype을 가리키며 this.name은 ‘Kim’이다.<br />
(그림 22-3)</p>

<h3 id="2223-생성자-함수-호출">22.2.3 생성자 함수 호출</h3>
<p>생성자 함수 내부의 this에는 생성자 함수가 생성할 인스턴스가 바인딩된다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">Circle</span><span class="p">(</span><span class="nx">radius</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">radius</span> <span class="o">=</span> <span class="nx">radius</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">getDiameter</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="mi">2</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="p">;</span>
    <span class="p">};</span>
  <span class="p">}</span>

  <span class="kd">const</span> <span class="nx">circle1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Circle</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">circle2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Circle</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
  
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">circle1</span><span class="p">.</span><span class="nx">getDiameter</span><span class="p">());</span> <span class="c1">// 10</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">circle2</span><span class="p">.</span><span class="nx">getDiameter</span><span class="p">());</span> <span class="c1">// 20</span>

  <span class="c1">// new 연산자 없이 호출하면 생성자 함수로 동작하지 않는다. 일반 함수 호출</span>
  <span class="kd">const</span> <span class="nx">circle3</span> <span class="o">=</span> <span class="nx">Circle</span><span class="p">(</span><span class="mi">15</span><span class="p">);</span>

  <span class="c1">// 일반 함수로 호출된 Circle에는 반환문이 없으므로 암묵적으로 undefined가 반환</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">circle3</span><span class="p">);</span> <span class="c1">// undefined</span>

  <span class="c1">// 일반 함수로 호출된 Circle 내부의 this는 전역 객체를 가리킨다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">radius</span><span class="p">);</span> <span class="c1">// 15</span>
</code></pre></div></div>

<h3 id="2224-functionprototypeapplycallbind-메서드에-의한-간접-호출">22.2.4 Function.prototype.apply/call/bind 메서드에 의한 간접 호출</h3>
<p>apply, call, bind 메서드는 Function.prototype의 메서드다. 즉, 이들 메서드는 모든 함수가 상속받아 사용할 수 있다.</p>

<h4 id="functionprototypeapplyfunctionprototypecall">Function.prototype.apply/Function.prototype.call</h4>
<p>this로 사용할 객체과 인수 리스트를 인수로 전달받아 함수를 호출한다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="cm">/**
   * apply 사용법
   * 주어진 this 바인딩과 인수 리스트 배열을 사용하여 함수를 호출한다.
   * @param thisArg - this로 사용할 객체
   * @param argsArray - 함수에게 전달할 인수 리스트의 배열 또는 유사 배열 객체
   * @returns 호출된 함수의 반환값
  */</span>
  <span class="c1">// Function.prototype.apply(thisArg[, argsArray])</span>
  <span class="nb">Function</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">thisArg</span><span class="p">,</span> <span class="p">[</span><span class="nx">argsArray</span><span class="p">])</span>
  
  <span class="cm">/**
   * call 사용법
   * 주어진 this 바인딩과 ,로 구분된 인수 리스트를 사용하여 함수를 호출한다.
   * @param thisArg - this로 사용할 객체
   * @param arg1, arg2, ... - 함수에게 전달할 인수 리스트
   * @returns 호출된 함수의 반환값
  */</span>
  <span class="c1">// Function.prototype.call(thisArg[, arg1[, arg2[, ...]]])</span>
  <span class="nb">Function</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">thisArg</span><span class="p">,</span> <span class="nx">arg1</span><span class="p">,</span> <span class="nx">arg2</span><span class="p">,</span> <span class="p">...)</span>
</code></pre></div></div>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">getThisBinding</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arguments</span><span class="p">);</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="c1">// this로 사용할 객체</span>
  <span class="kd">const</span> <span class="nx">thisArg</span> <span class="o">=</span> <span class="p">{</span> <span class="na">a</span><span class="p">:</span> <span class="mi">1</span> <span class="p">};</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">getThisBinding</span><span class="p">());</span> <span class="c1">// window</span>

  <span class="c1">// getThisBinding 함수를 호출하면서 인수로 전달한 객체를 getThisBinding 함수의 this에 바인딩한다.</span>
  <span class="c1">// apply 메서드는 호출할 함수의 인수를 배열로 묶어 전달한다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">getThisBinding</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">thisArg</span><span class="p">,[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]));</span> 
  <span class="c1">// Arguments(3) [1, 2, 3, callee: ƒ, Symbol(Symbol.iterator): ƒ]</span>
  <span class="c1">//{ a: 1 }</span>

  <span class="c1">// call 메서드는 호출할 함수의 인수를 쉼표로 구분한 리스트 형식으로 전달한다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">getThisBinding</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">thisArg</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">));</span> 
  <span class="c1">// Arguments(3) [1, 2, 3, callee: ƒ, Symbol(Symbol.iterator): ƒ]</span>
  <span class="c1">//{ a: 1 }</span>
</code></pre></div></div>
<p>apply와 call 메서드의 본질적인 기능은 함수를 호출하는 것이다. 인수를 전달하는 방식만 다를 뿐 동일하게 동작한다.</p>

<h4 id="functionprototypebind">Function.prototype.bind</h4>
<p>apply, call 메서드와 달리 함수를 호출하지 않는다. 다만 첫 번째 인수로 전달한 값으로 this 바인딩이 교체된 함수를 새롭게 생성해 반환한다.
bind 메서드는 메서드의 this와 메서드 내부의 중첩 함수 또는 콜백 함수의 this가 불일치하는 문제를 해결하기 위해 유용하게 사용된다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">getThisBinding</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="c1">// this로 사용할 객체</span>
  <span class="kd">const</span> <span class="nx">thisArg</span> <span class="o">=</span> <span class="p">{</span> <span class="na">a</span><span class="p">:</span> <span class="mi">1</span> <span class="p">};</span>

  <span class="c1">// bind 메서드는 첫 번쨰 인수로 전달한 thisArg로 this 바인딩이 교체된</span>
  <span class="c1">// getThisBinding 함수를 새롭게 생성해 반환한다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">getThisBinding</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">thisArg</span><span class="p">));</span> <span class="c1">// getThisBinding</span>
  <span class="c1">// bind 메서드는 함수를 호출하지는 않으므로 명시적으로 호출해야 한다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">getThisBinding</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">thisArg</span><span class="p">()));</span> <span class="c1">//{ a: 1 }</span>

  <span class="c1">// 콜백 함수의 this가 불일치하는 문제를 해결 </span>
  <span class="kd">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span><span class="p">,</span>
    <span class="nx">foo</span><span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// bind 메서드로 callback 함수 내부의 this 바인딩을 전달</span>
      <span class="nx">setTimeout</span><span class="p">(</span><span class="nx">callback</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">),</span> <span class="mi">100</span><span class="p">);</span> 
    <span class="p">}</span>
  <span class="p">}</span>

<span class="nx">person</span><span class="p">.</span><span class="nx">foo</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`my name is </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="s2">.`</span><span class="p">);</span> <span class="c1">// my name is Choi.</span>
<span class="p">});</span>
</code></pre></div></div>

<h2 id="this-바인딩-동적-결정-정리">this 바인딩 동적 결정 정리</h2>
<p>함수 호출 방식 | this 바인딩
–|–
일반 함수 호출 | 전역 객체
메서드 호출 | 메서드를 호출한 객체
생성자 함수 호출 | 생성자 함수가 생성할 인스턴스
Function.prototype.apply/call/bind 메서드에 의한 간접 호출 | Function.prototype.apply/call/bind 메서드의 첫번째 인수로 전달한 객체</p>]]></content><author><name>Hyejic</name></author><category term="js" /><category term="javascript" /><summary type="html"><![CDATA[모던 자바스크립트 Deep Dive 22장 this 내용 정리]]></summary></entry><entry><title type="html">19장 프로토 타입</title><link href="http://localhost:4000/js/modernJS19/" rel="alternate" type="text/html" title="19장 프로토 타입" /><published>2022-05-09T00:00:00+09:00</published><updated>2022-05-09T00:00:00+09:00</updated><id>http://localhost:4000/js/modernJS19</id><content type="html" xml:base="http://localhost:4000/js/modernJS19/"><![CDATA[<p><br /></p>

<h1 id="19장-프로토타입">19장 프로토타입</h1>
<p>자바스크립트는 클래스 기반 객체지향 프로그래밍 언어보다 효율적이며 더 강력한 객체지향 프로그래밍 능력을 지니고 있는 프로토타입 기반의 객체지향 프로그래밍 언어다. 자바스크립트는 객체 기반의 프로그래밍 언어이며 자바스크립트를 이루고 있는 거의 “모든 것”이 객체다.</p>

<h2 id="191-객체지향-프로그래밍">19.1 객체지향 프로그래밍</h2>
<p>객체의 집합으로 프로그램을 표현하려는 프로그래밍 패러다임을 말한다.<br />
객체지향 프로그래밍은 실세계의 실체를 인식하는 철학적 사고를 프로그래밍에 접목하려는 시도에서 시작한다. 실체는 특징이나 성질을 나타내는 <code class="language-plaintext highlighter-rouge">속성</code>을 가지고 있고, 이를 통해 인식하거나 구별할 수 있다. 다양한 속성 중에서 프로그램에 필요한 속성만 간추려 내어 표현하는 것을 <code class="language-plaintext highlighter-rouge">추상화</code>라 한다.<br />
객체지향 프로그래밍은 객체의 상태를 나타내는 데이터와 상태 데이터를 조작할 수 있는 동작을 하나의 논리적인 단위로 묶어 생각한다. 따라서 객체는 상태 데이터와 동작을 하나의 논리적인 단위로 묶은 복합적인 자료구조라고 할 수 있다. 이 때 객체의 상태 데이터를 프로퍼트, 동작을 메서드라 부른다.</p>

<h2 id="192-상속과-프로토타입">19.2 상속과 프로토타입</h2>
<p>상속은 객체지향 프로그래밍의 핵심 개념으로, 어떤 객체의 프로퍼티 또는 메서드를 다른 객체가 상속받아 그대로 사용할 수 있는 것을 말한다.
자바스크립트는 프로토타입을 기반으로 상속을 구현한다. 예제에서 상속을 통해 불필요한 중복을 제거해 보자.</p>

<h3 id="중복-인스턴스">중복 인스턴스</h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 생성자 함수</span>
  <span class="kd">function</span> <span class="nx">Circle</span><span class="p">(</span><span class="nx">radius</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">radius</span> <span class="o">=</span> <span class="nx">radius</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">getArea</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">radius</span> <span class="o">**</span> <span class="mi">2</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">};</span>

  <span class="kd">const</span> <span class="nx">circle1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Circle</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">circle2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Circle</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>

  <span class="c1">// Circle 생성자 함수는 인스턴스를 생성할 때마다 동일한 동작을 하는 getArea 메서드를 중복 생성하고 모든 인스턴스가 중복 소유한다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">circle1</span><span class="p">.</span><span class="nx">getArea</span> <span class="o">===</span> <span class="nx">circle2</span><span class="p">.</span><span class="nx">getArea</span><span class="p">);</span> <span class="c1">// false</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">circle1</span><span class="p">.</span><span class="nx">getArea</span><span class="p">());</span> <span class="c1">// 3.141592653589793</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">circle2</span><span class="p">.</span><span class="nx">getArea</span><span class="p">());</span> <span class="c1">// 12.566370614359172</span>
</code></pre></div></div>
<h3 id="상속을-통한-중복-인스턴스-방지">상속을 통한 중복 인스턴스 방지</h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 생성자 함수</span>
  <span class="kd">function</span> <span class="nx">Circle</span><span class="p">(</span><span class="nx">radius</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">radius</span> <span class="o">=</span> <span class="nx">radius</span><span class="p">;</span>
  <span class="p">};</span>

  <span class="c1">// Circle 생성자 함수가 생성한 모든 인스턴스가 gerArea 메서드를 공유해서 사용할 수 있도록 프로토타입에 추가</span>
  <span class="nx">Circle</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getArea</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">radius</span> <span class="o">**</span> <span class="mi">2</span><span class="p">;</span>
  <span class="p">};</span>

  <span class="c1">// 인스턴스 생성</span>
  <span class="kd">const</span> <span class="nx">circle1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Circle</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">circle2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Circle</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>

  <span class="c1">// Circle 생성자 함수가 생성한 모든 인스턴스는 부모 객체의 역할을 하는 프로토타입 Circle.prototype으로부터 getArea 메서드를 상속받는다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">circle1</span><span class="p">.</span><span class="nx">getArea</span> <span class="o">===</span> <span class="nx">circle2</span><span class="p">.</span><span class="nx">getArea</span><span class="p">);</span> <span class="c1">// true</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">circle1</span><span class="p">.</span><span class="nx">getArea</span><span class="p">());</span> <span class="c1">// 3.141592653589793</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">circle2</span><span class="p">.</span><span class="nx">getArea</span><span class="p">());</span> <span class="c1">// 12.566370614359172</span>
</code></pre></div></div>
<p>상속은 코드의 재사용이란 관점에서 매우 유용하다.</p>

<h2 id="193-프로토타입-객체">19.3 프로토타입 객체</h2>
<p>프로토타입 객체란 객체지향 프로그래밍의 근간을 이루는 객체 간 상속을 구현하기 위해 사용된다.<br />
모든 객체는 [[Prototype]]이라는 내부 슬롯을 가지며, 이 내부 슬록의 값은 프로토타입의 참조다. 객체가 생성될때 객체 생성 방식에 따라 프로토타입이 결정되고 [[Prototype]]에 저장된다.<br />
(그림 19-3)</p>

<p>[[Prototype]] 내부 슬롯에는 직접 접근할 수 없지만, 위 그림처럼 __proto__ 접근자 프로퍼티를 통해 자신의 프로토타입, 즉 자신의 [[Prototype]] 내부 슬록이 가리키는 프로토타입에 간접적으로 접근할 수 있다. 그리고 프로토타입은 자신의 constructor 프로퍼티를 통해 생성자 함수에 접근할 수 있고, 생성자 함수는 자신의 prototype 프로퍼티를 통해 프로토타입에 접근할 수 있다.</p>

<h3 id="1931-__proto__-접근자-프로퍼티">19.3.1 __proto__ 접근자 프로퍼티</h3>
<p>__proto__ 접근자 프로퍼티를 통해 자신의 프로토타입, 즉 자신의 [[Prototype]] 내부 슬록이 가리키는 프로토타입에 간접적으로 접근할 수 있다.
(그림 19-4)</p>

<h4 id="__proto__는-접근자-프로퍼티다">__proto__는 접근자 프로퍼티다.</h4>
<p>접근자 프로퍼티는 자체적으로는 값을 갖지 않고 다른 데이터 프로퍼티의 값을 읽거나 저장할 때 사용하는 접근자 함수, 즉 [[Get]], [[Set]] 프로퍼티 어트리뷰트로 구성된 프로퍼티다. <br />
__proto__ 접근자 프로퍼티를 통해 프로토타입에 접근하면 getter 함수인 [[Get]]이 호출된다. <br />
__proto__ 접근자 프로퍼티를 통해 새로운 프로토타입을 할당하면 setter 함수인 [[Set]]이 호출된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{};</span>
  <span class="kd">const</span> <span class="nx">parent</span> <span class="o">=</span> <span class="p">{</span> <span class="na">x</span><span class="p">:</span> <span class="mi">1</span> <span class="p">};</span>

  <span class="c1">// getter 함수인 get __proto__가 호출되어 obj 객체의 프로토타입을 취득</span>
  <span class="nx">obj</span><span class="p">.</span><span class="nx">__proto__</span><span class="p">;</span> 

  <span class="c1">// setter 함수인 set __proto__가 호출되어 obj 객체의 프로토타입을 교체</span>
  <span class="nx">obj</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">=</span> <span class="nx">parent</span><span class="p">;</span> 

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span> <span class="c1">// 1</span>
</code></pre></div></div>

<h4 id="__proto__-접근자-프로퍼티는-상속을-통해-사용된다">__proto__ 접근자 프로퍼티는 상속을 통해 사용된다.</h4>
<p>모든 객체는 상속을 통해 Object.prototype.__proto__ 접근자 프로퍼티를 사용할 수 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Choi</span><span class="dl">"</span> <span class="p">};</span>

  <span class="c1">// person 객체는 __proto__ 프로퍼티를 소유하지 않는다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="dl">'</span><span class="s1">__proto__</span><span class="dl">'</span><span class="p">));</span> <span class="c1">// false</span>

  <span class="c1">// __proto__ 프로퍼티는 모든 객체의 프로토타입 객체인 Object.prototype의 접근자 프로퍼티다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">getOwnPropertyDescriptor</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span> <span class="dl">'</span><span class="s1">__proto__</span><span class="dl">'</span><span class="p">));</span>
  <span class="c1">// {enumerable: false, configurable: true, get: ƒ, set: ƒ}</span>

  <span class="c1">// 모든 객체는 Object.prototype의 접근자 프로퍼티 __proto__를 상속받아 사용할 수 있다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">({}.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span> <span class="c1">// true</span>
</code></pre></div></div>

<h4 id="__proto__-접근자-프로퍼티를-통해-프로토타입에-접근하는-이유">__proto__ 접근자 프로퍼티를 통해 프로토타입에 접근하는 이유</h4>
<p>프로토타입에 접근하기 위해 접근자 프로퍼티를 사용하는 이유는 상호 참조에 의해 프로토타입 체인이 생성되는 것을 방지하기 위해서다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">parent</span> <span class="o">=</span> <span class="p">{};</span>
  <span class="kd">const</span> <span class="nx">child</span> <span class="o">=</span> <span class="p">{};</span>

  <span class="nx">child</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">=</span> <span class="nx">parent</span><span class="p">;</span>
  <span class="nx">parent</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">=</span> <span class="nx">child</span><span class="p">;</span>
  <span class="c1">// TypeError: Cyclic __proto__ value</span>
</code></pre></div></div>
<p>위 예제에서 에러가 발생하지 않고 정상적으로 처리되었을 경우에는 서로가 자신의 프로토타입이 되는 비정상적인 프로토타입 체인이 만들어지기 때문에 __proto__ 접근자 프로퍼티는 에러를 발생시킨다.<br />
프로토타입 체인은 단방향 링크드 리스트로 구현되어야 한다. 만약 순환 참조(서로가 자신의 프로토타입이 되는)하는 프로토타입 체인이 만들어지면 프로토타입 체인 종점이 존재하지 않아서 무한 루프에 빠진다. 따라서 아무런 체크 없이 무조건적으로 프로토타입을 교체할 수 없도록 __proto__ 접근자 프로퍼티를 통해 프로토타입에 접근하고 교체하도록 구현되어있다.</p>

<h4 id="__proto__-접근자-프로퍼티를-코드-내에서-직접-사용하는-것은-권장하지-않는다">__proto__ 접근자 프로퍼티를 코드 내에서 직접 사용하는 것은 권장하지 않는다.</h4>
<p>모든 객체가 __proto__ 접근자 프로퍼티를 사용할 수 있는 것은 아니기 때문에 권장하지 않는다. -&gt; 직접 상속(Object.prototype을 상속받지 않는 객체)<br />
프로토타입의 참조를 취득하고 싶은 경우에는 Object.getPrototypeOf 메서드 사용.<br />
프로토타입을 교체하고 싶은 경우에는 Object.setPrototypeOf 메서드를 사용.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{};</span>
  <span class="kd">const</span> <span class="nx">parent</span> <span class="o">=</span> <span class="p">{</span> <span class="na">x</span><span class="p">:</span> <span class="mi">1</span> <span class="p">};</span>

  <span class="nb">Object</span><span class="p">.</span><span class="nx">getPrototypeOf</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span> <span class="c1">// obj.__proto__</span>

  <span class="nb">Object</span><span class="p">.</span><span class="nx">setPrototypeOf</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span> <span class="nx">parent</span><span class="p">);</span> <span class="c1">// obj.__proto__ = parent;</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span> <span class="c1">// 1</span>
</code></pre></div></div>
<p>Object.getPrototypeOf 메서드와 Object.setPrototypeOf 메서드는 get Object.prototype.__proto__ 와 set Object.prototype.__proto__ 의 처리 내용과 정확히 일치한다.</p>

<h3 id="1932-함수-객체의-prototype-프로퍼티">19.3.2 함수 객체의 prototype 프로퍼티</h3>
<p>함수 객체만이 소유하는 prototype 프로퍼티는 생성자 함수가 생성할 인스턴스의 프로토타입을 가리킨다. 따라서 생성자 함수로서 호출할 수 없는 non-constructor인 화살표 함수와 ES6 메서드 축약 표현으로 정의한 메서드는 prototype 프로퍼티를 소유하지 않으며 프로토타입도 생성하지 않는다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 함수 객체는 prototype 프로퍼티를 소유</span>
  <span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{}).</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="dl">'</span><span class="s1">prototype</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// -&gt; true</span>

  <span class="c1">// 일반 객체는 prototype 프로퍼티를 소유하지 않는다.</span>
  <span class="p">({}).</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="dl">'</span><span class="s1">prototype</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// -&gt; false</span>

  <span class="c1">// 화살표함수는 non-constructor</span>
  <span class="kd">const</span> <span class="nx">Person</span> <span class="o">=</span> <span class="nx">name</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
  <span class="p">};</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">Person</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="dl">'</span><span class="s1">prototype</span><span class="dl">'</span><span class="p">));</span> <span class="c1">// false</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span> <span class="c1">// undefined</span>
</code></pre></div></div>
<p>모든 객체가 가지고 있는 __proto__ 접근자 프로퍼티와 함수 객체만이 가지고 있는 prototype 프로퍼티는 경국 동일한 프로토타입을 가리킨다. 하지만 이들 프로퍼티를 사용하는 주체가 다르다.</p>

<table>
  <thead>
    <tr>
      <th>구분</th>
      <th>소유</th>
      <th>값</th>
      <th>사용 주체</th>
      <th>사용 목적</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>__proto__ 접근자 프로퍼티</td>
      <td>모든 객체</td>
      <td>프로토타입의 참조</td>
      <td>모든 객체</td>
      <td>객체가 자신의 프로토타입에 접근 또는 교체하기 위해 사용</td>
    </tr>
    <tr>
      <td>prototype 프로퍼티</td>
      <td>constructor</td>
      <td>프로토타입의 참조</td>
      <td>생성자 함수</td>
      <td>생성자 함수가 자신이 생성할 객체(인스턴스)의 프로토타입을 할당하기 위해 사용</td>
    </tr>
  </tbody>
</table>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 생성자 함수 </span>
  <span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="kd">const</span> <span class="nx">me</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Preson</span><span class="p">(</span><span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span><span class="p">);</span>

  <span class="c1">// 결국 Person.prototype과 me.__proto__ 는 동일한 프로토타입을 가리킨다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">===</span> <span class="nx">me</span><span class="p">.</span><span class="nx">__proto__</span><span class="p">);</span> <span class="c1">// true</span>
</code></pre></div></div>

<h3 id="1933-프로토타입의-constructor-프로퍼티와-생성자-함수">19.3.3 프로토타입의 constructor 프로퍼티와 생성자 함수</h3>
<p>모든 프로토타입은 constructor 프로퍼티를 갖는다. 이 constructor 프로퍼티는 perototype 프로퍼티로 자신을 참조하고 있는 생성자 함수를 가리킨다.<br />
이 연결은 함수 객체가 생성될 때 이뤄진다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 생성자 함수 </span>
  <span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="kd">const</span> <span class="nx">me</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Preson</span><span class="p">(</span><span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span><span class="p">);</span>

  <span class="c1">// me 객체의 생성자 함수는 Person이다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">me</span><span class="p">.</span><span class="kd">constructor</span> <span class="o">===</span> <span class="nx">Person</span><span class="p">);</span> <span class="c1">// true</span>
</code></pre></div></div>
<p>(그림 19-8)</p>

<p>위 예제에서 Person 생성자 함수는 me 객체를 생성했다. 이때 me 객체는 프로토타입의 constructor 프로퍼티를 통해서 생성자 함수와 연결된다. me 객체에는 constructor 프로퍼티가 없지만 me 객체의 프로토타입인 Person.prototype에는 constructor 프로퍼티가 있다. 따라서 me 객체는 프로토타입인 Person.prototype의 constructor 프로퍼티를 상속 받아 사용할 수 있다.</p>

<h2 id="194-리터럴-표기법에-의해-생성된-객체의-생성자-함수와-프로토타입">19.4 리터럴 표기법에 의해 생성된 객체의 생성자 함수와 프로토타입</h2>
<p>생성자 함수에 의해 생성된 인스턴스는 프로토타입의 constructor 프로퍼티에 의해 생성자 함수와 연결된다. 이때 constructor 프로퍼티가 가리키는 생성자 함수는 인스턴스를 생성한 생성자 함수다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// obj 객체를 생성한 생성자 함수는 Object이다.</span>
  <span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">();</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="kd">constructor</span> <span class="o">===</span> <span class="nb">Object</span><span class="p">);</span> <span class="c1">// true</span>
</code></pre></div></div>
<p>리터럴 표기법에 의해 생성된 객체도 물론 프로토타입이 존재한다. 하지만 리터럴 표기법에 의해 생성된 객체의 경우 프로토타입의 constructor 프로퍼티가 가리키는 생성자 함수가 반드시 객체를 생성한 생성자 함수라고 단정할 수는 없다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// obj 객체는 Object 생성자 함수로 생성한 객체가 아니라 객체 리터럴로 생성했다.</span>
  <span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{};</span>
  <span class="c1">// 하지만 obj 객체의 생성자 함수는 Object 생성자 함수다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="kd">constructor</span> <span class="o">===</span> <span class="nb">Object</span><span class="p">);</span> <span class="c1">// true</span>
</code></pre></div></div>
<p>객체 리터럴에 의해 생성된 객체이지만 obj객체는 Object 생성자 함수와 constructor 프로퍼티로 연결되어있다.</p>

<p>ECMAScript에 따르면 Object 생성자 함수는 Object 생성자 함수에 인수를 전달하지 않거나 undefined 또는 null을 인수로 전달하면서 호출하면 내부적으로는 추상 연산 OrdinaryObjectCreate를 호출하여 Object.prototype을 프로토타입으로 갖는 빈 객체를 생성한다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 인수가 전달되지 않았을떄 추상 연산 OrdinaryObjectCreate를 호출하여 빈객체 생성</span>
  <span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">();</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span> <span class="c1">// {}</span>

  <span class="c1">// 인수가 전달된 경우 인수를 객체로 반환</span>
  <span class="nx">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">(</span><span class="mi">123</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span> <span class="c1">// Number {123}</span>
</code></pre></div></div>
<p>이처럼 Object 생성자 함수 호출과 객체 리터럴의 평가는 빈 객체를 생성하는 점에서 동일하나 세부 내용은 다르다. 따라서 객체 리터럴에 의해 생성된 객체는 Object 생성자 함수가 생성한 객체가 아니다.<br />
함수 객체의 경우 함수 선언문과 함수 표현식을 평가하여 함수 객체를 생성한 것은 Function 생성자 함수가 아니다. 하지만 constructor 프로퍼티를 통해 확인해보면 foo 함수의 생성자 함수는 Function 생성자 함수다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 함수 선언문으로 생성</span>
  <span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{}</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">.</span><span class="kd">constructor</span> <span class="o">===</span> <span class="nb">Function</span><span class="p">);</span> <span class="c1">// true</span>
</code></pre></div></div>
<p>리터럴 표기법에 의해 생성된 객체도 가상적인 생성자 함수를 갖는다. 프로토타입은 생성자 함수와 더불어 생성되며 prototype, constructor 프로퍼티에 의해 연결되어 있기 때문이다.<br />
프로토타입과 생성자 함수는 단독으로 존재할 수 없고 언제나 쌍으로 존재한다.</p>

<h4 id="리터럴-표기법에-의해-생성된-객체의-생성자-함수와-프로토타입">리터럴 표기법에 의해 생성된 객체의 생성자 함수와 프로토타입</h4>
<p>리터럴 표기법 | 생성자 함수 | 프로토타입
–|–|–
객체 리터럴 | Object | Object.prototype
함수 리터럴 | Function | Function.prototype
배열 리터럴 | Array | Array.prototype
정규 표현식 리터럴 | RegExp | RegExp.prototype</p>

<h2 id="195-프로토타입의-생성-시점">19.5 프로토타입의 생성 시점</h2>
<p>프로토타입은 생성자 함수가 생성되는 시점에 더불어 생성된다. 프로토타입과 생성자 함수는 단독으로 존재할 수 없고 언제나 쌍으로 존재하기 때문이다.
생성자 함수는 사용자 정의 생성자 함수와 빌트인 생성자 함수로 구분할 수 있다.</p>

<h3 id="1951-사용자-정의-생성자-함수와-프로토타입-생성-시점">19.5.1 사용자 정의 생성자 함수와 프로토타입 생성 시점</h3>
<p>내부 메서드 [[Constructor]]를 갖는 함수 객체, 즉 일반 함수(함수 선언문, 함수 표현식)로 정의한 함수 객체는 new 연산자와 함께 생성자 함수로서 호출할 수 있다. constructor는 함수 정의가 평가되어 함수 객체를 생성하는 시점에 프로토타입도 더불어 생성된다.
non-constructor(화살표함수, ES6 메서드 축약표현)는 프로토타입이 생성되지 않는다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// Person 생성자 함수는 호이스팅되어 런타임 이전에 실행된다. 이때 프로토타입도 더불어 생성</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span> <span class="c1">// {constructor: f}</span>

  <span class="c1">// 생성자 함수</span>
  <span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
  <span class="p">}</span>
</code></pre></div></div>

<p>이처럼 빌트인 생성자 함수가 아닌 사용자 정의 생성자 함수는 자신이 평가되어 함수 객체로 생성되는 시점에 프로토타입도 더불어 생성되며, 생성된 프로토타입의 프로토타입은 언제나 Object.prototype이다.</p>

<h3 id="1952-빌트인-생성자-함수와-프로토타입-생성-시점">19.5.2 빌트인 생성자 함수와 프로토타입 생성 시점</h3>
<p>빌트인 생성자 함수 - Object, String, Number, Function, Array, RegExp, Date, Promise 등…
모든 빌트인 생성자 함수는 전역 객체가 생성되는 시점에 생성된다. 생성된 프로토타입은 빌트인 생성자 함수의 prototype 프로퍼티에 바인딩된다.<br />
(그림 19-13)<br />
객체가 생성되기 이전에 생성자 함수와 프로토타입은 이미 객체화되어 존재한다. 이후 생성자 함수 또는 리터럴 표기법으로 객체를 생성하면 프로토타입은 생성된 객체의 [[Prototype]] 내부 슬록에 할당된다.</p>

<h2 id="196-객체-생성-방식과-프로토타입의-결정">19.6 객체 생성 방식과 프로토타입의 결정</h2>
<p><code class="language-plaintext highlighter-rouge">객체 생성 방식</code></p>
<ul>
  <li>객체 리터럴</li>
  <li>Object 생성자 함수</li>
  <li>생성자 함수</li>
  <li>Object.create 메서드</li>
  <li>클래스(ES6)</li>
</ul>

<p>각 방식마다 세부적인 객체 생성 방식의 차이는 있으나 추상 연산 OrdinaryObjectCreate에 의해 생성된다는 공통점이 있다. 프로토타입은 추상 연산 OrdinaryObjectCreate에 전달되는 인수에 의해 결정되고 이 인수는 객체가 생성되는 시점에 객체 생성 방식에 의해 결정된다.</p>

<h3 id="1961-객체-리터럴에-의해-생성된-객체의-프로토타입">19.6.1 객체 리터럴에 의해 생성된 객체의 프로토타입</h3>
<p>객체 리터럴에 의해 생성되는 객체의 프로토타입은 Object.prototype이다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 객체 리터럴이 평가되면 추상 연산 OrdinaryObjectCreate에 의해 </span>
  <span class="c1">// Object 생성자 함수와 Object.prototype과 생성된 객체 사이에 연결이 만들어진다.</span>
  <span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="na">x</span><span class="p">:</span> <span class="mi">1</span> <span class="p">};</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="kd">constructor</span> <span class="o">===</span> <span class="nb">Object</span><span class="p">);</span> <span class="c1">//true</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="dl">'</span><span class="s1">x</span><span class="dl">'</span><span class="p">));</span> <span class="c1">// true</span>
</code></pre></div></div>
<p>obj 객체는 Object.prototype을 프로토타입으로 갖게되며 Object.prototype을 상속받는다.<br />
obj 객체는 constructor 프로퍼티와 hasOwnProperty 메서드 등을 소유하고 있지 않지만 Object.prototype 객체를 상속 받았기 때문에 자유롭게 사용할 수 있다.</p>

<p>(그림 19-14)</p>

<h3 id="1962-object-생성자-함수에-의해-생성된-객체의-프로토타입">19.6.2 Object 생성자 함수에 의해 생성된 객체의 프로토타입</h3>
<p>Object 생성자 함수를 인수 없이 호출하면 빈 객체 생성된다.<br />
객체 리터럴에 의해 생성된 객체와 동일한 구조를 갖는다.
Object 생성자 함수를 호출하면 추상 연상 OrdinaryObjectCreate가 호출되고 전달되는 프로토타입은 Object.prototype이다. Object 생성자 함수에 의해 생성되는 객체의 프로토타입은 Object.prototype이다.</p>
<ul>
  <li>객체 리터럴과 Object 생성자 함수에 의한 객체 생성 방식의 차이<br />
객체 리터럴 방식은 객체 리터럴 내부에 프로퍼티를 추가. Object 생성자 함수는 빈 객체 생성 후 프로퍼티 추가.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">;</span>
  <span class="nx">obj</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

  <span class="c1">// // Object 생성자 함수에 의해 생성된 obj 객체는 Object.prototype을 상속받는다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="kd">constructor</span> <span class="o">===</span> <span class="nb">Object</span><span class="p">);</span> <span class="c1">//true</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="dl">'</span><span class="s1">x</span><span class="dl">'</span><span class="p">));</span> <span class="c1">// true</span>
</code></pre></div></div>
<p>(그림 19-15)</p>

<h3 id="1963-생성자-함수에-의해-생성된-객체의-프로토타입">19.6.3 생성자 함수에 의해 생성된 객체의 프로토타입</h3>
<p>new 연산자와 함께 생성자 함수를 호출하여 인스턴스를 생성하면 다른 객체 생성 방식돠 마찬가지로 추상 연산 OrdinaryObjectCreate가 호출된다.<br />
생성자 함수에 의해 생성되는 객체의 프로토타입은 생성자 함수의 prototype 프로퍼티에 바인딩되어 있는 객체다.<br />
사용자 정의 생성자 함수 Person과 더불어 생성된 프로토타입 Person.prototype의 프로퍼티는 constructor뿐이다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="c1">// 프로토타입 메서드 추가로 하위 객체가 상속 받을 수 있도록 구현</span>
  <span class="c1">// 일반 객체와 같이 프로토타입도 추가, 삭제가 가능하고 이렇게 추가, 삭제된 프로퍼티는 프로토타입 체인에 즉각 반영된다.</span>
  <span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">sayHello</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Hi my name is </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="kd">const</span> <span class="nx">me</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">you</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="dl">'</span><span class="s1">Kim</span><span class="dl">'</span><span class="p">);</span>

  <span class="nx">me</span><span class="p">.</span><span class="nx">sayHello</span><span class="p">();</span> <span class="c1">// Hi my name is Choi</span>
  <span class="nx">you</span><span class="p">.</span><span class="nx">sayHello</span><span class="p">();</span> <span class="c1">// Hi my name is Kim</span>
</code></pre></div></div>

<p>(그림 19-17)<br />
Person 생성자 함수를 통해 생성된 모든 객체는 프로토타입에 추가된 sayHello 메서드를 상속받아 자신의 메서드처럼 사용할 수 있다.</p>

<h2 id="197-프로토타입-체인">19.7 프로토타입 체인</h2>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="c1">// 프로토타입 메서드</span>
  <span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">sayHello</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Hi my name is </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="kd">const</span> <span class="nx">me</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span><span class="p">);</span>

  <span class="c1">// hasOwnProperty는 Obejct.prototype의 메서드다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">me</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="dl">'</span><span class="s1">name</span><span class="dl">'</span><span class="p">));</span> <span class="c1">// true</span>
</code></pre></div></div>
<p>위 예제에서 Person 생성자 함수에 의해 생성된 me 객체는 Object.prototype의 메서드인 hasOwnProperty를 호출할 수 있다. 이것은 Person.prototype 뿐만 아니라 Object.prototype도 상속받았다는 의미이다.</p>

<p>자바스크립트는 객테의 프로퍼티(메서드 포함)에 접근하려고 할 때 해당 객체에 접근하려는 프로퍼티가 없다면 [[Prototype]] 내부 슬록의 참조를 따라 자신의 부모 역할을 하는 프로토타입의 프로퍼티를 순차적으로 검색한다. 이름 프로토타입 체인이라 한다. 프로토타입 체인은 자바스크립트가 객체지향 프로그래밍의 상속을 구현하는 매커니즘이다.</p>

<p>(그림 19-18)</p>

<p>me.hasOwnProperty(‘name’)과 같이 메서드를 호출하면 자바스크립트는 다음과 같은 과정을 거쳐 메서드를 검색한다.</p>
<ol>
  <li>hasOwnProperty 메서드를 호출한 me 객체에서 hasOwnProperty 메서드를 검색.<br />
me 객체에는 hasOwnProperty 메서드가 없으므로 [[Prototype]] 내부 슬롯에 바인딩 되어있는 프로토타입으로 이동하여 hasOwnProperty 메서드를 검색한다.</li>
  <li>Person.prototype에도 hasOwnProperty 메서드가 없으므로 체인을 따라 [[Prototype]] 내부 슬롯에 바인딩 되어있는 프로토타입으로 이동하여 hasOwnProperty 메서드를 검색한다.</li>
  <li>Object.prototype에는 hasOwnProperty 메서드가 존재하므로 Object.prototype.hasOwnProperty 메서드를 호출한다. 이때 Object.prototype.hasOwnProperty 메서드의 this에는 me 객체가 바인딩 된다.
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">me</span><span class="p">,</span><span class="dl">'</span><span class="s1">name</span><span class="dl">'</span><span class="p">);</span> <span class="c1">//true</span>
</code></pre></div>    </div>
    <blockquote>
      <p>call 메서드는 this로 사용할 객체를 전달하면서 함수를 호출한다.</p>
    </blockquote>
  </li>
</ol>

<p>프로토타입 체인의 최상위에 위치하는 객체는 언제나 Object.prototype이다. 따라서 모든 객체는 Object.prototype을 상속받는다. <code class="language-plaintext highlighter-rouge">Object.prototype을 프로토타입 체인의 종점</code>이라 한다.<br />
프로토타입 체인은 상속과 프로퍼티 검색을 위한 메커니즘이라고 할 수 있다. 반면에 스코프 체인은 식별자 검색을 위한 메커니즘이라고 할 수 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nx">me</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="dl">'</span><span class="s1">name</span><span class="dl">'</span><span class="p">);</span> 
</code></pre></div></div>
<p>위 예제의 경우, 먼저 식별자 체인에서 me 식별자를 검색한다. me 식별자는 전역에서 선언되었으므로 전역 스코프에서 검색된다. me 식별자 검색 후 me 객체의 프로토타입 체인에서 hasOwnProperty 메서드를 검색한다. 이처럼 <code class="language-plaintext highlighter-rouge">스코프 체인과 프로토타입 체인은 별도로 동작하는 것이 아니라 서로 협력하여 식별자와 프로퍼티를 검색하는 데 사용</code>된다.</p>

<h2 id="198-오버라이딩과-프로퍼티-섀도잉">19.8 오버라이딩과 프로퍼티 섀도잉</h2>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">Person</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// 생성자 함수</span>
    <span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// 프로토타입 메서드 추가</span>
    <span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">sayHello</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Hi! my name is </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
    <span class="p">};</span>

    <span class="c1">// 생성자 함수를 반환</span>
    <span class="k">return</span> <span class="nx">Person</span><span class="p">;</span>
  <span class="p">}());</span>

  <span class="kd">const</span> <span class="nx">me</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span><span class="p">);</span>

  <span class="c1">// 인스턴스 메서드 추가</span>
  <span class="nx">me</span><span class="p">.</span><span class="nx">sayHello</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Hey! my name is </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
  <span class="p">};</span>

  <span class="c1">// 인스턴스 메서드가 호출. 프로토타입 메서드는 인스턴스 메서드에 의해 가려진다. (프로퍼티 섀도잉)</span>
  <span class="nx">me</span><span class="p">.</span><span class="nx">sayHello</span><span class="p">();</span> <span class="c1">//Hey! my name is Choi</span>

  <span class="c1">// 인스턴스 메서드 삭제</span>
  <span class="k">delete</span> <span class="nx">me</span><span class="p">.</span><span class="nx">sayHello</span><span class="p">;</span>

  <span class="c1">// 프로퍼티 메서드 sayHello 출력</span>
  <span class="nx">me</span><span class="p">.</span><span class="nx">sayHello</span><span class="p">();</span> <span class="c1">// Hi! my name is Choi</span>

  <span class="c1">// 프로퍼티 메서드 sayHello 삭제 -&gt; 삭제되지 않는다.</span>
  <span class="k">delete</span> <span class="nx">me</span><span class="p">.</span><span class="nx">sayHello</span><span class="p">;</span>

  <span class="nx">me</span><span class="p">.</span><span class="nx">sayHello</span><span class="p">();</span> <span class="c1">// Hi! my name is Choi</span>

  <span class="c1">// 프로토타입 메서드의 변경 및 삭제는 프로토타입에 직접 접근해야 한다.</span>
  <span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">sayHello</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Hello! my name is </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="nx">me</span><span class="p">.</span><span class="nx">sayHello</span><span class="p">();</span> <span class="c1">// Hello! my name is Choi</span>

  <span class="k">delete</span> <span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">sayHello</span><span class="p">;</span>

  <span class="nx">me</span><span class="p">.</span><span class="nx">sayHello</span><span class="p">();</span> <span class="c1">// TypeError: me.sayHello is not a function</span>
</code></pre></div></div>
<p>(그림 19-19)<br />
프로토타입이 소유한 프로퍼티를 프로토타입 프로퍼티, 인스턴스가 소유한 프로퍼티를 인스턴스 프로퍼티라고 부른다.<br />
프로토타입 프로퍼티와 같은 이름의 프로퍼티를 인스턴스에 추가하면 체인을 따라 프로토타입 프로퍼티를 검색하여 프로토타입 프로퍼티를 덮어쓰는 것이 아니라 인스턴스 프로퍼티로 추가한다. 이때 인스턴스 메서드 sayHello는 프로토타입 메서드 sayHello를 오버라이딩했고 프로토타입 메서드 sayHello는 가려진다. 이처럼 상속 관계에 의해 프로퍼티가 가려지는 현상을 프로퍼티 섀도잉이라 한다.
프로토타입 메서드는 하위 객체를 통해 프로토타입을 변경 및 삭제하는 것은 불가능하다. 하위 객체를 통한 프로토타입의 get 엑세스 허용 set 엑세스 금지. 프로토타입에 직접 접근해야 한다.</p>

<h2 id="199-프로토타입의-교체">19.9 프로토타입의 교체</h2>
<p>프로토타입은 생성자 함수 또는 인스턴스에 의해 교체할 수 있다.</p>

<h3 id="1991-생성자-함수에-의한-프로토타입의-교체">19.9.1 생성자 함수에 의한 프로토타입의 교체</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kd">const</span> <span class="nx">Person</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// 생성자 함수</span>
    <span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// 생성자 함수의 prototype 프로퍼티를 통해 프로토타입을 교체</span>
    <span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="p">{</span>
      <span class="c1">// 💡 constructor 프로퍼티와 생성자 함수 간의 연결</span>
      <span class="c1">// constructor: Person,</span>
      <span class="nx">sayHello</span> <span class="p">()</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Hi! my name is </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
      <span class="p">}</span>
    <span class="p">};</span>

    <span class="k">return</span> <span class="nx">Person</span><span class="p">;</span>
  <span class="p">}());</span>

  <span class="kd">const</span> <span class="nx">me</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span><span class="p">);</span>

  <span class="c1">// 프로토타입을 교체하면 constructor 프로퍼티와 생성자 함수 간의 연결이 파괴된다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">me</span><span class="p">.</span><span class="kd">constructor</span> <span class="o">===</span> <span class="nx">Person</span><span class="p">)</span> <span class="c1">// false / 💡 constructor 함수 간 연결 후 -&gt; true</span>
  <span class="c1">// 프로토타입 체인을 따라 Object.prototype의 constructor 프로퍼티가 검색된다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">me</span><span class="p">.</span><span class="kd">constructor</span> <span class="o">===</span> <span class="nb">Object</span><span class="p">)</span> <span class="c1">// true / 💡 constructor 함수 간 연결 후 -&gt; false</span>
</code></pre></div></div>
<p>Person.prototype에 객체 리터럴을 할당했다. 이것은 Person 생성자 함수가 생성할 객체의 포로토타입을 객체 리터럴로 교체한 것이다.<br />
(그림 19-20)<br />
객체 리터럴에는 constructor 프로퍼티가 없다. 따라서 me 객체의 생성자 함수를 검색하면 Person이 아닌 Object가 나온다. 생성자 함수간의 연결 파괴.<br />
연결을 되살리려면 프로토타입으로 교체한 객체 리터럴에 constructor 프로퍼티를 추가.</p>

<h3 id="1992-인스턴스에-의한-프로토타입의-교체">19.9.2 인스턴스에 의한 프로토타입의 교체</h3>
<p>생성자 함수에 의한 프로토타입의 교체와 마찬가지로 constructor 프로퍼티와 생성자 함수 간의 연결이 파괴된다.<br />
별차이가 없어보이지만 미묘한 차이가 있다. 인스턴스에 의한 프로토타입의 교체는 Person 생성자 함수가 교체된 프로토타입에 연결이 되지 않는다.<br />
(그림 19-22)</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="kd">const</span> <span class="nx">me</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span><span class="p">);</span>
  
  <span class="c1">// 프로토타입으로 교체할 객체 </span>
  <span class="kd">const</span> <span class="nx">parent</span> <span class="o">=</span> <span class="p">{</span>
    <span class="c1">// 💡 constructor 프로퍼티와 생성자 함수 간의 연결</span>
    <span class="na">constructer</span><span class="p">:</span> <span class="nx">Person</span><span class="p">,</span>
    <span class="nx">sayHello</span> <span class="p">()</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Hi! my name is </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">};</span>

  <span class="c1">// 💡 생성자 함수의 prototype 프로퍼티와 프로토타입 간의 연결을 설정</span>
  <span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nx">parent</span><span class="p">;</span>

  <span class="c1">// me 객체의 프로토타입을 parent 객체로 교체</span>
  <span class="nb">Object</span><span class="p">.</span><span class="nx">setPrototypeOf</span><span class="p">(</span><span class="nx">me</span><span class="p">,</span> <span class="nx">parent</span><span class="p">);</span>
  <span class="c1">// 위 코드는 아래의 코드와 동일하게 동작</span>
  <span class="c1">// me.__proto__ = parent;</span>

  <span class="nx">me</span><span class="p">.</span><span class="nx">sayHello</span><span class="p">();</span> <span class="c1">// Hi! my name is Choi</span>

  <span class="c1">// 프로토타입을 교체하면 constructor 프로퍼티와 생성자 함수 간의 연결이 파괴된다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">me</span><span class="p">.</span><span class="kd">constructor</span> <span class="o">===</span> <span class="nx">Person</span><span class="p">)</span> <span class="c1">// false / 💡 constructor 함수 간 연결 후 -&gt; true</span>
  <span class="c1">// 프로토타입 체인을 따라 Object.prototype의 constructor 프로퍼티가 검색된다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">me</span><span class="p">.</span><span class="kd">constructor</span> <span class="o">===</span> <span class="nb">Object</span><span class="p">)</span> <span class="c1">// true / 💡 constructor 함수 간 연결 후 -&gt; false</span>

  <span class="c1">// 💡 생성자 함수의 prototype 프로퍼티가 교체된 프로토타입을 가리킨다.</span>
  <span class="c1">// console.log(Person.prototype === Object.getPrototypeOf(me)); // true</span>
</code></pre></div></div>
<p>연결을 되살리려면 프로토타입으로 교체한 객체 리터럴에 constructor 프로퍼티를 추가하고 함수의 prototype 프로퍼티를 재설정 해야한다.
이처럼 프로토타입 교체를 통해 객체 간의 상속 관계를 동적으로 변경하는 것은 꽤나 번거롭다. 따라서 프로토타입은 직접 교체하지 않는 것이 좋다.</p>

<h2 id="1910-instanceof-연산자">19.10 instanceof 연산자</h2>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nx">객체</span> <span class="k">instanceof</span> <span class="nx">생성자</span> <span class="nx">함수</span>
</code></pre></div></div>
<p>우변의 생성자 함수의 prototype에 바인딩되 객체가 좌변의 객체의 프로토타입 체인 상에 존재하면 true로 평가되고, 그렇지 않은 경우에는 false로 평가된다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="kd">const</span> <span class="nx">me</span> <span class="o">=</span> <span class="nx">mew</span> <span class="nx">Person</span><span class="p">(</span><span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span><span class="p">);</span>

  <span class="c1">// 프로토타입으로 교체할 객체</span>
  <span class="kd">const</span> <span class="nx">parent</span> <span class="o">=</span> <span class="p">{};</span>

  <span class="c1">// 프로토타입의 교체</span>
  <span class="nb">Object</span><span class="p">.</span><span class="nx">setPrototypeOf</span><span class="p">(</span><span class="nx">me</span><span class="p">,</span> <span class="nx">parent</span><span class="p">);</span>

  <span class="c1">//Person 생성자 함수와 parent 객체는 연결되어 있지 않다. -&gt; 프로토타입 교체 때문</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">===</span> <span class="nx">parent</span><span class="p">);</span> <span class="c1">// false</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">parent</span><span class="p">.</span><span class="kd">constructor</span> <span class="o">===</span> <span class="nx">Person</span><span class="p">);</span> <span class="c1">// false</span>

  <span class="c1">// parent 객체를 Person 생성자 함수와 prototype 프로퍼티에 바인딩한다.</span>
  <span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nx">parent</span><span class="p">;</span>

  <span class="c1">// Person.prototype이 me 객체의 프로토타입 체인 상에 존재하므로 true로 평가된다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">me</span> <span class="k">instanceof</span> <span class="nx">Person</span><span class="p">);</span> <span class="c1">// true</span>

  <span class="c1">// Object.prototype이 me 객체의 프로토타입 체인 상에 존재하므로 true로 평가된다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">me</span> <span class="k">instanceof</span> <span class="nb">Object</span><span class="p">);</span> <span class="c1">// true</span>
</code></pre></div></div>
<p>instanceof 연산자는 프로토타입의 constructor 프로퍼티가 가리키는 생성자 함수를 찾는 것이 아니라 <code class="language-plaintext highlighter-rouge">생성자 함수의 prototype에 바인딩된 객체가 프로토타입 체인 상에 존재하는지 확인</code>한다.
(그림 19-23)</p>

<h2 id="1911-직접-상속">19.11 직접 상속</h2>
<h3 id="19111-objectcreate에-의한-직접-상속">19.11.1 Object.create에 의한 직접 상속</h3>
<p>Object.create 메서드는 명시적으로 프로토타입을 지정하여 새로운 객체를 생성한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="cm">/**
   * 지정된 프로토타입 및 프로퍼티를 갖는 새로운 객체를 생성하여 반환한다.
   * @param {object} prototype - 생성할 객체의 프로토타입으로 지정할 객체
   * @param {object} [propertiesObject] - 생성할 객체의 프로퍼티를 갖는 객체
   * @return {object} 지정된 프로토타입 및 프로퍼티를 갖는 새로운 객체
  */</span>
  <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">prototype</span><span class="p">[,</span> <span class="nx">propertiesObject</span><span class="p">])</span>
</code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 프로토타입이 null인 샛체를 생성한다. 생성된 객체는 프로토타입 체인의 종점에 위치한다.</span>
  <span class="c1">// obj -&gt; null</span>
  <span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">getPrototypeOf</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="o">===</span> <span class="kc">null</span><span class="p">);</span> <span class="c1">// true</span>
  <span class="c1">// Object.prototype을 상속받지 못한다.</span>
  <span class="c1">// console.log(obj.toString()); // TypeError: obj.toString is not a function</span>

  <span class="c1">// obj -&gt; Object.prototype -&gt; null</span>
  <span class="c1">// obj = {};와 동일하다</span>
  <span class="nx">obj</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">getPrototypeOf</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="o">===</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">)</span> <span class="c1">// ture</span>

  <span class="c1">// obj -&gt; Object.prototype -&gt; null</span>
  <span class="c1">// obj = { x: 1 };와 동일하다</span>
  <span class="nx">obj</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">x</span><span class="p">:</span> <span class="p">{</span><span class="na">value</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span> <span class="na">writable</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="na">enumerable</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="na">configurable</span><span class="p">:</span> <span class="kc">true</span> <span class="p">}</span>
  <span class="p">});</span>
  <span class="c1">// 위 코드는 아래와 동일하다.</span>
  <span class="c1">// obj = Object.create(Object.prototype);</span>
  <span class="c1">// obj.x = 1;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span> <span class="c1">// 1</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">getPrototypeOf</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="o">===</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span> <span class="c1">// true</span>

  <span class="kd">const</span> <span class="nx">myProto</span> <span class="o">=</span> <span class="p">{</span> <span class="na">x</span><span class="p">:</span> <span class="mi">10</span> <span class="p">};</span> 
  
  <span class="c1">// 임의의 객체를 직접 상속받는다.</span>
  <span class="c1">// obj -&gt; myProto -&gt; Object.prototype -&gt; null</span>
  <span class="nx">obj</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">myProto</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">getPrototype</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="o">===</span> <span class="nx">myProto</span><span class="p">);</span> <span class="c1">// true</span>

  <span class="c1">// 생성자 함수</span>
  <span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="c1">// obj -&gt; Person.prototype -&gt; Object.prototype -&gt; null</span>
  <span class="c1">// obj = new Person('Choi')와 동일하다</span>
  <span class="nx">obj</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span>
  <span class="nx">obj</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span> <span class="c1">// Choi</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">getPrototypeOf</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="o">===</span> <span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span> <span class="c1">//true</span>
</code></pre></div></div>
<p>위 예제처럼 object.create 메서드는 첫 번째 매개변수에 전달한 객체의 프로토타입 체인에 속하는 객체를 생성한다. 즉, 객체를 생성하면 직접적으로 상속을 구현하는 것이다.
Object.create 메서드의 장점</p>
<ul>
  <li>new 연산자가 없이도 객체를 생성할 수 있다.</li>
  <li>프로토타입을 지정하면서 객체를 생성할 수 있다.</li>
  <li>객체 리터럴에 의해 생성된 객체도 상속받을 수 있다.</li>
</ul>

<p>ESLint에서는 Object.prototype의 빌트인 메서드를 객체가 직접 호출하는 것을 권장하지 않는다. 이유는 프로토타입 체인의 종점에 위치하는 객체를 생성할수 있기 때문이다. 프로토타입 체인의 종점에 위치하는 객체는 Object.prototype의 빌트인 메서드를 사용할 수 없다. 따라서 Object.prototype의 빌트인 메서드는 간접적으로 호출하는 것이 좋다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 프로토타입이 null인 객체, 즉 프로토타입 체인의 종점에 위치하는 객체를 생성한다.</span>
  <span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>
  <span class="nx">obj</span><span class="p">.</span><span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">getPrototypeOf</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="o">===</span> <span class="kc">null</span><span class="p">);</span> <span class="c1">// true</span>

  <span class="c1">//obj는 Object.prototype의 빌트인 메서드를 사용할 수 없다.</span>
  <span class="c1">// console.log(obj.hasOwnProperty('a'));</span>
  <span class="c1">// TypeError: obj.hasOwnProperty is not a function</span>

  <span class="c1">// Object.prototype의 빌트인 메서드 간접 호출</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="dl">'</span><span class="s1">a</span><span class="dl">'</span><span class="p">));</span> <span class="c1">// true</span>
</code></pre></div></div>

<h3 id="19112-객체-리터럴-내부에서-__proto__에-의한-직접-상속">19.11.2 객체 리터럴 내부에서 __proto__에 의한 직접 상속</h3>
<p>ES6에서는 객체 리터럴 내부에서 __proto__ 접근자 프로퍼티를 사용하여 직접 상속을 구현할 수 있다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">myProto</span> <span class="o">=</span> <span class="p">{</span> <span class="na">x</span><span class="p">:</span> <span class="mi">10</span> <span class="p">};</span>
  <span class="c1">// 객체 리터럴에 의해 객체를 생성하면서 프로토타입을 지정하여 직접 상속받을 수 있다.</span>
  <span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">y</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span>
    <span class="c1">// 객체를 직접 상속받는다.</span>
    <span class="c1">// obj -&gt; mwProto -&gt; Object.prototype -&gt; null</span>
    <span class="na">__proto__</span><span class="p">:</span> <span class="nx">myProto</span>
  <span class="p">};</span>
  <span class="cm">/*
  위 코드는 아래와 동일하다.
  const obj = Object.create(myProto, {
    y: {value: 20, writable: ture, enumerable: true, configuable: true}
  });
  */</span>

 <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span> <span class="c1">// 10 20</span>
 <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">getPrototypeOf</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="o">===</span> <span class="nx">myProto</span><span class="p">);</span> <span class="c1">// ture</span>
</code></pre></div></div>

<h2 id="1912-정적-프로퍼티메서드">19.12 정적 프로퍼티/메서드</h2>
<p>정적 프로퍼티/메서드는 생성자 함수로 인스턴스를 생성하지 않아도 참조/호출할 수 있는 프로퍼티/메서드를 말한다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 생성자 함수</span>
  <span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="c1">// 프로토타입 메서드</span>
  <span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">sayHello</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Hi! My name is </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
  <span class="p">}</span>
  
  <span class="c1">// 정적 프로퍼티</span>
  <span class="nx">Person</span><span class="p">.</span><span class="nx">staticProp</span> <span class="o">=</span> <span class="s2">`static prop`</span> <span class="p">;</span>

  <span class="c1">// 정적 메서드</span>
  <span class="nx">Person</span><span class="p">.</span><span class="nx">staticMethod</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`staticMethod`</span><span class="p">);</span>
  <span class="p">};</span>

  <span class="kd">const</span> <span class="nx">me</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span><span class="p">);</span>

  <span class="c1">// 생성자 함수에 추가한 정적 프로퍼티/메서드는 생성자 함수로 참조/호출한다.</span>
  <span class="nx">Person</span><span class="p">.</span><span class="nx">staticMethod</span><span class="p">();</span> <span class="c1">// staticMethod</span>

  <span class="c1">// 정적 프로퍼티/메서드는 생성자 함수가 생성한 인스턴스로 참조/호출할 수 없다.</span>
  <span class="c1">// 인스턴스로 참조/호출할 수 있는 프로퍼티/메서드는 프로토타입 체인 상에 존재해야 한다.</span>
  <span class="nx">me</span><span class="p">.</span><span class="nx">staticMethod</span><span class="p">();</span> <span class="c1">// TypeError: me.staticMethod is not a function</span>
</code></pre></div></div>

<p>(그림 19-24)<br />
정적 프로퍼티/메서드는 인스턴스의 프로토타입 체인에 속한 객체의 프로퍼티/메서드가 아니므로 인스턴스로 접근할 수 없다.<br />
Object.create는 Object 생성자 함수의 정적 메서드이기 때문에 인스턴스, 즉 Object 생성자 함수가 생성한 객체로 호출할 수 없다.
반면에 Object.prototype.hasOwnProperty 메서드는 Object.prototype의 메서드로 모든 객체의 프로토타입 체인의 종점이기 때문에 모든 객체가 호출할 수 있다.</p>

<p>만약 인스턴스/프로토타입 메서드 내에서 this를 사용하지 않는다면 그 메서드는 정적 메서드로 변경할 수 있다. 메서드 내에서 인스턴스를 참조할 필요가 없다면 정적 메서드로 변경하여도 동작한다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">Foo</span><span class="p">()</span> <span class="p">{}</span>
  
  <span class="c1">// 프로토타입 메서드</span>
  <span class="c1">// this를 참조하지 않는 프로토타입 메서드는 정적 메서드로 변경하여도 동일한 효과를 얻을 수 있다.</span>
  <span class="nx">Foo</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">x</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">};</span>

  <span class="kd">const</span> <span class="nx">foo</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Foo</span><span class="p">();</span>
  <span class="c1">// 프로토타입 메서드를 호출하려면 인스턴스를 생성해야 한다.</span>
  <span class="nx">foo</span><span class="p">.</span><span class="nx">x</span><span class="p">();</span> <span class="c1">// x</span>

  <span class="c1">// 정적 메서드</span>
  <span class="nx">Foo</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">x</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="c1">// 정적 메서드는 인스턴스를 생성하지 않아도 호출할 수 있다.</span>
  <span class="nx">Foo</span><span class="p">.</span><span class="nx">x</span><span class="p">();</span> <span class="c1">// x</span>
</code></pre></div></div>

<p>MDN 문서를 참고하면 다음과 같이 표기법만드로도 정적 프로퍼티/메서드와 프로토타입 프로퍼티/메서드를 구별할 수 있다.<br />
(그림 19-25)<br />
참고로 프로토타입 프로퍼티/메서드를 표기할떄 prototype을 #으로 표기하는 경우도 있다. -&gt; Object#isPrototypeOf</p>

<h2 id="1913-프로퍼티-존재-확인">19.13 프로퍼티 존재 확인</h2>
<h3 id="19131-in-연산자">19.13.1 in 연산자</h3>
<p>in 연산자는 객체 내에 특정 프로퍼티가 존재하는지 여부를 확인한다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="cm">/**
   * key: 프로퍼티 키를 나타내는 문자열
   * object: 객체로 평가되는 표현식
  */</span>
  <span class="nx">key</span> <span class="k">in</span> <span class="nx">object</span>
</code></pre></div></div>
<p>in 연산자 대신 ES6에서 도입된 Reflect.has 메서드를 사용할 수도 있다.</p>
<h3 id="objectprototypehasownproperty-메서드">Object.prototype.hasOwnProperty 메서드</h3>]]></content><author><name>Hyejic</name></author><category term="js" /><category term="javascript" /><summary type="html"><![CDATA[모던 자바스크립트 Deep Dive 19장 프로토 타입 내용 정리]]></summary></entry><entry><title type="html">18장 함수와 일급 객체</title><link href="http://localhost:4000/js/modernJS18/" rel="alternate" type="text/html" title="18장 함수와 일급 객체" /><published>2022-05-08T00:00:00+09:00</published><updated>2022-05-08T00:00:00+09:00</updated><id>http://localhost:4000/js/modernJS18</id><content type="html" xml:base="http://localhost:4000/js/modernJS18/"><![CDATA[<p><br /></p>

<h1 id="18장-함수와-일급-객체">18장 함수와 일급 객체</h1>
<h2 id="181-일급-객체">18.1 일급 객체</h2>
<p>다음과 같은 조건을 만족하는 객체를 일급 객체라 한다.</p>
<ol>
  <li>무명의 리터럴로 생성할 수 있다. 즉 런타임에 생성이 가능</li>
  <li>변수나 자료구조에 저장할 수 있다.</li>
  <li>함수의 매개변수에 전달할 수 있다.</li>
  <li>함수의 반환값으로 사용할 수 있다.</li>
</ol>]]></content><author><name>Hyejic</name></author><category term="js" /><category term="javascript" /><summary type="html"><![CDATA[모던 자바스크립트 Deep Dive 18장 함수와 일급 객체 내용 정리]]></summary></entry><entry><title type="html">17장 생성자 함수에 의한 객체 생성</title><link href="http://localhost:4000/js/modernJS17/" rel="alternate" type="text/html" title="17장 생성자 함수에 의한 객체 생성" /><published>2022-05-04T00:00:00+09:00</published><updated>2022-05-04T00:00:00+09:00</updated><id>http://localhost:4000/js/modernJS17</id><content type="html" xml:base="http://localhost:4000/js/modernJS17/"><![CDATA[<p><br /></p>

<h1 id="17장-생성자-함수에-의한-객체-생성">17장 생성자 함수에 의한 객체 생성</h1>

<h2 id="171-object-생성자-함수">17.1 Object 생성자 함수</h2>
<p>new 연산자와 함께 Object 생성자 함수를 호출하면 빈 객체를 생성하여 반환한다. 생성자 함수에 의해 생성된 객체를 인스턴스라 한다.
객체를 생성하는 방법은 객체 리터럴을 사용하는 것이 더 간편하다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 빈 객체의 생성</span>
  <span class="kd">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">();</span>
  <span class="nx">person</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span> <span class="c1">// {name: "Choi"}</span>
</code></pre></div></div>
<p>자바스크립트는 Object 생성자 함수 이외에도 String, Number, Boolean, Function, Array, Date, RegExp, Promise 등의 빌트인 생성자 함수를 제공한다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">strObj</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">String</span><span class="p">(</span><span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">strObj</span><span class="p">);</span> <span class="c1">// object</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">strObj</span><span class="p">);</span> <span class="c1">// String{"Choi"}</span>

  <span class="kd">const</span> <span class="nx">numObj</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Number</span><span class="p">(</span><span class="mi">123</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">numObj</span><span class="p">);</span> <span class="c1">// object</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">numObj</span><span class="p">);</span> <span class="c1">// Number{123}</span>

  <span class="kd">const</span> <span class="nx">boolObj</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Boolean</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">boolObj</span><span class="p">);</span> <span class="c1">// object</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">boolObj</span><span class="p">);</span> <span class="c1">// Boolean{true}</span>

  <span class="kd">const</span> <span class="nx">func</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Function</span><span class="p">(</span><span class="dl">'</span><span class="s1">x</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">return x * x</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">func</span><span class="p">);</span> <span class="c1">// function</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">dir</span><span class="p">(</span><span class="nx">func</span><span class="p">);</span> <span class="c1">// f anonymous(x)</span>

  <span class="kd">const</span> <span class="nx">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">arr</span><span class="p">);</span> <span class="c1">// object</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr</span><span class="p">);</span> <span class="c1">// [1, 2, 3]</span>

  <span class="c1">// RegExp 객체(정규표현식) 생성</span>
  <span class="kd">const</span> <span class="nx">regExp</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">RegExp</span><span class="p">(</span><span class="sr">/ab+c/i</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">regExp</span><span class="p">);</span> <span class="c1">// object</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">regExp</span><span class="p">);</span> <span class="c1">// /ab+c/i</span>

  <span class="kd">const</span> <span class="nx">date</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">();</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">date</span><span class="p">);</span> <span class="c1">// object</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">date</span><span class="p">);</span> <span class="c1">// Wed May 04 2022 14:46:45 GMT+0900 (한국 표준시)</span>
</code></pre></div></div>

<h3 id="172-생성자-함수">17.2 생성자 함수</h3>
<h3 id="1721-객체-리터럴에-의한-객체-생성-방식의-문제점">17.2.1 객체 리터럴에 의한 객체 생성 방식의 문제점</h3>
<p>객체 리터럴에 의한 객체 생성 방식은 단 하나의 객체만 생성한다. 동일한 프로퍼티를 갖는 객체를 여러개 생성해야 하는 경우 매번 같은 프로퍼티를 기술해야 하기 떄문에 비효율적이다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">circle1</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">radius</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span>
    <span class="nx">getDiameter</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="mi">2</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">};</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">circle1</span><span class="p">.</span><span class="nx">getDiameter</span><span class="p">());</span> <span class="c1">// 10</span>

  <span class="kd">const</span> <span class="nx">circle2</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">radius</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span>
    <span class="nx">getDiameter</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="mi">2</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">};</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">circle2</span><span class="p">.</span><span class="nx">getDiameter</span><span class="p">());</span> <span class="c1">// 20</span>
</code></pre></div></div>
<p>위 예제에서 원을 표현한 객체인 circle1 객체와 circle2 객체는 객체 고유의 상태 데이터인 radius는 값이 다르지만, 프로퍼티 구조와 getDiameter 메서드가 동일하다. 이렇게 동일한 내용의 메서드를 가진 객체를 여러개 생성하여 사용하는것은 비효율적이다.</p>

<h3 id="1722-생성자-함수에-의한-객체-생성-방식의-장점">17.2.2 생성자 함수에 의한 객체 생성 방식의 장점</h3>
<p>프로퍼티 구조가 동일한 객체 여러 개를 간편하게 생성할 수 있다. 일반 함수와 동일한 방법으로 생성자 함수를 정의하고 <code class="language-plaintext highlighter-rouge">new 연산자와 함께 호출하면 해당 함수는 생성자 함수로 동작</code>한다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">Circle</span><span class="p">(</span><span class="nx">radius</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">radius</span> <span class="o">=</span> <span class="nx">radius</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">getDimeter</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="mi">2</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="p">;</span>
    <span class="p">};</span>
  <span class="p">}</span>
  <span class="c1">// 인스턴스 생성</span>
  <span class="kd">const</span> <span class="nx">circle1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Circle</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">circle2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Circle</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">circle1</span><span class="p">);</span> <span class="c1">// Circle {radius: 5, getDimeter: ƒ}</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">circle2</span><span class="p">);</span> <span class="c1">// Circle {radius: 10, getDimeter: ƒ}</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">circle1</span><span class="p">.</span><span class="nx">getDimeter</span><span class="p">());</span> <span class="c1">// 10</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">circle2</span><span class="p">.</span><span class="nx">getDimeter</span><span class="p">());</span> <span class="c1">// 20</span>


  <span class="kd">const</span> <span class="nx">circle3</span> <span class="o">=</span> <span class="nx">Circle</span><span class="p">(</span><span class="mi">30</span><span class="p">);</span> <span class="c1">// new 연사자와 함께 호출하지 않으면 일반 함수로 동작한다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">circle3</span><span class="p">);</span> <span class="c1">// undefined</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">radius</span><span class="p">);</span> <span class="c1">// 30</span>
</code></pre></div></div>

<h3 id="1723-생성자-함수의-인스턴스-생성-과정">17.2.3 생성자 함수의 인스턴스 생성 과정</h3>
<p>생성자 함수의 역할은 프로퍼티 구조가 동일한 인스터스를 생성하기 위한 템플릿으로서 동작하여 인스턴스를 생성하는 것과 생성된 인스턴스를 초기화(인스턴스 프로퍼티 추가 및 초기값 할당)하는 것이다. 자바스크립트 엔진은 다음과 같은 과정을 거쳐 암묵적인 처리를 통해 인스턴스를 생성하고 반환한다.</p>

<h4 id="1-인스턴스-생성과-this-바인딩">1. 인스턴스 생성과 this 바인딩</h4>
<p>암묵적으로 빈 객체 생성. 이 빈 객체가 생성자 함수가 생성한 인스턴스다. 그리고 인스턴스는 this에 바인딩 된다. 이 처리는 런타임 이전에 실행된다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">Circle</span><span class="p">(</span><span class="nx">radius</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 1. 암묵적 인스턴스 생성과 this 바인딩</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">);</span> <span class="c1">// Circle {}</span>

    <span class="k">this</span><span class="p">.</span><span class="nx">radius</span> <span class="o">=</span> <span class="nx">radius</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">getDimeter</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="mi">2</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="p">;</span>
    <span class="p">};</span>
  <span class="p">}</span>

  <span class="kd">const</span> <span class="nx">circle</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Circle</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span> 
</code></pre></div></div>

<h4 id="2-인스턴스-초기화">2. 인스턴스 초기화</h4>
<p>this에 바인딩되어 있는 인스턴스에 프로퍼티나 메서드를 추가하고 생성자 함수가 인수로 전달받은 초기값을 인스턴스 프로퍼티에 할당하여 초기화 하거나 고정값을 할당한다. 이 처리는 개발자가 기술.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">Circle</span><span class="p">(</span><span class="nx">radius</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 1. 암묵적 인스턴스 생성과 this 바인딩</span>

    <span class="c1">// 2. this에 바인딩 되어 있는 인스턴스를 초기화</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">radius</span> <span class="o">=</span> <span class="nx">radius</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">getDimeter</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="mi">2</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="p">;</span>
    <span class="p">};</span>
  <span class="p">}</span>

  <span class="kd">const</span> <span class="nx">circle</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Circle</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span> 
</code></pre></div></div>

<h4 id="3-인스턴스-반환">3. 인스턴스 반환</h4>
<p>생성자 함수 내부의 모든 처리가 끝나면 완성된 인스턴스가 바인딩된 this가 암묵적으로 반환된다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">Circle</span><span class="p">(</span><span class="nx">radius</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 1. 암묵적 인스턴스 생성과 this 바인딩</span>

    <span class="c1">// 2. this에 바인딩 되어 있는 인스턴스를 초기화</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">radius</span> <span class="o">=</span> <span class="nx">radius</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">getDimeter</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="mi">2</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="p">;</span>
    <span class="p">};</span>

    <span class="c1">// 3. 완성된 인스턴스가 바인딩된 this가 암묵적으로 반환</span>
    <span class="c1">// return {} // 명시적으로 객체를 반환하면 this 반환이 무시된다.</span>
  <span class="p">}</span>

  <span class="c1">// 인스턴스 생성. Circle 생성자 함수는 암묵적으로 this를 반환</span>
  <span class="kd">const</span> <span class="nx">circle</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Circle</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span> 
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">circle</span><span class="p">);</span> <span class="c1">// Circle {radius: 5, getDimeter: ƒ}</span>
</code></pre></div></div>
<p>생성자 함수 내부에서 명시적으로 다른 값을 반환하는 것은 생성자 함수의 기본 동작을 훼손한다. 따라서 return 문을 반드시 생략해야 한다.</p>

<h3 id="1724-내부-메서드call과-construct">17.2.4 내부 메서드[[call]]과 [[Construct]]</h3>
<p>함수는 객체이지만 일반 객체과는 다르다. 일반 객체는 호출할 수 없지만 함수는 호출할 수 있다. 따라서 함수는 내부 슬롯과 내부 메서드는 물론, 함수로서 동작하기 위해 함수 각체만을 위한 [[Ebvironment]], [[FormalParameters]] 등의 내부 슬롯과 [[Call]], [[Construct]] 같은 내부 메서드를 추가로 가지고있다. 일반 함수로서 호출되면 함수 객체의 내부 메서드 [[Call]]이 호출되고, new 연산와 함께 생성자 함수로서 호출하면 [[Construct]]가 호출된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{}</span>

  <span class="nx">foo</span><span class="p">();</span> <span class="c1">// 일반 함수로서 호출되면 [[Call]]이 호출</span>

  <span class="k">new</span> <span class="nx">foo</span><span class="p">();</span> <span class="c1">// 생성자 함수로서 호출하면 [[Construct]]가 호출</span>
</code></pre></div></div>

<p>[[Call]]울 갖는 함수 객체를 callable<br />
[[Construct]]를 갖는 함수 객체를 constructor<br />
[[Construct]]를 갖지 않는 함수 객체를 non-constructor<br />
callable - 호출할 수 있는 객체, 즉 함수<br />
constructor - 생성자 함수로서 호출할 수 있는 함수<br />
constructor - 생성자 함수로서 호출할 수 없는 함수<br />
함수 객체는 반드시 callable이면서 constructor이거나 callable이면서 non-constructor다. 즉 모든 함수 객체는 호출할 수 있지만 모든 함수 객체를 생성자 함수로서 호출할 수 있는 것은 아니다.</p>

<p>(그림 17-1)</p>

<h3 id="1725-constructor와-non-constructor의-구분">17.2.5 constructor와 non-constructor의 구분</h3>
<p>자바스크립트 엔진은 함수 정의를 평가하여 함수 객체를 생성할 때 함수 정의 방식에 따라 함수를 constructor와 non-constructor로 구분한다.</p>
<ul>
  <li>constructor : 함수 선언문, 함수 표현식, 클래스(클래스도 함수다)</li>
  <li>non-constructor : 메서드(ES6의 축약 표현), 화살표 함수</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 일반 함수 정의 : 함수 선언문, 함수 표현식</span>
  <span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{}</span>
  <span class="kd">const</span> <span class="nx">bar</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{};</span>
  <span class="c1">// 프로퍼티 x의 값으로 할단된 것은 일반 함수로 정의된 함수다. 이는 메서드로 인정하지 않는다.</span>
  <span class="kd">const</span> <span class="nx">baz</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">x</span><span class="p">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{}</span>
  <span class="p">}</span>
  <span class="c1">// 일반함수로 정의된 함수만이 constructor다.</span>
  <span class="k">new</span> <span class="nx">foo</span><span class="p">();</span> <span class="c1">// -&gt; foo {}</span>
  <span class="k">new</span> <span class="nx">bar</span><span class="p">();</span> <span class="c1">// -&gt; bar {}</span>
  <span class="k">new</span> <span class="nx">baz</span><span class="p">.</span><span class="nx">x</span><span class="p">();</span> <span class="c1">// -&gt; x {}</span>

  <span class="c1">// 화살표 함수 정의</span>
  <span class="kd">const</span> <span class="nx">arrow</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{};</span>
  <span class="k">new</span> <span class="nx">arrow</span><span class="p">();</span> <span class="c1">// TypeError: arrow is not a constructor</span>

  <span class="c1">// 메서드 정의: ES6의 메서드 축약 표현만 메서드로 인정한다.</span>
  <span class="c1">//  function x() {</span>
  <span class="c1">//   console.log</span>
  <span class="c1">// }</span>
  <span class="c1">// const obj = {x}</span>
  <span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">x</span><span class="p">()</span> <span class="p">{}</span>
  <span class="p">}</span>
  <span class="k">new</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">x</span><span class="p">();</span> <span class="c1">// TypeError: obj.x is not a constructor</span>
</code></pre></div></div>
<p>함수 정의 방식에 따라 constructor와 non-constructor를 구분한다.</p>

<h3 id="1726-new-연산자">17.2.6 new 연산자</h3>
<p>new 연산자와 함께 함수를 호출하면 해당 함수는 생서자 함수로 동작한다. new 연산자와 함께 호출하는 함수는 constructor이어야 한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 생성자 함수로서 정의하지 않는 일반 함수</span>
  <span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="c1">// 생성자 함수로서 정의하지 않은 일반 함수를 new 연산자와 함께 호출</span>
  <span class="kd">let</span> <span class="nx">inst</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">add</span><span class="p">();</span>

  <span class="c1">// 함수가 객체를 반환하지 않았으므로 반환문이 무시된다. 따라서 빈 객체가 생성되어 반환된다.</span>
  <span class="nx">consloe</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">inst</span><span class="p">);</span> <span class="c1">// {}</span>

  <span class="c1">// 객체를 반환하는 일반 함수</span>
  <span class="kd">function</span> <span class="nx">createUser</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">role</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">{</span><span class="nx">name</span><span class="p">,</span> <span class="nx">role</span><span class="p">};</span>
  <span class="p">}</span>

  <span class="c1">// 일반함수를 new 연산자와 함께 호출</span>
  <span class="nx">inst</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">createUser</span><span class="p">(</span><span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">admin</span><span class="dl">'</span><span class="p">);</span>
  <span class="c1">// 함수가 생성한 객체를 반환한다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">inst</span><span class="p">);</span> <span class="c1">// {name: "Choi", role: "admin"}</span>
</code></pre></div></div>

<p>new 연산자 없이 함수를 호출하면 일반 함수로 호출된다. -&gt; [[Call]]이 호출</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">Circle</span><span class="p">(</span><span class="nx">radius</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">radius</span> <span class="o">=</span> <span class="nx">radius</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">getDimeter</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="mi">2</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="p">;</span>
    <span class="p">};</span>
  <span class="p">}</span>

  <span class="c1">// new 연산자 없이 생성자 함수 호출 -&gt; 일반 함수 호출</span>
  <span class="kd">const</span> <span class="nx">circle</span> <span class="o">=</span> <span class="nx">Circle</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span> 
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">circle</span><span class="p">);</span> <span class="c1">// undefined</span>

  <span class="c1">// 일반 함수의 this는 전역 객체 window를 가리킨다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">radius</span><span class="p">);</span> <span class="c1">// 5</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">getDimeter</span><span class="p">());</span> <span class="c1">//10</span>

  <span class="nx">circle</span><span class="p">.</span><span class="nx">getDimeter</span><span class="p">();</span> <span class="c1">//  TypeError: Cannot read properties of undefined</span>
</code></pre></div></div>
<p>위 에제에서 radius 프로퍼티와 getDiameter 메서드는 전역객체의 프로퍼티와 메서드가 된다.<br />
일반 함수와 생성자 함수에 특별한 형식적 차이가 없으므로 생성자 함수는 일반적으로 첫 문자를 대문자로 기술하는 파스칼 케이스로 명명하여 일반 함수과 구별할 수 있도록 해야한다.</p>

<h3 id="1727-newtarget">17.2.7 new.target</h3>
<p>ES6는 new.target을 지원<br />
new.target은 this와 유사하게 construtor인 모든 함수 내부에서 암묵적인 지역 변수와 같이 사용되며 메타 프로퍼티라고 부른다.
함수 내부에서 new.target을 사용하면 new 연산자와 함께 생성자 함수로서 호출되었는지 확인할 수 있다.<br />
new 연산자와 함께 생성자 함수로서 호출되면 함수 내부의 new.target은 함수 자신을 가리킨다. new 연산자 없이 일반 함수로서 호출된 함수 내부의 new.target은 undefined다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">Circle</span><span class="p">(</span><span class="nx">radius</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">new</span><span class="p">.</span><span class="nx">target</span><span class="p">){</span>
      <span class="k">return</span> <span class="k">new</span> <span class="nx">Circle</span><span class="p">(</span><span class="nx">radius</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">radius</span> <span class="o">=</span> <span class="nx">radius</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">getDimeter</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="mi">2</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="p">;</span>
    <span class="p">};</span>
  <span class="p">}</span>

  <span class="c1">// new 연산자 없이 생성자 함수 호출해도 new.target을 통해 생성자 함수로서 호출</span>
  <span class="kd">const</span> <span class="nx">circle</span> <span class="o">=</span> <span class="nx">Circle</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span> 
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">circle</span><span class="p">.</span><span class="nx">getDimeter</span><span class="p">());</span> 
</code></pre></div></div>

<p>빌트인 생성자 함수(Object, String, Number, Boolean, Function, Array, Date, RegExp, Promise 등)는 new 연산자와 함께 호출되었는지를 확인한 후 적절한 값을 반환한다.<br />
Object, function 생성자 함수는 new 연산자가 없거나 있는경우 모두 동일하게 동작.<br />
String, Number, Boolean 생성자 함수는 new 연산자 없이 호출하면 문자열, 숫자, 불리언 값을 반환. -&gt; 데이터 타입 변환 가능</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">();</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span> <span class="c1">// {}</span>

  <span class="nx">obj</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">();</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span> <span class="c1">// {}</span>

  <span class="kd">let</span> <span class="nx">func</span> <span class="o">=</span> <span class="k">new</span> <span class="kd">function</span><span class="p">(</span><span class="dl">'</span><span class="s1">x</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">return x * x</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">func</span><span class="p">);</span> <span class="c1">// f anonymous(x) {return x * x}</span>

  <span class="nx">func</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="dl">'</span><span class="s1">x</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">return x * x</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">func</span><span class="p">);</span> <span class="c1">// f anonymous(x) {return x * x}</span>

  <span class="kd">const</span> <span class="nx">str</span> <span class="o">=</span> <span class="nb">String</span><span class="p">(</span><span class="mi">123</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">str</span><span class="p">,</span> <span class="k">typeof</span> <span class="nx">str</span><span class="p">);</span> <span class="c1">// 123 string</span>

  <span class="kd">const</span> <span class="nx">num</span> <span class="o">=</span> <span class="nb">Number</span><span class="p">(</span><span class="dl">'</span><span class="s1">123</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">num</span><span class="p">,</span> <span class="k">typeof</span> <span class="nx">num</span><span class="p">);</span> <span class="c1">// 123 number</span>

  <span class="kd">const</span> <span class="nx">bool</span><span class="p">;</span> <span class="o">=</span> <span class="nb">Boolean</span><span class="p">(</span><span class="dl">'</span><span class="s1">true</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">bool</span><span class="p">;,</span> <span class="k">typeof</span> <span class="nx">bool</span><span class="p">;);</span> <span class="c1">// true boolean</span>
</code></pre></div></div>

<h4 id="️-this">⭐️ this</h4>
<p><code class="language-plaintext highlighter-rouge">this</code>는 객체 자신의 프로퍼티나 메서드를 참조하기 위한 자기 참조 변수다. this 바인딩은 함수 호출 방식에 따라 동적으로 결정된다.</p>

<table>
  <thead>
    <tr>
      <th>함수 호출 방식</th>
      <th>this가 가리키는 값 (this 바인딩)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>일반 함수로서 호출</td>
      <td>전역 객체</td>
    </tr>
    <tr>
      <td>메서드로서 호출</td>
      <td>메서드를 호출한 객체(마침표 앞의 객체)</td>
    </tr>
    <tr>
      <td>생성자 함수로서 호출</td>
      <td>생성자 함수가 (미래에) 생성할 인스터스</td>
    </tr>
  </tbody>
</table>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="c1">// 일반 함수 -&gt; 전역 객체</span>
  <span class="nx">foo</span><span class="p">();</span> <span class="c1">// window</span>

  <span class="c1">// 메서드 -&gt; 메서드를 호출한 객체</span>
  <span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="nx">foo</span><span class="p">};</span> <span class="c1">// ES6 프로퍼티 축약 표현</span>
  <span class="nx">obj</span><span class="p">.</span><span class="nx">foo</span><span class="p">();</span> <span class="c1">// obj</span>

  <span class="c1">// 생성자 함수 -&gt; 생성될 인스턴스</span>
  <span class="kd">const</span> <span class="nx">inst</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">foo</span><span class="p">();</span> <span class="c1">// inst</span>

</code></pre></div></div>]]></content><author><name>Hyejic</name></author><category term="js" /><category term="javascript" /><summary type="html"><![CDATA[모던 자바스크립트 Deep Dive 17장 생성자 함수에 의한 객체 생성 내용 정리]]></summary></entry><entry><title type="html">16장 프로퍼티 어트리뷰트</title><link href="http://localhost:4000/js/modernJS16/" rel="alternate" type="text/html" title="16장 프로퍼티 어트리뷰트" /><published>2022-05-02T00:00:00+09:00</published><updated>2022-05-02T00:00:00+09:00</updated><id>http://localhost:4000/js/modernJS16</id><content type="html" xml:base="http://localhost:4000/js/modernJS16/"><![CDATA[<p><br /></p>

<h1 id="16장-프로퍼티-어트리뷰트">16장 프로퍼티 어트리뷰트</h1>

<h2 id="161-내부-슬롯과-내부-메서드">16.1 내부 슬롯과 내부 메서드</h2>
<p>내부 슬롯과 매부 메서드는 자바스크립트 엔진의 구현 알고리즘을 설명하기 위해 ECMAScript 사양에서 사용하는 의사 프로퍼티와 의사 메서드다.<br />
모든 객체는 [[Prototype]]이라는 내부 슬롯을 갖는다. 내부 슬롯은 자바스크립트 엔진의 내부 로직이므로 원칙적으로 직접 접근할 수 없지만 [[Prototype]] 내부 슬록의 경우, <strong>proto</strong> 를 통해 간접적으로 접근 할 수 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">o</span> <span class="o">=</span> <span class="p">{};</span>
  <span class="nx">o</span><span class="p">.[[</span><span class="nx">Prototype</span><span class="p">]]</span> <span class="c1">// SyntaxError: Unexpected token'['</span>
  <span class="nx">o</span><span class="p">.</span><span class="nx">__proto__</span> <span class="c1">// Object.prototype</span>
</code></pre></div></div>

<h3 id="162-프로퍼티-어트리뷰트와-프로퍼티-디스크립터-객체">16.2 프로퍼티 어트리뷰트와 프로퍼티 디스크립터 객체</h3>
<p>자바스크립트 엔진은 프로퍼티를 생성할 때 프로퍼티의 상태를 나타내는 프로퍼티 어트리뷰트를 기본값으로 자동 정의한다.<br />
프로퍼티 어트리뷰트 -&gt; [[Value]], [[Writable]], [[Enumerable]], [[Configurable]]<br />
프로퍼티 어트리뷰트는 내부 슬롯이기 때문에 직접 접근이 불가능하고 Object.getOwnPropertyDescriptor 메서드를 사용하여 간접적으로 접근 가능. 존재하지 않는 프로퍼티는 undefined 반환.<br />
<code class="language-plaintext highlighter-rouge">Object.getOwnPropertyDescriptor</code> 메서드를 호출할 때 매개변수 전달. 첫번째 객체의 참조, 두번째 프로퍼티 키(문자열)<br />
<code class="language-plaintext highlighter-rouge">Object.getOwnPropertyDescriptors</code> 모든 프로퍼티의 프로퍼티 어트리뷰트 정보 제공.(ES8에서 도입)</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span>
  <span class="p">};</span>
  <span class="c1">// 매개변수 전달. 첫번째 객체의 참조, 두번째 프로퍼티 키(문자열)</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">getOwnPropertyDescriptor</span><span class="p">(</span><span class="nx">person</span><span class="p">,</span> <span class="dl">'</span><span class="s1">name</span><span class="dl">'</span><span class="p">));</span> 
  <span class="c1">// {value: 'Choi', writable: true, enumerable: true, configurable: true}</span>

  <span class="c1">// 존재하지 않는 프로퍼티</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">getOwnPropertyDescriptor</span><span class="p">(</span><span class="nx">person</span><span class="p">,</span> <span class="dl">'</span><span class="s1">age</span><span class="dl">'</span><span class="p">));</span> 
  <span class="c1">// undefined</span>

  <span class="nx">person</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="mi">30</span><span class="p">;</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">getOwnPropertyDescriptors</span><span class="p">(</span><span class="nx">person</span><span class="p">));</span> 
  <span class="c1">// age: {value: 30, writable: true, enumerable: true, configurable: true}</span>
  <span class="c1">// name: {value: 'Choi', writable: true, enumerable: true, configurable: true}</span>

</code></pre></div></div>

<h2 id="163-데이터-프로퍼티와-접근자-프로퍼티">16.3 데이터 프로퍼티와 접근자 프로퍼티</h2>
<ul>
  <li>데이터 프로퍼티<br />
키와 값으로 구성된 일반적인 프로퍼티다. 지금까지 살펴본 모든 프로퍼티는 데이터 프로퍼티다.</li>
  <li>접근자 프로퍼티<br />
자체적으로는 값을 갖지 않고 다른 데이터 프로퍼티의 값을 읽거나 저장할 때 호출되는 접근자 함수로 구성된 프로퍼티다.</li>
</ul>

<h3 id="1631-데이터-프로퍼티">16.3.1 데이터 프로퍼티</h3>
<p>자바스크립트 엔진이 프로퍼티를 생성할 때 기본 값으로 자동 정의된다.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">프로퍼티<br />어트리뷰트</th>
      <th style="text-align: center">프로퍼티 디스크립터<br />객체의 프로퍼티</th>
      <th style="text-align: left">설명</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">[[Value]]</td>
      <td style="text-align: center">value</td>
      <td style="text-align: left">- 프로퍼티 키를 통해 <code class="language-plaintext highlighter-rouge">프로퍼티 값에 접근하면 반환</code>되는 값이다.<br /> - 프로퍼티 키를 통해 프로퍼티 값을 변경하면 [[Value]]에 값을 재할당한다. 이때 프로퍼티가 없으면 프로퍼티를 동적 생성하고 생성된 프로퍼티의 [[Value]]에 값을 저장한다.</td>
    </tr>
    <tr>
      <td style="text-align: center">[[Writable]]</td>
      <td style="text-align: center">writable</td>
      <td style="text-align: left">- 프로퍼티 <code class="language-plaintext highlighter-rouge">값의 변경 기능 여부</code>를 나타내며 불리언 값을 갖는다. <br /> [[Writable]]의 값이 false인 경우 해당 프로퍼티의 [[Value]]의 값을 변경할 수 없는 읽기 전용 프로퍼티가 된다.</td>
    </tr>
    <tr>
      <td style="text-align: center">[[Enumerable]]</td>
      <td style="text-align: center">enumerable</td>
      <td style="text-align: left">- 프로퍼티의 <code class="language-plaintext highlighter-rouge">열거 가능 여부</code>를 나타내며 불리언 값을 갖는다. <br /> - [[Enumerable]]의 값이 false인 경우 해당 프로퍼티는 for…in 문이나 Object.keys 메서드 등으로 열거할 수 없다.</td>
    </tr>
    <tr>
      <td style="text-align: center">[[Configurable]]</td>
      <td style="text-align: center">configurable</td>
      <td style="text-align: left">- 프로퍼티의 <code class="language-plaintext highlighter-rouge">재정의 기능 여부</code>를 나타내며 불리언 값을 갖는다. <br /> - [[Configurable]]의 값이 false인 경우 해당 프로퍼티의 삭제, 프로퍼티 어트리뷰트 값이 변경이 금지된다. 단, [[Writable]]이 true인 경우 [[Value]]의 변경과 [[Writable]]을 false로 변경하는 것은 허용된다.</td>
    </tr>
  </tbody>
</table>

<h3 id="1632-접근자-프로퍼티">16.3.2 접근자 프로퍼티</h3>
<p>저채적으로 값을 갖지 않고 다른 데이터 프로퍼티의 값을 읽거나 저장할 때 사용하는 접근자 함수로 구성된 프로퍼티다.<br />
접근자 함수는 getter/setter 함수라고도 부른다.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">프로퍼티<br />어트리뷰트</th>
      <th style="text-align: center">프로퍼티 디스크립터<br />객체의 프로퍼티</th>
      <th style="text-align: left">설명</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">[[Get]]</td>
      <td style="text-align: center">get</td>
      <td style="text-align: left">- 접근자 프로퍼티를 통해 데이터 프로퍼티의 <code class="language-plaintext highlighter-rouge">값을 읽을 때</code> 호출되는 접근자 함수다. 즉, 접근자 프로퍼티 키로 프로퍼티 값에 접근하면 프로퍼티 어트리뷰트 [[Get]]의 값, 즉 getter 함수가 호출되고 그 결과가 프로퍼티 값으로 반환된다.</td>
    </tr>
    <tr>
      <td style="text-align: center">[[Set]]</td>
      <td style="text-align: center">set</td>
      <td style="text-align: left">- 접근자 프로퍼티를 총해 데이터 프로퍼티의 <code class="language-plaintext highlighter-rouge">값을 저장할 때</code> 호출되는 접근다 함수다. 즉, 접근자 프로퍼티 값을 저장하면 프로퍼티 어트리뷰트 [[Set]]의 값, 즉 setter 함수가 호출되고 그 결과가 프로퍼티 값으로 저장된다.</td>
    </tr>
    <tr>
      <td style="text-align: center">[[Enumerable]]</td>
      <td style="text-align: center">enumerable</td>
      <td style="text-align: left">- 프로퍼티의 <code class="language-plaintext highlighter-rouge">열거 가능 여부</code>를 나타내며 불리언 값을 갖는다. <br /> - [[Enumerable]]의 값이 false인 경우 해당 프로퍼티는 for…in 문이나 Object.keys 메서드 등으로 열거할 수 없다.</td>
    </tr>
    <tr>
      <td style="text-align: center">[[Configurable]]</td>
      <td style="text-align: center">configurable</td>
      <td style="text-align: left">- 프로퍼티의 <code class="language-plaintext highlighter-rouge">재정의 기능 여부</code>를 나타내며 불리언 값을 갖는다. <br /> - [[Configurable]]의 값이 false인 경우 해당 프로퍼티의 삭제, 프로퍼티 어트리뷰트 값이 변경이 금지된다. 단, [[Writable]]이 true인 경우 [[Value]]의 변경과 [[Writable]]을 false로 변경하는 것은 허용된다.</td>
    </tr>
  </tbody>
</table>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">firstName</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Hyeji</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">lastName</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span><span class="p">,</span>
  
    <span class="c1">// getter 함수</span>
    <span class="kd">get</span> <span class="nx">fullName</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="s2">`</span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">firstName</span><span class="p">}</span><span class="s2"> </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">lastName</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span>
    <span class="p">},</span>

    <span class="c1">// setter 함수</span>
    <span class="kd">set</span> <span class="nx">fullName</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
      <span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">firstName</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span><span class="p">]</span> <span class="o">=</span> <span class="nx">name</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="dl">'</span><span class="s1"> </span><span class="dl">'</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">};</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">+</span> <span class="dl">'</span><span class="s1"> </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">person</span><span class="p">.</span><span class="nx">lastName</span><span class="p">);</span> <span class="c1">// Hyeji Choi</span>

  <span class="c1">// 접근자 프로퍼티 fullName에 값을 저장하면 setter함수가 호출</span>
  <span class="nx">person</span><span class="p">.</span><span class="nx">fullName</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Hyeji Kim</span><span class="dl">"</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span> <span class="c1">// {firstName: 'Hyeji', lastName: 'Kim'}</span>

  <span class="c1">// 접근자 프로퍼티 fullName에 접근하면 getter 함수가 호출된다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">fullName</span><span class="p">);</span> <span class="c1">// Hyeji Kim</span>

  <span class="c1">// firstName은 데이터 프로퍼티다.</span>
  <span class="kd">let</span> <span class="nx">descriptor</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">getOwnPropertyDescriptor</span><span class="p">(</span><span class="nx">person</span><span class="p">,</span> <span class="dl">'</span><span class="s1">firstName</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">descriptor</span><span class="p">);</span> 
  <span class="c1">// {value: 'Hyeji', writable: true, enumerable: true, configurable: true}</span>

  <span class="c1">// fullName은 접근자 프로퍼티</span>
  <span class="nx">descriptor</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">getOwnPropertyDescriptor</span><span class="p">(</span><span class="nx">person</span><span class="p">,</span> <span class="dl">'</span><span class="s1">fullName</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">descriptor</span><span class="p">);</span> 
  <span class="c1">// {enumerable: true, configurable: true, get: ƒ, set: ƒ}</span>

</code></pre></div></div>

<p>접근자 프로퍼티 fullName으로 프로퍼티 값에 접근하면 내부적으로 [[Get]] 내부 메서드가 호출되어 다음과 같이 동작한다.</p>
<ol>
  <li>프로퍼티 키가 유효한지 확인한다. 프포퍼티 키는 문자열 또는 심벌이어야 한다. 프로퍼티 키 “fullName”은 문자열이므로 유효한 프로퍼티 키다.</li>
  <li>프로토타입 체인에서 프로퍼티를 검색한다. person 객체에 fullName으로 프로퍼티가 존재한다.</li>
  <li>검색된 fullName 프로퍼티가 에이터 프로퍼티인지 접근자 프로퍼티인지 확인한다. fullName 프로퍼티는 접근자 프로퍼티다.</li>
  <li>접근자 프로퍼티 fullName의 프로퍼티 어트리뷰트 [[Get]]의 값, 즉 getter 함수를 호출하여 그 결과를 반환한다. 프로퍼티 fullName의 프로퍼티 어트리뷰트 [[Get]]의 값은 Object.getOwnPropertyDescriptor 메서드가 반환하는 프로퍼티 디스크립터 객체의 get 프로퍼티 값과 같다.</li>
</ol>

<h2 id="164-프로퍼티-정의">16.4 프로퍼티 정의</h2>
<p>Object.defineProperty 메서드를 사용하면 프로퍼티의 어트리뷰트를 정의할 수 있다. 인수로는 객체의 참조와 데이터 프로퍼티의 키인 문자열, 프로퍼티 디스크립터 객체를 전달한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{};</span>

  <span class="c1">// 데이터 프로퍼티 정의</span>
  <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">person</span><span class="p">,</span> <span class="dl">'</span><span class="s1">firstName</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">value</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Hyeji</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">writable</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="na">enumerable</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="na">configurable</span><span class="p">:</span> <span class="kc">true</span>
  <span class="p">});</span>

  <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">person</span><span class="p">,</span> <span class="dl">'</span><span class="s1">lastName</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">value</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span>
  <span class="p">});</span>

  <span class="kd">let</span> <span class="nx">descriptor</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">getOwnPropertyDescriptor</span><span class="p">(</span><span class="nx">person</span><span class="p">,</span> <span class="dl">'</span><span class="s1">firstName</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">descriptor</span><span class="p">);</span>
  <span class="c1">// {value: 'Hyeji', writable: true, enumerable: false, configurable: true}</span>

  <span class="c1">// 디스크립터 객체의 프포퍼티를 누락시키면 undefined, false가 기본값이다.</span>
  <span class="nx">descriptor</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">getOwnPropertyDescriptor</span><span class="p">(</span><span class="nx">person</span><span class="p">,</span> <span class="dl">'</span><span class="s1">lastName</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">descriptor</span><span class="p">);</span>
  <span class="c1">// {value: 'Choi', writable: false, enumerable: false, configurable: false}</span>
  
  <span class="c1">// [[Enumerable]]의 값이 false인 경우</span>
  <span class="c1">// 해당 프로퍼티는 for...in문이나 Object.keys 등으로 열거할 수 없다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">person</span><span class="p">))</span> <span class="c1">// ["firstName"]</span>

  <span class="c1">// [[Writable]]의 값이 false인 경우 해당 프로퍼티의 [[value]]값을 변경할 수 없다.</span>
  <span class="c1">// 변경할 수 없는 값을 변경하려고 하면 에러는 발생하지 않고 무시된다.</span>
  <span class="nx">person</span><span class="p">.</span><span class="nx">lastName</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Kim</span><span class="dl">'</span><span class="p">;</span>

  <span class="c1">// [[Configurable]]의 값이 false인 경우 해당 프로퍼티를 삭제할 수 없다.</span>
  <span class="c1">// false인 프로퍼티를 삭제하려고 하면 에러는 발생하지 않고 무시된다.</span>
  <span class="k">delete</span> <span class="nx">person</span><span class="p">.</span><span class="nx">lastName</span><span class="p">;</span>

  <span class="c1">// [[Configurable]]의 값이 false인 경우 해당 프로퍼티를 재정의 할 수 없다.</span>
  <span class="c1">// Object.getOwnPropertyDescriptor(person, 'lastName', {enumerable: ture});</span>
  <span class="c1">// Uncaught TypeError: Cannot redefine property: lastName</span>

  <span class="nx">descriptor</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">getOwnPropertyDescriptor</span><span class="p">(</span><span class="nx">person</span><span class="p">,</span> <span class="dl">'</span><span class="s1">lastName</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">descriptor</span><span class="p">);</span>
  <span class="c1">// {value: 'Choi', writable: false, enumerable: false, configurable: false}</span>

  <span class="c1">// 접근자 프로퍼티</span>
  <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">person</span><span class="p">,</span> <span class="dl">'</span><span class="s1">fullName</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
    <span class="c1">// getter</span>
    <span class="kd">get</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="s2">`</span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">firstName</span><span class="p">}</span><span class="s2"> </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">lastName</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span>
    <span class="p">},</span>

    <span class="c1">// setter 함수</span>
    <span class="kd">set</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
      <span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">firstName</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span><span class="p">]</span> <span class="o">=</span> <span class="nx">name</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="dl">'</span><span class="s1"> </span><span class="dl">'</span><span class="p">);</span>
    <span class="p">},</span>
    <span class="na">enumerable</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="na">configurable</span><span class="p">:</span> <span class="kc">true</span>
  <span class="p">});</span>

  <span class="nx">descriptor</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">getOwnPropertyDescriptor</span><span class="p">(</span><span class="nx">person</span><span class="p">,</span> <span class="dl">'</span><span class="s1">fullName</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">fullName</span><span class="dl">'</span><span class="p">,</span> <span class="nx">descriptor</span><span class="p">);</span>
  <span class="c1">// fullName {enumerable: true, configurable: true, get: ƒ, set: ƒ}</span>

  <span class="nx">person</span><span class="p">.</span><span class="nx">fullName</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Hyeji Choi</span><span class="dl">'</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span>
  <span class="c1">// fullName {enumerable: true, configurable: true, get: ƒ, set: ƒ}</span>
</code></pre></div></div>

<p>프로퍼티 디스크립터 객체에서 생략된 어트리뷰트는 다음과 같이 기본값이 적용된다.</p>
<ul>
  <li>value, get, set -&gt; undefined</li>
  <li>writable, enumerable, configurable -&gt; false</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">Object.defineProperties</code> 메서드를 사용하면 여러개의 프로퍼티를 한 번에 정의할 수 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{};</span>

  <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperties</span><span class="p">(</span><span class="nx">person</span><span class="p">,</span> <span class="p">{</span>
    <span class="c1">// 데이터 프로퍼티 정의</span>
    <span class="na">firstName</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">value</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Hyeji</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">writable</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">enumerable</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">configurable</span><span class="p">:</span> <span class="kc">true</span>
    <span class="p">},</span>
    <span class="na">lastName</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">value</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">writable</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">enumerable</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">configurable</span><span class="p">:</span> <span class="kc">true</span>
    <span class="p">},</span>
    <span class="c1">// 접근자 프로퍼티 정의</span>
    <span class="na">fullName</span><span class="p">:</span> <span class="p">{</span>
      <span class="kd">get</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s2">`</span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">firstName</span><span class="p">}</span><span class="s2"> </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">lastName</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span>
      <span class="p">},</span>

      <span class="kd">set</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
        <span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">firstName</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span><span class="p">]</span> <span class="o">=</span> <span class="nx">name</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="dl">'</span><span class="s1"> </span><span class="dl">'</span><span class="p">);</span>
      <span class="p">},</span>
      <span class="na">enumerable</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">configurable</span><span class="p">:</span> <span class="kc">true</span>
    <span class="p">}</span>
  <span class="p">});</span>

  <span class="nx">person</span><span class="p">.</span><span class="nx">fullName</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Hyeji Choi</span><span class="dl">'</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span>
  <span class="c1">// {firstName: 'Hyeji', lastName: 'Choi'}</span>
</code></pre></div></div>

<h2 id="165-객체-변경-방지">16.5 객체 변경 방지</h2>
<p>자바스크립트는 객체의 변경을 방지하는 다양한 메서드를 제공한다. 객체 변경 방지 메서드들은 객체의 변경을 금지하는 강도가 다르다.
구분 | 메서드 | 프로퍼티 추가 | 프로퍼티 삭제 | 프로퍼티 값 읽기 | 프로퍼티 값 쓰기 | 프로퍼티 어트리뷰트 재정의
:–: | :–: | :–: | :–: | :–: | :–: | :–:
객체 확장 금지 | Object.preventExtensions | X | O | O | O | O
객체 밀봉 | Object.seal | X | X | O | O | X
객체 동결 | Object.freeze | X | X | O | X | X</p>

<h3 id="1651-객체-확장-금지">16.5.1 객체 확장 금지</h3>
<p>Object.preventExtensions 메서드는 객체의 확장을 금지한다. 즉, 확장이 금지된 객체는 프로퍼티 추가가 금지된다.<br />
Object.isExtensible 메서드로 확장 가능한 객체인지 확인 가능.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span> <span class="p">};</span>

  <span class="c1">// 확장 가능한 객체인지 확인 가능</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">isExtensible</span><span class="p">(</span><span class="nx">person</span><span class="p">));</span> <span class="c1">// true</span>

  <span class="c1">// person 객체의 확장을 금지 시킴.</span>
  <span class="nb">Object</span><span class="p">.</span><span class="nx">preventExtensions</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">isExtensible</span><span class="p">(</span><span class="nx">person</span><span class="p">));</span> <span class="c1">// false -&gt; 확장 금지 상태</span>

  <span class="nx">person</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span> <span class="c1">// 프로퍼티 추가 금지. 에러 없이 무시된다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span> <span class="c1">// {name: "Choi"}</span>

  <span class="c1">// 프로퍼티 추가는 금지되지만 삭제는 가능.</span>
  <span class="k">delete</span> <span class="nx">person</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span> <span class="c1">// {}</span>

  <span class="c1">// 프로퍼티 정의에 의한 프로퍼티 추가도 금지된다.</span>
  <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">person</span><span class="p">,</span> <span class="dl">'</span><span class="s1">age</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span> <span class="na">value</span><span class="p">:</span> <span class="mi">20</span> <span class="p">});</span>
  <span class="c1">// TypeError: Cannot define property age, object is not extensible</span>
</code></pre></div></div>

<h3 id="1652-객체-밀봉">16.5.2 객체 밀봉</h3>
<p>객체 밀봉이란 프로퍼티 <code class="language-plaintext highlighter-rouge">추가 및 삭제</code>와 프로퍼티 어트리뷰트 <code class="language-plaintext highlighter-rouge">재정의 금지</code>를 의미한다. 밀봉된 객체는 <code class="language-plaintext highlighter-rouge">읽기와 쓰기만 가능</code>하다.<br />
Object.isSealed 메서드로 밀봉된 객체인지 확인 가능.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span> <span class="p">};</span>

  <span class="c1">// person 객체는 밀봉된 객체가 아니다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">isSealed</span><span class="p">(</span><span class="nx">person</span><span class="p">));</span> <span class="c1">// false</span>

  <span class="c1">// person 객체를 밀봉</span>
  <span class="nb">Object</span><span class="p">.</span><span class="nx">seal</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">isSealed</span><span class="p">(</span><span class="nx">person</span><span class="p">));</span> <span class="c1">// true</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">getOwnPropertyDescriptors</span><span class="p">(</span><span class="nx">person</span><span class="p">));</span> 
  <span class="c1">// name: {value: 'Choi', writable: true, enumerable: true, configurable: false}</span>

  <span class="c1">// 프로퍼티 추가 금지</span>
  <span class="nx">person</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span> <span class="c1">// 무시</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span> <span class="c1">// {name: "Choi"}</span>

  <span class="c1">// 프로퍼티 삭제 금지</span>
  <span class="k">delete</span> <span class="nx">person</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span> <span class="c1">// 무시</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span> <span class="c1">// {name: "Choi"}</span>

  <span class="c1">// 프로퍼티 값 갱신 가능</span>
  <span class="nx">person</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Kim</span><span class="dl">'</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span> <span class="c1">// {name: "Kim"}</span>

  <span class="c1">// 프로퍼티 재정의 금지</span>
  <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">person</span><span class="p">,</span> <span class="dl">'</span><span class="s1">name</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span> <span class="na">configurable</span><span class="p">:</span> <span class="kc">true</span> <span class="p">});</span>
  <span class="c1">// TypeError: Cannot redefine property: name</span>
</code></pre></div></div>

<h3 id="1653-객체-동결">16.5.3 객체 동결</h3>
<p>객체 동결이란 프로퍼티 <code class="language-plaintext highlighter-rouge">추가 및 삭제</code>와 프로퍼티 어트리뷰트 <code class="language-plaintext highlighter-rouge">재정의</code> 금지, 프로퍼티 <code class="language-plaintext highlighter-rouge">값 갱신 금지</code>를 의미한다. 동결된 객체는 <code class="language-plaintext highlighter-rouge">읽기만 가능.</code><br />
Object.isFrozen 메서드로 동결된 객체인지 확인 가능.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span> <span class="p">};</span>

  <span class="c1">// person 객체는 동결된 객체가 아니다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">isFrozen</span><span class="p">(</span><span class="nx">person</span><span class="p">));</span> <span class="c1">// false</span>

  <span class="c1">// person 객체를 동결</span>
  <span class="nb">Object</span><span class="p">.</span><span class="nx">freeze</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">isFrozen</span><span class="p">(</span><span class="nx">person</span><span class="p">));</span> <span class="c1">// true</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">getOwnPropertyDescriptors</span><span class="p">(</span><span class="nx">person</span><span class="p">));</span> 
  <span class="c1">// name: {value: 'Choi', writable: false, enumerable: true, configurable: false}</span>

  <span class="c1">// 프로퍼티 추가 금지</span>
  <span class="nx">person</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span> <span class="c1">// 무시</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span> <span class="c1">// {name: "Choi"}</span>

  <span class="c1">// 프로퍼티 삭제 금지</span>
  <span class="k">delete</span> <span class="nx">person</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span> <span class="c1">// 무시</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span> <span class="c1">// {name: "Choi"}</span>

  <span class="c1">// 프로퍼티 값 갱신 금지</span>
  <span class="nx">person</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Kim</span><span class="dl">'</span><span class="p">;</span> <span class="c1">// 무시</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span> <span class="c1">// {name: "Choi"}</span>

  <span class="c1">// 프로퍼티 재정의 금지</span>
  <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">person</span><span class="p">,</span> <span class="dl">'</span><span class="s1">name</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span> <span class="na">configurable</span><span class="p">:</span> <span class="kc">true</span> <span class="p">});</span>
  <span class="c1">// TypeError: Cannot redefine property: name</span>
</code></pre></div></div>

<h3 id="1654-불변-객체">16.5.4 불변 객체</h3>
<p>변경 방지 메서드 들은 얕은 변경 방지로 중첩된 객체에는 영향을 주지 못한다. 중첩 객체까지 영향을 주려면 객체를 값으로 갖는 모든 프로퍼티에 대해 재귀적으로 메서드를 호출해야 한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 객체 동결 재귀적 호출</span>
  <span class="kd">function</span> <span class="nx">deepFreeze</span><span class="p">(</span><span class="nx">target</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 객체이고 동결되지 않은 객체만 동결한다.</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">target</span> <span class="o">&amp;&amp;</span> <span class="k">typeof</span> <span class="nx">target</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">object</span><span class="dl">'</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nb">Object</span><span class="p">.</span><span class="nx">isFrozen</span><span class="p">(</span><span class="nx">target</span><span class="p">))</span> <span class="p">{</span>
      <span class="nb">Object</span><span class="p">.</span><span class="nx">freeze</span><span class="p">(</span><span class="nx">target</span><span class="p">);</span>
      <span class="c1">// 모든 프로퍼티를 순회하여 재귀적으로 동결.</span>
      <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">target</span><span class="p">).</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">key</span> <span class="o">=&gt;</span> <span class="nx">deepFreeze</span><span class="p">(</span><span class="nx">target</span><span class="p">[</span><span class="nx">key</span><span class="p">]));</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">target</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="kd">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">address</span><span class="p">:</span> <span class="p">{</span><span class="na">city</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Seoul</span><span class="dl">'</span><span class="p">}</span>
  <span class="p">};</span>

  <span class="c1">// 깊은 객체 동결</span>
  <span class="nx">deepFreeze</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">isFrozen</span><span class="p">(</span><span class="nx">person</span><span class="p">));</span> <span class="c1">// true</span>
  <span class="c1">// 중첩된 객체까지 동결</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">isFrozen</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">address</span><span class="p">));</span> <span class="c1">// true</span>

  <span class="nx">person</span><span class="p">.</span><span class="nx">address</span><span class="p">.</span><span class="nx">city</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Busan</span><span class="dl">'</span><span class="p">;</span> <span class="c1">// 추가,삭제,재할당,갱신 금지 -&gt; 무시</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span> <span class="c1">// {name: 'Choi', address: {city: 'Seoul'}}</span>

</code></pre></div></div>]]></content><author><name>Hyejic</name></author><category term="js" /><category term="javascript" /><summary type="html"><![CDATA[모던 자바스크립트 Deep Dive 16장 프로퍼티 어트리뷰트 내용 정리]]></summary></entry><entry><title type="html">15장 let, const 키워드와 블록 레벨 스코프</title><link href="http://localhost:4000/js/modernJS15/" rel="alternate" type="text/html" title="15장 let, const 키워드와 블록 레벨 스코프" /><published>2022-04-26T00:00:00+09:00</published><updated>2022-04-26T00:00:00+09:00</updated><id>http://localhost:4000/js/modernJS15</id><content type="html" xml:base="http://localhost:4000/js/modernJS15/"><![CDATA[<p><br /></p>

<h1 id="15장-let-const-키워드와-블록-레벨-스코프">15장 let, const 키워드와 블록 레벨 스코프</h1>

<h2 id="151-var-키워드로-선언한-변수의-문제점">15.1 var 키워드로 선언한 변수의 문제점</h2>
<h3 id="1511-변수-중복-선언-허용">15.1.1 변수 중복 선언 허용</h3>
<p>var 키워드로 선언한 변수는 중복 선언이 가능하다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="kd">var</span> <span class="nx">y</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

  <span class="c1">// var 키워드로 선언된 변수는 같은 스코프 내에서 중복 선언을 허용</span>
  <span class="c1">// 초기화 문이 있는 경우 자바스크립트 엔지에 의해 var 키워드가 없는 것처럼 동작. 재선언.</span>
  <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
  <span class="c1">// 초기화문이 없는 변수 선언문은 무시된다.</span>
  <span class="kd">var</span> <span class="nx">y</span><span class="p">;</span> 

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span> <span class="c1">// 100</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">y</span><span class="p">);</span> <span class="c1">// 1</span>
</code></pre></div></div>
<p>위 예제와 같이 동일한 이름의 변수를 중복 선언하면서 값까지 할당했다면 의도치 않게 먼저 선언된 변수 값이 변경되는 부작용 발생.</p>

<h3 id="1512-함수-레벨-스코프">15.1.2 함수 레벨 스코프</h3>
<p>var 키워드로 선언한 변수는 오로지 함수의 코드 블록만을 지역 스코프로 인정한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

  <span class="k">if</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// var 키워드로 선언된 변수는 함수의 코드 블록만을 지역스코프로 인정하기 때문에 x 변수가 중복 선언된다.</span>
    <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="c1">// 10</span>
</code></pre></div></div>

<h3 id="1513-변수-호이스팅">15.1.3 변수 호이스팅</h3>
<p>변수 호이스팅에 의해 var 키워드로 선언한 변수는 변수 선언문이 이전에 참조할 수 있다. 단, 할당문 이전에 변수를 참조하면 언제나 undefined를 반환한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 이 시점에 호이스팅에 의해 foo변수가 선언</span>
  <span class="c1">// 변수 foo는 undefined로 초기화</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span> <span class="c1">// undefined</span>

  <span class="c1">// 변수에 값을 할당</span>
  <span class="nx">foo</span> <span class="o">=</span> <span class="mi">123</span><span class="p">;</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">)</span> <span class="c1">// 123</span>

  <span class="c1">// 변수 선언은 런타임 이전에 자바스크립트 엔진에 의해 암묵적으로 실행된다.</span>
  <span class="kd">var</span> <span class="nx">foo</span><span class="p">;</span>
</code></pre></div></div>
<p>변수 선언문 이전에 변수를 참조할 수 있지만 프로그램의 흐름상 맞지 않고 가독성을 떨어뜨리며 오류를 발생시킬 여지를 남긴다.</p>

<h2 id="152-let-키워드">15.2 let 키워드</h2>
<p>ES6에서 도입</p>

<h3 id="1521-변수-중복-선언-금지">15.2.1 변수 중복 선언 금지</h3>
<p>let 키워드로 이름이 같은 변수를 중복 선언하면 문법에러가 발생</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">let</span> <span class="nx">bar</span> <span class="o">=</span> <span class="mi">123</span><span class="p">;</span>
  
  <span class="kd">let</span> <span class="nx">bar</span> <span class="o">=</span> <span class="mi">456</span><span class="p">;</span> <span class="c1">// SyntaxError: Identifier 'bar' has already veen declared</span>
</code></pre></div></div>

<h3 id="1522-블록-레벨-스코프">15.2.2 블록 레벨 스코프</h3>
<p>let 키워드로 선언한 변수는 모든 코드 블록을 지역 스코프로 인정하는 블록 레벨 스코프를 따른다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">let</span> <span class="nx">foo</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// 전역변수</span>
  <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">foo</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="c1">// 지역변수</span>
    <span class="kd">let</span> <span class="nx">bar</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span> <span class="c1">// 지역변수</span>
  <span class="p">}</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span> <span class="c1">// 1</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">bar</span><span class="p">);</span> <span class="c1">// ReferenceError: bar is not defined -&gt; 전역에서 지역변수를 참조할 수 없다.</span>
</code></pre></div></div>

<p>함수도 코드 블록이으로 스코프를 따른다. 함수 내의 코드블록은 함수 레벨 스코프에 중첩된다.</p>

<p><img width="343" alt="그림 15-1 블록 레벨 스코프의 중첩" src="https://user-images.githubusercontent.com/44577555/165247412-a00c6168-efa6-4253-ac36-3a15f03ed5ae.png" /></p>

<h3 id="1523-변수-호이스팅">15.2.3 변수 호이스팅</h3>
<p>let 키워드로 선언한 변수는 변수 호이스팅이 발생하지 않는 것처럼 동작한다. 변수 선언문 이전에 참조하면 ReferenceError 발생.<br />
let 키워드 변수는 var 키워드 변수와 다르게 <code class="language-plaintext highlighter-rouge">선언 단계</code>와 <code class="language-plaintext highlighter-rouge">초기화 단계</code>가 <code class="language-plaintext highlighter-rouge">분리</code>되어 진행된다. 런타임 이전에 선언 단계가 먼저 실행되지만 초기화 단계는 변수 선언문에 도달했을 때 실행된다. 따라서 초기화 단계가 실행되기 전에 변수에 접근하면 참조에서가 발생한다. 스코프의 시작 지점부터 초기화 시작 지점까지 <code class="language-plaintext highlighter-rouge">변수를 참조할 수 없는 구간을 일시적 사각지대</code>라고 한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 초기화 이전의 일시적 사각지대에서는 참조할 수 없다. </span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span> <span class="c1">// ReferenceError: foo is not defined</span>
  
  <span class="kd">let</span> <span class="nx">foo</span><span class="p">;</span> <span class="c1">// 변수 선언문에서 초기화 단계가 실행</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span> <span class="c1">// undefined</span>

  <span class="nx">foo</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// 할당문에서 할단 단계 실행</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span> <span class="c1">// 1</span>
</code></pre></div></div>

<table>
  <thead>
    <tr>
      <th style="text-align: center">var 키워드 변수 생명주기</th>
      <th style="text-align: center">let 키워드 변수 생명주기</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"><img width="300" alt="var 키워드 변수 생명주기" src="https://user-images.githubusercontent.com/44577555/165249667-c6cebe00-cd26-406e-9d35-750d03cd8715.png" /></td>
      <td style="text-align: center"><img width="300" alt="let 키워드 변수 생명주기" src="https://user-images.githubusercontent.com/44577555/165249653-d750aacb-9dd8-4280-bd1c-3038170aa82e.png" /></td>
    </tr>
  </tbody>
</table>

<h3 id="1524-전역-객체와-let">15.2.4 전역 객체와 let</h3>
<p>let 키워드로 선언한 전역 변수는 전역 객체의 프로퍼티가 아니다. let 전역 변수는 보이지 않는 개념적인 블록 내에 존재하게 된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 브라우저 환경에서 실행</span>

  <span class="kd">let</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span> <span class="c1">// undefined -&gt; let, const로 선언한 변수는 전역 객체 window의 프로퍼티가 아니다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span> <span class="c1">// 1</span>
</code></pre></div></div>

<h2 id="153-const-키워드">15.3 const 키워드</h2>
<p>ES6에서 도입. const 키워드는 let 키워드와 대부분 동일하다.</p>

<h3 id="1531-선언과-초기화">15.3.1 선언과 초기화</h3>
<p>const 키워드로 선언한 변수는 반드시 선언과 동시에 초기화해야 한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 선언과 동시에 초기화를 하지 않으면 에러 발생</span>
  <span class="kd">const</span> <span class="nx">foo</span><span class="p">;</span> <span class="c1">// SyntaxError: Missing initializer in const declaration</span>
  <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span> <span class="c1">// ReferenceError: Cannot access 'foo' before initialization</span>
    <span class="kd">const</span> <span class="nx">foo</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span> <span class="c1">// 1</span>
  <span class="p">}</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span> <span class="c1">// ReferenceError: foo is not defined</span>

</code></pre></div></div>

<h3 id="1532-재할당-금지">15.3.2 재할당 금지</h3>
<p>var, let 키워드로 선언한 변수는 재할당이 자유롭지만 const 키워드로 선언한 변수는 재할당이 금지된다.</p>

<h3 id="1533-상수">15.3.3 상수</h3>
<p>const 키워드로 선언한 변수에 원시 값을 할당한 경우 변수 값을 변경할 수 없기때문에 상수를 표현하는 데 사용하기도 한다.<br />
상수는 재할당이 금지된 변수를 말한다. 상수는 상태 유지와 가독성, 유지보수의 편의를 위해 적극적으로 사용해야 한다. 일반적으로 상수의 이름은 대문자로 사용하고 여러 단어로 이뤄진 경우에는 스네이크 케이스로 표현한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 세율을 의미하는 0.1은 변경할 수 없는 상수로서 사용될 값</span>
  <span class="kd">const</span> <span class="nx">TAX_RATE</span> <span class="o">=</span> <span class="mf">0.1</span><span class="p">;</span>

  <span class="kd">let</span> <span class="nx">perTaxPrice</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>

  <span class="kd">let</span> <span class="nx">afterTaxPrice</span> <span class="o">=</span> <span class="nx">perTaxPrice</span> <span class="o">+</span> <span class="p">(</span><span class="nx">perTaxPrice</span> <span class="o">*</span> <span class="nx">TAX_RATE</span><span class="p">);</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">afterTaxPrice</span><span class="p">);</span> <span class="c1">// 110</span>
</code></pre></div></div>

<h3 id="1534-const-키워드와-객체">15.3.4 const 키워드와 객체</h3>
<p>const 키워드로 선언된 변수에 객체를 할당한 경우 값을 변경할 수 있다. 이때 객체가 변경되더라도 변수에 할당된 참조 값은 변경되지 않는다.<br />
const 키워드는 재할당을 금지할 뿐 “불변”을 의미하지는 않는다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span>
  <span class="p">};</span>

  <span class="nx">person</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Kim</span><span class="dl">'</span><span class="p">;</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span> <span class="c1">// {name: "Kim"}</span>
</code></pre></div></div>

<h2 id="154-var-vs-let-vs-const">15.4 var vs. let vs. const</h2>
<p>변수 선언에는 기본적으로 const를 사용하고 let은 재할당이 필요한 경우에 한정해 사용하는 것이 좋다.</p>
<ul>
  <li>ES6를 사용한다면 var 키워드를 사용하지 않는다.</li>
  <li>재할당이 필요한 경우에 한정해 let 키워드를 사용한다. 이때 변수의 스코프는 최대한 좁게 만든다.</li>
  <li>변경이 발생하지 않고 읽기 전용으로 사용하는 원시 값과 객체에는 const 키워드를 사용한다. const 키워드는 재할당을 금지하므로 var, let 키워드보다 안전하다.</li>
</ul>

<h2 id="변수-키워드-비교">변수 키워드 비교</h2>

<table>
  <thead>
    <tr>
      <th style="width:10%" class="text-center">키워드</th>
      <th style="width:10%" class="text-center">중복선언</th>
      <th style="width:10%" class="text-center">재할당</th>
      <th style="width:30%">스코프</th>
      <th style="width:40%">호이스팅</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td class="text-center">var</td>
      <td class="text-center">o</td>
      <td class="text-center">o</td>
      <td>함수의 코드 블록</td>
      <td>변수 선언문 이전에 참조 가능하고 할당문 이전에 참조하면 undefined 반환.</td>
    </tr>
    <tr>
      <td class="text-center">let</td>
      <td class="text-center">x</td>
      <td class="text-center">o</td>
      <td>모든 코드 블록(함수, if문, for문, while 문, try/catch문 등)</td>
      <td>호이스팅이 발생하지 않는 것처럼 동작한다.<br />선언단계와 초기화 단계가 분리되어 진행. <br />변수 선언 이전에 참조하면 참조 에러발생</td>
    </tr>
    <tr>
      <td class="text-center">const</td>
      <td class="text-center">x</td>
      <td class="text-center">x</td>
      <td>모든 코드 블록(함수, if문, for문, while 문, try/catch문 등)</td>
      <td>호이스팅이 발생하지 않는 것처럼 동작한다</td>
    </tr>
  </tbody>
</table>]]></content><author><name>Hyejic</name></author><category term="js" /><category term="javascript" /><summary type="html"><![CDATA[모던 자바스크립트 Deep Dive 15장 let, const 키워드와 블록 레벨 스코프 내용 정리]]></summary></entry><entry><title type="html">14장 전역 변수의 문제점</title><link href="http://localhost:4000/js/modernJS14/" rel="alternate" type="text/html" title="14장 전역 변수의 문제점" /><published>2022-04-25T00:00:00+09:00</published><updated>2022-04-25T00:00:00+09:00</updated><id>http://localhost:4000/js/modernJS14</id><content type="html" xml:base="http://localhost:4000/js/modernJS14/"><![CDATA[<p><br /></p>

<h1 id="14장-전역-변수의-문제점">14장 전역 변수의 문제점</h1>

<h2 id="141-변수의-생명-주기">14.1 변수의 생명 주기</h2>
<h3 id="1411-지역-변수의-생명-주기">14.1.1 지역 변수의 생명 주기</h3>
<p>변수는 자신이 선언된 위치에서 생성되고 소멸한다. 함수 내부에서 선언한 변수는 함수가 호출된 직후에 함수 몸체의 코드가 한 줄씩 순차적으로 실행되기 이전에 자스크립트 엔진에 의해 먼저 실행된다. 즉, 지역변수의 생명주기는 함수의 생명 주기와 일치한다.</p>

<p><img width="351" alt="14-1 지역 변수의 생명 주기" src="https://user-images.githubusercontent.com/44577555/165106439-35cda26f-b0b2-4f36-97ae-e730d2ab183f.png" /></p>

<p>변수는 메모리공간에 저장 되었다가 저장된 메모리 공간을 더이상 참조하지 않을 때 가비지 콜렉터에 의헤 해제되어 가용 메모리를 반환한다. 즉, 누군가가 메모리 공간을 참조하고 있으면 해제되지 않고 확보된 상태로 남아있게 되어 함수의 생명주기와 다를 수 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">global</span><span class="dl">'</span><span class="p">;</span>

  <span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span>  <span class="c1">// 🤔</span>
    <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">local</span><span class="dl">'</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="nx">foo</span><span class="p">();</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span> <span class="c1">// global</span>
</code></pre></div></div>

<p>위 예제에서 foo 함수 내부에서 선언된 지역 변수 x는 🤔 시점에 이미 선언되었고 undefined로 초기화되어 있다. x변수는 전역 변수 x가 아닌 지역 변수 x를 참조하고 할당문이 실행되기 전까지는 undefined 값을 갖는다. 이처럼 호이스팅은 스코프를 단위로 동작한다.</p>
<blockquote>
  <p><code class="language-plaintext highlighter-rouge">호이스팅?</code> 변수 선언이 스코프의 선두로 끌어 올려진 것처럼 동작하는 자바스크립트 고유의 특징</p>
</blockquote>

<h3 id="1412-전역-변수의-생명-주기">14.1.2 전역 변수의 생명 주기</h3>
<p>함수와 달리 전역 코드는 명시적인 호출 없이 실행된다. 전역 코드에는 반환문을 사용할 수 없으므로 마지막 문이 실행되어 더 이상 실행할 문이 없을 때 종료한다.<br />
var 키워드로 선언한 전역 변수는 전역 객체의 프로퍼티가 된다. 즉, 전역 변수의 생명 주기가 전역 객체의 생명 주기와 일치한다.</p>

<p><img width="420" alt="14-2 전역 변수의 생명 주기" src="https://user-images.githubusercontent.com/44577555/165118277-b36b8668-068f-42d8-b60d-8ef109348f5b.png" /></p>

<p>브라우저 환경에서 전역 객체는 window -&gt; var 키워드로 선언한 전역변수는 window의 프로퍼티이므로 생명주기는 전역 객체 window의 생명 주기와 같다.</p>

<h2 id="142-전역-변수의-문제점">14.2 전역 변수의 문제점</h2>
<ul>
  <li>암묵적 결합
    <ul>
      <li>전역 변수를 선언한 의도는 코드 어디서든 참조하고 할당할 수 있는 변수를 사용하겠다는 것. 모든 코드가 전역 변수를 참조하고 변경할 수 있는 암묵적 결합을 허용하는 것이다.</li>
    </ul>
  </li>
  <li>긴 생명 주기
    <ul>
      <li>전역 변수는 생명 주기가 길어서 메모리 리소스도 오랜 기간 소비한다. var 키워드는 중복 선언을 허용하므로 전역 변수로 선언했을때 변수 이름이 중복될 가능성이 있고 의도치 않은 재할당이 이뤄질 수 있다.</li>
    </ul>
  </li>
  <li>스코프 체인 상에서 종점에 존재
    <ul>
      <li>변수를 검색할 때 전역 변수가 가장 마지막에 검색된다. 즉 전역 변수의 검색 속도가 가장 느리다. (검색 시 지역 스코프에서 전역 스코프로 올라가기 때문)</li>
    </ul>
  </li>
  <li>네임스페이스 오염
    <ul>
      <li>자바스크립트는 파일이 분리되어 있다 해도 전역 스코프를 공유한다. 따라서 동일한 이름을 가진 변수나 함수가 같은 스코프에 존재할 수 있으며 예상치 못한 결과를 가져올 수 있다.</li>
    </ul>
  </li>
</ul>

<h2 id="143-전역-변수의-사용을-억제하는-방법">14.3 전역 변수의 사용을 억제하는 방법</h2>
<p>전역 변수를 반드시 사용해야 할 이유를 찾지 못한다면 지역 변수를 사용해야 한다. 변수의 스코프는 좁을수록 좋다.</p>

<h3 id="1431-즉시-실행-함수">14.3.1 즉시 실행 함수</h3>
<p>즉시 실행 함수는 단 한 번만 호출된다. 모든 코드를 즉시 실행 함수로 감싸면 모든 변수는 즉시 실행 함수의 지역 변수가 된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
  <span class="p">}());</span>
  
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span> <span class="c1">// ReferenceError: foo is not defined</span>
</code></pre></div></div>

<h3 id="1432-네임스페이스-객체">14.3.2 네임스페이스 객체</h3>
<p>전역에 네임스페이스 역할을 담당할 객체를 생성하고 전역 변수처럼 사용하고 싶은 변수를 프로퍼티로 추가하는 방법이다.
네임스페이스를 분리해서 식별자 충돌을 방지하는 효과는 있으나 네임스페이스 객체 자체가 전역 변수에 할당되므로 유용하지 않다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">MYAPP</span> <span class="o">=</span> <span class="p">{};</span>

  <span class="nx">MYAPP</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Choi</span><span class="dl">"</span><span class="p">;</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">MYAPP</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span> <span class="c1">// Choi</span>

</code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 계층적 구조 가능</span>
  <span class="kd">var</span> <span class="nx">MYAPP</span> <span class="o">=</span> <span class="p">{};</span>
  
  <span class="nx">MYAPP</span><span class="p">.</span><span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">address</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Seoul</span><span class="dl">'</span> 
  <span class="p">};</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">MYAPP</span><span class="p">.</span><span class="nx">person</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span> <span class="c1">// Choi</span>
</code></pre></div></div>

<h3 id="1433-모듈-패턴">14.3.3 모듈 패턴</h3>
<p><code class="language-plaintext highlighter-rouge">모듈 패턴</code>은 자바스크립트의 강력한 기능인 <code class="language-plaintext highlighter-rouge">클로저를 기반</code>으로 동작하고 전역 변수의 억제는 물론 <code class="language-plaintext highlighter-rouge">캡슐화</code>까지 구현할 수 있다. 모듈 패턴은 전역 네임스페이스의 오염을 막는 기능은 한정적이지만 정보 은닉을 구현하기 위해 사용한다.</p>
<blockquote>
  <p><code class="language-plaintext highlighter-rouge">캡슐화</code>는 객체의 상태를 나타내는 프로퍼티와 프로퍼티를 참조하고 조작할 수 있는 동작인 메서드를 하나로 묶는것을 말한다. 캡슐화는 객체의 특정 프로퍼티나 메서드를 감출 목적으로 사용하기도 하는데 이를 정보 은닉이라 한다.</p>
</blockquote>

<blockquote>
  <p>자바스크립트는 public, private, protected 등의 접근 제한자를 제공하지 않는다.</p>
</blockquote>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">Counter</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="c1">// private 변수</span>
    <span class="kd">var</span> <span class="nx">num</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="c1">// 외부로 공개할 데이터나 메서드를 프로퍼티로 추가한 객체를 반환한다.</span>
    <span class="c1">// public member</span>
    <span class="k">return</span> <span class="p">{</span>
      <span class="nx">increase</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="o">++</span><span class="nx">num</span><span class="p">;</span>
      <span class="p">},</span>
      <span class="nx">decrease</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="o">--</span><span class="nx">num</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}());</span>

  <span class="c1">// private 변수는 외부로 노출되지 않는다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">Counter</span><span class="p">.</span><span class="nx">num</span><span class="p">)</span> <span class="c1">// undefined</span>
  
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">Counter</span><span class="p">.</span><span class="nx">increase</span><span class="p">());</span> <span class="c1">// 1</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">Counter</span><span class="p">.</span><span class="nx">increase</span><span class="p">());</span> <span class="c1">// 2</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">Counter</span><span class="p">.</span><span class="nx">decrease</span><span class="p">());</span> <span class="c1">// 1</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">Counter</span><span class="p">.</span><span class="nx">decrease</span><span class="p">());</span> <span class="c1">// 0</span>
</code></pre></div></div>

<p>위 예제에서 외부에 노출하고 싶은 변수나 함수를 객체에 담아 프로퍼티를 퍼블릭 맴버로 만들었다.
노출하고 싶지 않은 변수나 함수는 반환하는 객체에 추가하지 않으면 외부에서 접근할 수 없는 프라이빗 맴버가 된다.</p>

<h3 id="1434-es6-모듈">14.3.4 ES6 모듈</h3>
<p>ES6 모듈은 파일 자체의 독자적인 모듈 스코프를 제공한다. script 테그에 type=”module” 어트리뷰트를 추가하면 로드된 자바스크립트 파일은 모듈로서 동작한다.</p>
<ul>
  <li>mjs 확장자 권장.</li>
  <li>구형 브라우저에서는 동작하지 않으며 브라우저의 ES6모듈 기능을 사용하더라도 트랜스파일링이나 번들링이 필요하다.</li>
</ul>]]></content><author><name>Hyejic</name></author><category term="js" /><category term="javascript" /><summary type="html"><![CDATA[모던 자바스크립트 Deep Dive 14장 전역 변수의 문제점 내용 정리]]></summary></entry><entry><title type="html">13장 스코프</title><link href="http://localhost:4000/js/modernJS13/" rel="alternate" type="text/html" title="13장 스코프" /><published>2022-04-20T00:00:00+09:00</published><updated>2022-04-20T00:00:00+09:00</updated><id>http://localhost:4000/js/modernJS13</id><content type="html" xml:base="http://localhost:4000/js/modernJS13/"><![CDATA[<p><br /></p>

<h1 id="13장-스코프">13장 스코프</h1>

<h2 id="131-스코프란">13.1 스코프란?</h2>
<p>모든 식별자(변수 이름, 함수 이름, 클래스 이름 등)는 자신이 선언된 위치에 의해 다른 코드가 식별자 자신을 참조할 수 있는 유효 범위가 결정된다. 이를 스코프라 한다. 즉, 스코프는 식별자가 유효한 범위를 말한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">global</span><span class="dl">'</span><span class="p">;</span>

  <span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">local</span><span class="dl">'</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="nx">foo</span><span class="p">();</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span>
</code></pre></div></div>

<p>위 예제에서 코드의 가장 바깥 영역에 선언된 x 변수는 어디서든 참조할 수 있다. 하지만 foo함수 내부에서 선언된 x 변수는 foo 함수 내부에서만 참조할 수 있고 foo 함수 외부에서는 참조할 수 없다. 이때 두 개의 x 변수는 식별자 이름이 동일하지만 자신이 유효한 범위, 즉 스코프가 다른 별개의 변수다.</p>

<h2 id="132-스코프의-종류">13.2 스코프의 종류</h2>
<p>스코프는 전역과 지역으로 구분할 수 있다.</p>

<p><img width="506" alt="스크린샷 2022-04-20 오후 11 31 08" src="https://user-images.githubusercontent.com/44577555/164254346-4d8f28f9-6a38-4db3-89dd-da025da9cc4e.png" /></p>

<h3 id="1321-전역과-전역-스코프">13.2.1 전역과 전역 스코프</h3>
<p>전역이란 코드의 가장 바깥 영역을 말한다. 전역에 변수를 선언하면 전역 스코프를 갖는 전역 변수가 되고 어디서든지 참조할 수 있다.</p>

<h3 id="1322-지역과-지역-스코프">13.2.2 지역과 지역 스코프</h3>
<p>지역이란 함수 몸체 내부를 말한다. 지역 변수는 자신의 지역 스코프와 하위 지역 스코프에서 유효하다.<br />
위의 예제(그림 13-2)에서 inner 함수 내부에서 선언된 x 변수 이외에 이름이 같은 전역 변수 x가 존재한다. 이때 inner 함수 내부에서 x 변수를 참조하면 전역 변수 x를 참조하는 것이 아니라 inner 함수 내부의 x 변수를 참조한다. 이는 자바스크립트 엔진이 스코프 체인을 통해 참조할 변수를 검색했기 때문인다.</p>

<h2 id="133-스코프-체인">13.3 스코프 체인</h2>
<p>함수는 중첩될 수 있으므로 함수의 지역 스코프도 중첩될 수 있다. 이는 스코프가 함수의 중첩에 의해 계층적 구조를 갖는다는 것을 의미한다. 모든 스코프는 하나의 계층적 구조로 연결되며, 모든 지역 스코프의 최상위 스코프는 전역 스코프다. 이렇게 스코프가 계층적으로 연결된 것을 스코프 체인이라 한다. 변수를 참조할 때 자바스크립트 엔진은 스코프 체인을 통해 변수를 참조하는 코드의 스코프에서 시작하여 상위 스코프 방향으로 이동하며 선언된 변수를 검색한다.</p>

<h3 id="1331-스코프-체인에-의한-변수-검색">13.3.1 스코프 체인에 의한 변수 검색</h3>
<p>자바스크립트 엔진은 스코프 체인을 따라 변수를 참조하는 코드의 스코프에서 시작해서 상위 스코프 방향으로 이동하며 선언된 변수를 검색한다. 상위 스코프에서 유효한 변수는 하위 스코프에서 자유롭게 참조할 수 있지만 하위 스코프에서 유효한 변수를 상위 스코프에서 참조할 수는 없다.</p>

<h3 id="1332-스코프-체인에-의한-함수-검색">13.3.2 스코프 체인에 의한 함수 검색</h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">global function foo</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">};</span>
  
  <span class="kd">function</span> <span class="nx">bar</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">local function foo</span><span class="dl">'</span><span class="p">);</span>
    <span class="p">};</span>
    <span class="nx">foo</span><span class="p">();</span>
  <span class="p">};</span>

  <span class="nx">bar</span><span class="p">();</span> <span class="c1">// local function foo</span>
</code></pre></div></div>
<p>함수도 식별자에 할당되기 때문에 스코프를 갖는다. 따라서 스코프를 “변수를 검색할 때 사용하는 규칙”이라고 표현하기보다는 “식별자를 검색하는 규칙”이라고 표현하는 편이 좀 더 적합하다.</p>

<h2 id="134-함수-레벨-스코프">13.4 함수 레벨 스코프</h2>
<p>지역은 함수 몸체 내부를 말하고 지역은 지역 스코프를 만든다고 했다. 이는 코드 블록이 아닌 함수에 의해서만 지역 스코프가 생성된다는 의미다.<br />
var 키워드로 선언된 변수는 오로지 함수의 코드 블록(함수 몸체)만을 지역 스코프로 인정한다. 이러한 특성을 함수 레벨 스코프라 한다. 따라서 아래 예제에서 if 문의 코드 블록 내에서 선언된 x 변수는 전역변수다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

  <span class="k">if</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span> <span class="c1">// 10 -&gt; x 변수 중복 선언으로 인해 값이 재 할당 되었다.</span>
</code></pre></div></div>

<h2 id="135-렉시컬-스코프">13.5 렉시컬 스코프</h2>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  
  <span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
    <span class="nx">bar</span><span class="p">();</span>
  <span class="p">}</span>

  <span class="kd">function</span> <span class="nx">bar</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="nx">foo</span><span class="p">();</span> <span class="c1">// ?</span>
  <span class="nx">bar</span><span class="p">();</span> <span class="c1">// ?</span>
</code></pre></div></div>
<p>위 예제의 실행 결과는 bar 함수의 상위 스코프가 무엇인지에 따라 결정된다.</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">함수를 어디서 호출했는지</code>에 따라 함수의 상위 스코프를 결정한다. (동적 스코프)</li>
  <li><code class="language-plaintext highlighter-rouge">함수를 어디서 정의했는지</code>에 따라 함수의 상위 스코프를 결정한다. (<code class="language-plaintext highlighter-rouge">렉시컬 스코프</code>, 정적 스코프)</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">자바스크립트</code>를 비롯한 대부분읜 프로그래밍 언어는 <code class="language-plaintext highlighter-rouge">렉시컬 스코프를 따른다.</code>
따라서 함수를 어디서 호출했는지가 아니라 함수를 어디서 정의했는지에 따라 상위 스코프를 결정한다. 함수가 호출된 위치는 상위 스코프 결정에 어떠한 영향도 주지 않는다. 이처럼 함수의 상위 스코프는 함수 정의가 실행될 때 정적으로 결정된다. 함수 정의가 실행되어 생성된 함수 객체는 이렇게 결정된 상위 스코프를 기억한다.<br />
위 예제의 bar 함수는 전역에서 정의되었고 자신이 정의된 스코프, 즉 전역 스코프를 기억한다. 그리고 bar 함수가 호풀되면 호출된 곳이 어디인지 관계없이 언제나 자신이 기억하고 있는 전역 스코프를 상위 스코프로 사용하기 때문에 전역 변수 x의 값 1을 두 번 출력한다.</p>]]></content><author><name>Hyejic</name></author><category term="js" /><category term="javascript" /><summary type="html"><![CDATA[모던 자바스크립트 Deep Dive 13장 스코프 내용 정리]]></summary></entry><entry><title type="html">12장 함수</title><link href="http://localhost:4000/js/modernJS12/" rel="alternate" type="text/html" title="12장 함수" /><published>2022-04-19T00:00:00+09:00</published><updated>2022-04-19T00:00:00+09:00</updated><id>http://localhost:4000/js/modernJS12</id><content type="html" xml:base="http://localhost:4000/js/modernJS12/"><![CDATA[<p><br /></p>

<h1 id="12장-함수">12장 함수</h1>

<h2 id="121-함수란">12.1 함수란?</h2>
<p>일련의 과정을 문으로 구현하고 코드 블록으로 감싸서 하나의 실행 단위로 정의한 것이다.<br />
함수 내부로 입력을 전달받는 변수를 매개변수, 입력을 인수, 출력을 반환겂이라 한다. 특정 함수를 구별하기 위해 식별자인 함수 이름을 사용할 수 있다.</p>

<p><img width="337" alt="스크린샷 2022-04-20 오전 1 29 12" src="https://user-images.githubusercontent.com/44577555/164051408-51c00262-288b-4f9f-9b70-946eed9a12f1.png" /></p>

<p>함수는 함수 정의를 통해 생성되고, 인수를 매개변수를 통해 함수에 전달하면서 함수의 실행을 명시적으로 지시하는것을 함수 호출이라 한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 함수 정의</span>
  <span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">){</span>
    <span class="k">return</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="c1">//</span>
  <span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">add</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span> <span class="c1">// 7</span>
</code></pre></div></div>

<h2 id="122-함수를-사용하는-이유">12.2 함수를 사용하는 이유</h2>
<p>함수는 필요할 때 몇 번이든 호출할 수 있으므로 코드의 재사용이라는 측면에서 매우 유용하다.<br />
코드의 가독성을 향상시키기 위해서는 함수의 이름을 변수 이름과 마찬가지로 자신의 역할을 잘 설명할 수 있도록 지어야 한다.</p>

<h2 id="123-함수-리터럴">12.3 함수 리터럴</h2>
<p>함수 리터럴은 function 키워드, 함수 이름, 매개변수 목록, 함수 몸체로 구성된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 변수에 함수 리터럴을 할당</span>
  <span class="kd">var</span> <span class="nx">f</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span><span class="p">;</span>
  <span class="p">}</span>
</code></pre></div></div>
<p><img width="542" alt="스크린샷 2022-04-20 오전 1 54 23" src="https://user-images.githubusercontent.com/44577555/164055686-a17681e9-8de1-4e08-912c-4bd34dc14f45.png" /></p>

<p>함수는 객체다. 일반 객체는 호출할 수 없지만 함수는 호출할 수 있다.</p>

<h2 id="124-함수-정의">12.4 함수 정의</h2>
<p>함수를 정의하는 방법 4가지</p>

<p><img width="558" alt="스크린샷 2022-04-20 오후 6 26 21" src="https://user-images.githubusercontent.com/44577555/164196982-5c51edad-c714-4562-b343-ccb68477e902.png" /></p>

<h3 id="1241-함수-선언문">12.4.1 함수 선언문</h3>
<p>함수 선언문은 함수 이름을 생략할 수 없다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 함수 선언문</span>
  <span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span><span class="p">;</span>
  <span class="p">}</span>
</code></pre></div></div>

<p>이름이 있는 기명 함수 리터럴은 코드의 문맥에 따라 함수 선언문 또는 함수 리터럴 표현식으로 해석된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 함수 선언문</span>
  <span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">foo</span><span class="dl">'</span><span class="p">);</span> <span class="p">}</span>
  <span class="nx">foo</span><span class="p">();</span> <span class="c1">// foo</span>
  <span class="c1">// 함수 리터럴을 피연산자로 사용하면 함수 선언문이 아니라 함수 리터럴 표현식으로 해석된다.</span>
  <span class="p">(</span><span class="kd">function</span> <span class="nx">bar</span><span class="p">()</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">bar</span><span class="dl">'</span><span class="p">);</span> <span class="p">});</span>
  <span class="nx">bar</span><span class="p">();</span> <span class="c1">// ReferenceError: bar is not defined</span>
</code></pre></div></div>

<p>함수 몸체 외부에서는 함수 이름으로 함수를 참조할 수 없으므로 함수 몸체 외부에서는 함수 이름으로 함수를 호출할 수 없다.<br />
자바스크립트 엔진은 생성된 함수를 호출하기 위해 함수 이름과 동일한 이름의 식별자를 암묵적으로 생성하고, 거기에 함수 객체를 할당한다.</p>

<p><img width="412" alt="스크린샷 2022-04-20 오후 7 21 58" src="https://user-images.githubusercontent.com/44577555/164208268-d64fdd7a-17ae-4d6e-b131-afdb762cffa7.png" /></p>

<p>함수 선언문으로 생성한 함수를 호출한 것은 함수 이름 add가 아니라 자바스크립트 엔진이 암묵적으로 생성한 식별자 add인 것이다.</p>

<h3 id="1242-함수-표현식">12.4.2 함수 표현식</h3>
<p>자바스크립트의 함수는 <code class="language-plaintext highlighter-rouge">일급 객체</code>이므로 함수 리터럴로 생성한 함수 객체를 변수에 할당할 수 있다. 이러한 함수 정의 방식을 함수 표현식이라 한다.<br />
함수 리터럴의 함수 이름은 생략할 수 있고 함수 표현식의 함수 리터럴은 함수 이름을 생략하는 것이 일반적이다.</p>
<blockquote>
  <p><code class="language-plaintext highlighter-rouge">일급객체</code>란 컴퓨터 프로그래밍 언어 디자인에서, 일급 객체(영어: first-class object)란 다른 객체들에 일반적으로 적용 가능한 연산을 모두 지원하는 객체를 가리킨다. 보통 함수에 인자로 넘기기, 수정하기, 변수에 대입하기와 같은 연산을 지원할 때 일급 객체라고 한다.</p>
</blockquote>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 함수 표현식</span>
  <span class="kd">var</span> <span class="nx">add</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span><span class="p">;</span>
  <span class="p">};</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">add</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">));</span> <span class="c1">// 7</span>
</code></pre></div></div>

<h3 id="1243-함수-생성-시점과-함수-호이스팅">12.4.3 함수 생성 시점과 함수 호이스팅</h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 함수 참조</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">dir</span><span class="p">(</span><span class="nx">add</span><span class="p">);</span> <span class="c1">// add(2, 5)</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">dir</span><span class="p">(</span><span class="nx">sub</span><span class="p">);</span> <span class="c1">// undefined</span>

  <span class="c1">// 함수 호출</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">add</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">));</span> <span class="c1">// 7</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">sub</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">));</span> <span class="c1">// TypeError: sub is not a function</span>

  <span class="c1">// 함수 선언문</span>
  <span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span><span class="p">;</span>
  <span class="p">};</span>
  <span class="c1">// 함수 표현식</span>
  <span class="kd">var</span> <span class="nx">sub</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">x</span> <span class="o">-</span> <span class="nx">y</span><span class="p">;</span>
  <span class="p">};</span>
</code></pre></div></div>
<p>함수 선언문으로 정의한 함수는 함수 선언문 이전에 호출할 수 있다. 그러나 함수 표현식으로 정의한 함수는 함수 표현식 이전에 호출할 수 없다. 생성 시점이 다르다.
<code class="language-plaintext highlighter-rouge">함수 선언문은 런타임 이전에 함수 객제가 먼저 생성</code>된다. 따라서 함수 선언문 이전에 함수를 참조할 수 있으며 호출할 수도 있다. 이처럼 <code class="language-plaintext highlighter-rouge">함수 선언문이 코드의 선두로 끌어 올려진 것차럼 동작</code>하는 자바스크립트 고유의 특징을 <code class="language-plaintext highlighter-rouge">함수 호이스팅</code>이라 한다.<br />
함수 표현식은 변수에 할당되는 값이 함수 리터럴인 문이다. 따라서 변수 선언은 런타임 이전에 실행되어 undefined로 초기화 되지만 변수 할당문의 값은 런타임에 평가되므로 함수 표현식의 함수 리터럴도 할당문이 실행되는 런타임 시점에 평가되어 함수 객체가 된다. 따라서 <code class="language-plaintext highlighter-rouge">함수 표현식으로 함수를 정의하면 함수 호이스팅이 아니라 변수 호이스팅이 발생</code>한다.
함수 표현식으로 정의한 함수는 반드시 함수 표현식 이후에 참조 또는 호출해야 한다.</p>

<h3 id="1244-function-생성자-함수">12.4.4 Function 생성자 함수</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">add</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Function</span><span class="p">(</span><span class="dl">'</span><span class="s1">x</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">y</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">return x + y</span><span class="dl">'</span><span class="p">);</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">add</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">));</span> <span class="c1">//7</span>
</code></pre></div></div>
<p>Function 생성자 함수로 함수를 생성하는 방식은 일반적이지 않으며 바람직 하지도 않다.</p>

<h3 id="1245-화살표-함수">12.4.5 화살표 함수</h3>
<p>ES6에서 도입된 화살표 함수는 function 키워드 대신 화살표(=&gt;)를 사용해 좀 더 간략한 방법으로 함수를 선언할 수 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">add</span> <span class="o">=</span> <span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">add</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">));</span> <span class="c1">// 7</span>
</code></pre></div></div>

<p>화살표 함수는 생성자 함수로 사용할 수 없고, 기존 함수와 this 바인딩 방식이 다르고, prototype 프로퍼티가 없으며 arguments 객체를 생성하지 않는다.</p>

<h2 id="125-함수-호출">12.5 함수 호출</h2>

<h3 id="1251-매개변수와-인수">12.5.1 매개변수와 인수</h3>
<p>함수를 실행하기 위해 필요한 값을 함수 외부에서 함수 내부로 전달할 필요가 있는 경우, 매개변수를 통해 인수를 전달한다.</p>

<p><img width="288" alt="스크린샷 2022-04-20 오후 9 15 31" src="https://user-images.githubusercontent.com/44577555/164228264-522a04e9-b40e-4b27-8a9a-79f0a091b8a1.png" /></p>

<p>함수가 호출될 때마다 매개변수는 이와 같은 단계를 거친다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">add</span><span class="p">(</span><span class="mi">2</span><span class="p">));</span> <span class="c1">// NaN -&gt; y값이 전달되지 않아서 y는 undefined로 초기화된 그대로이다. 따라서 2 + undefined와 같으므로 NaN이 반환된다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">add</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">));</span> <span class="c1">// 7 -&gt;  10 무시</span>

</code></pre></div></div>
<p>함수는 매개변수의 개수와 인수의 개수가 일치하는지 체크하지 않는다.<br />
전달되지 않은 매개변수는 undefined로 초기화된 그대로를 유지한다.<br />
매개변수보다 인수가 더 많은 경우 초과된 인수는 무시되지만 암묵적으로 arguments객체의 프로퍼티로 보관된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arguments</span><span class="p">);</span> <span class="c1">// Arguments(3) [2, 5, 10, callee: f, Symbol(Symbol.iterator): f]</span>
    <span class="k">return</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="nx">add</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span> <span class="c1">// 10은 매개변수에 할당 되지 않지만 arguemnts에 보관된다.</span>
</code></pre></div></div>

<h3 id="1252-인수-확인">12.5.2 인수 확인</h3>
<p>자바스크립트 문법상 어떠한 문제도 없으면 엔진은 아무런 이의제기 없이 코드를 실행한다. 따라서 자바스크립트의 경우 함수를 정의할 때 적절한 인수가 전달되었는지 확인할 필요가 있다.</p>
<h4 id="매개변수-타입체크">매개변수 타입체크</h4>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">x</span> <span class="o">!==</span> <span class="dl">'</span><span class="s1">number</span><span class="dl">'</span> <span class="o">||</span> <span class="k">typeof</span> <span class="nx">y</span> <span class="o">!==</span> <span class="dl">'</span><span class="s1">number</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">thorw</span> <span class="k">new</span> <span class="nx">TypeError</span><span class="p">(</span><span class="dl">'</span><span class="s1">인수는 모두 숫자값이어야 합니다.</span><span class="dl">'</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">add</span><span class="p">(</span><span class="mi">2</span><span class="p">));</span> <span class="c1">// TypeError: 인수는 모두 숫자값이어야 합니다.</span>
</code></pre></div></div>
<h4 id="단축-평가를-통해-기본값-할당">단축 평가를 통해 기본값 할당</h4>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">c</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">a</span> <span class="o">=</span> <span class="nx">a</span> <span class="o">||</span> <span class="mi">0</span><span class="p">;</span>
    <span class="nx">b</span> <span class="o">=</span> <span class="nx">b</span> <span class="o">||</span> <span class="mi">0</span><span class="p">;</span>
    <span class="nx">c</span> <span class="o">=</span> <span class="nx">c</span> <span class="o">||</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span> <span class="o">+</span> <span class="nx">c</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">));</span> <span class="c1">// 6</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">));</span> <span class="c1">// 3</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">add</span><span class="p">());</span> <span class="c1">// 0</span>
</code></pre></div></div>
<h4 id="매개변수-기본값-es6">매개변수 기본값 (ES6)</h4>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">a</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">b</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">c</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span> <span class="o">+</span> <span class="nx">c</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">));</span> <span class="c1">// 6</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">));</span> <span class="c1">// 3</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">add</span><span class="p">());</span> <span class="c1">// 0</span>
</code></pre></div></div>

<h3 id="1253-매개변수의-최대-개수">12.5.3 매개변수의 최대 개수</h3>
<p>ECMAScript 사양에서는 매개변수의 최대 개수에 대해 명시적으로 제한하고 있지 않지만 매개변수의 개수가 많다는 것은 함수가 여러가지 일을 한다는 증거이므로 바람직하지 않다. 이상적인 함수는 한 가지 일만 해야 하며 가급적 작게 만들어야 한다.</p>

<h3 id="1254-반환문">12.5.4 반환문</h3>
<p>함수는 return 키워드와 표현식으로 이뤄진 반환문을 사용해 실행 결과를 함수 외부로 반환할 수 있다.</p>

<h4 id="반환문의-역할">반환문의 역할</h4>
<ul>
  <li>반환문은 함수의 실행을 중단하고 함수 몸체를 빠져나간다. 따라서 반환문 이후에 다른 문이 존재하면 그 문은 실행되지 않고 무시된다.</li>
  <li>반환문은 return 키워드 뒤에 오는 표현식을 평가해 반환한다. return 키워드 뒤에 반환값으로 사용할 표현식을 명시적으로 지정하지 않으면 undefined가 반환된다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">multiply</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span><span class="p">;</span> <span class="c1">// 반환문</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">실행?</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// 실행되지 않는다.</span>
  <span class="p">}</span>
  <span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">multiply</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>  <span class="c1">// 반환된 값이 result 변수에 저장된다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span> <span class="c1">// 8</span>

  <span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span><span class="p">;</span>  <span class="c1">// return 키워드 생략 가능</span>
  <span class="p">}</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">());</span> <span class="c1">// undefined</span>
</code></pre></div></div>
<p>return 키워드와 반환값으로 사용할 표현식 사이에 줄바꿈이 있으면 세미콜론이 자동 삽입 되어서 의도하지 않은 결과가 발생할 수 있다.</p>

<h2 id="126-참조에-의한-전달과-외부-상태의-변경">12.6 참조에 의한 전달과 외부 상태의 변경</h2>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">changeVal</span><span class="p">(</span><span class="nx">primitive</span><span class="p">,</span> <span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">primitive</span> <span class="o">+=</span> <span class="mi">100</span><span class="p">;</span>
    <span class="nx">obj</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Kim</span><span class="dl">'</span><span class="p">;</span>
  <span class="p">};</span>

  <span class="kd">var</span> <span class="nx">num</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
  <span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span><span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Lee</span><span class="dl">'</span><span class="p">}</span> <span class="p">;</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">num</span><span class="p">)</span> <span class="c1">// 100</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">)</span> <span class="c1">// {name: "Lee"}</span>

  <span class="nx">changeVal</span><span class="p">(</span><span class="nx">num</span><span class="p">,</span> <span class="nx">person</span><span class="p">);</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">num</span><span class="p">)</span> <span class="c1">// 100 -&gt; 원시 값은 원본이 훼손되지 않는다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">)</span> <span class="c1">// {name: "Kim"} -&gt; 객체는 원본이 훼손된다.</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">원시 타입 인수</code>는 값 자체가 복사되어 매개변수에 전달되기 때문에 함수 몸체에서 그 값을 변경해도 <code class="language-plaintext highlighter-rouge">원본은 훼손되지 않는다.</code><br />
하지만 <code class="language-plaintext highlighter-rouge">객체 타입 인수</code>는 참조 값이 복사되어 매개변수에 전달되기 때문에 함수 몸체에서 참조 값을 통해 객체를 변경할 경우 <code class="language-plaintext highlighter-rouge">원본 훼손된다.</code> 이처럼 함수가 외부 상태를 변경하면 상태 변화를 추적하기 어렵다. 복잡한 코드에서 의도치 않은 객체의 변경을 추적하는 것은 어려운 일이다.</p>

<h3 id="해결방법">해결방법</h3>
<p>객체를 불변객체로 만들어 사용한다. 객체의 복사본을 새롭게 생성하여 객체를 마치 원시 값처럼 변경 불가능한 값으로 동작하게 만드는것이다. 객체의 상채 변경이 필요한 경우에는 깊은 복사를 통해 새로운 객체를 생성하고 재할당을 통해 교체한다.<br />
외부 상태를 변경하지 않고 외부 상태에 의존하지도 않는 함수를 순수 함수라고 한다.</p>

<h2 id="127-다양한-함수의-형태">12.7 다양한 함수의 형태</h2>
<h3 id="1271-즉시-실행-함수">12.7.1 즉시 실행 함수</h3>
<p>즉시 실행 함수는 단 한 번만 호출되며 다시 호출할 수 없다. 함수 이름이 없는 익명함수를 사용하는 것이 일반적이지만 기명 즉시 실행 함수도 사용할 수 있다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 익명 즉시 실행 함수</span>
  <span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
    <span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>

    <span class="k">return</span> <span class="nx">a</span> <span class="o">*</span> <span class="nx">b</span><span class="p">;</span>
  <span class="p">}());</span>

  <span class="c1">// rl명 즉시 실행 함수</span>
  <span class="p">(</span><span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
    <span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>

    <span class="k">return</span> <span class="nx">a</span> <span class="o">*</span> <span class="nx">b</span><span class="p">;</span>
  <span class="p">}());</span>

  <span class="nx">foo</span><span class="p">();</span> <span class="c1">// ReferenceError: foo is not defined  -&gt; </span>
</code></pre></div></div>
<p>기명 함수의 함수 이름은 함수 몸체에서만 참조할 수 있는 식별자이므로 즉시 실행 함수를 다시 호출 할 수 없다.</p>

<p>그룹 연산자로 함수를 묶은 이유는 먼저 함수 리터럴을 평가해서 함수 객체를 생성하기 위해서다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 가장 일반적인 방식</span>
  <span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="c1">// ...</span>
  <span class="p">}());</span>
</code></pre></div></div>

<h3 id="1272-재귀-함수">12.7.2 재귀 함수</h3>
<p>함수가 자기 자신을 호출하는 행위, 즉 재귀 호출을 수행하는 함수를 재귀 함수라고 한다. 재귀 함수는 반복되는 처리를 위해 사용한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 카운트 수행</span>
  <span class="kd">function</span> <span class="nx">countdown</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">n</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">n</span><span class="p">);</span>
    <span class="nx">countdown</span><span class="p">(</span><span class="nx">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span> <span class="c1">// 재귀 호출</span>
  <span class="p">};</span>

   <span class="nx">countdown</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</code></pre></div></div>

<p>재귀 함수는 자신을 무한 재귀 호출한다. 따라서 재귀 함수 내에는 재귀 호출을 멈출 수 있는 탈출 조건을 반드시 만들어야 한다.<br />
재귀 함수는 무산 반복에 빠질 위험이 있고, 스택 오버플로 에러를 발생시킬 수 있으므로 주의해서 사용해야 한다. 반복문을 사용하는 것보다 재귀 함수를 사용하는 편이 더 직관적으로 이해하기 쉬울 때만 한정적으로 사용하는 것이 바람직하다.</p>

<h3 id="1273-중첩-함수">12.7.3 중첩 함수</h3>
<p>함수 내부에 정의된 함수를 중첩 함수 또는 내부 함수라고 한다. 중첩 함수는 외부 함수 내부에서만 호출할 수 있으며, 일반적으로 중첩 함수는 자신을 포함하는 외부 함수를 돕는 헬퍼 함수의 역할을 한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">outer</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="c1">// 중첩 함수</span>
    <span class="kd">function</span> <span class="nx">inner</span><span class="p">()</span> <span class="p">{</span>
      <span class="kd">var</span> <span class="nx">y</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
      <span class="c1">// 외부함수의 변수를 참조할 수 있다.</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span><span class="p">);</span> <span class="c1">// 3</span>
    <span class="p">}</span>
    <span class="nx">inner</span><span class="p">();</span>
  <span class="p">}</span>

  <span class="nx">outer</span><span class="p">();</span>
</code></pre></div></div>

<h3 id="1274-콜백-함수">12.7.4 콜백 함수</h3>
<p>각 함수마다 수행하는 일이 다르지만 공통적으로 수행되어지는 일이 있다면 함수를 합성하는 것으로 해결할 수 있다.<br />
함수의 변하지 않는 공통 로직은 미지 정의해 두고, 경우에 따라 변경되는 로직은 추상화해서 함수 외부에서 함수 내부로 전달하는 것이다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 외부에서 전달받은 f를 n만큼 반복 호출한다.</span>
  <span class="c1">// 고차 함수</span>
  <span class="kd">function</span> <span class="nx">repeat</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span> <span class="nx">f</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">n</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">f</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">};</span>

  <span class="c1">// 콜백 함수</span>
  <span class="kd">var</span> <span class="nx">logAll</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
  <span class="p">};</span>

  <span class="nx">repeat</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="nx">logAll</span><span class="p">);</span> <span class="c1">// 0 1 2 3 4</span>

  <span class="c1">// 콜백 함수</span>
  <span class="kd">var</span> <span class="nx">logOdds</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">i</span> <span class="o">%</span> <span class="mi">2</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
  <span class="p">};</span>

  <span class="nx">repeat</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="nx">logOdds</span><span class="p">);</span> <span class="c1">// 1 3</span>
</code></pre></div></div>

<p>이처럼 함수의 매개변수를 통해 다른 함수의 내부로 전달되는 함수를 콜백 함수라고 하며, 매개변수를 통해 함수의 외부에서 콜백 함수를 전달받은 함수를 고차 함수라고한다. 고차 함수는 콜백 함수를 자신의 일부분으로 합성한다. 콜백 함수는 고차 함수에 의해 호출되며 이 때 고차 함수는 필요에 따라 콜백 함수에 인수를 전달할 수 있다.<br />
콜백 함수는 함수형 프로그래밍 패러다임뿐만 아니라 비동기 처리에 활용되는 중요한 패턴이다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">btn</span><span class="dl">'</span><span class="p">).</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">});</span>

  <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">(){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">1초 경과</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">},</span> <span class="mi">1000</span><span class="p">);</span>
</code></pre></div></div>

<p>콜백 함수는 배열 고차 함수에서도 사용된다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 콜백 함수를 사용하는 고차 함수 map</span>
  <span class="kd">var</span> <span class="nx">res</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">].</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">item</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span>
  <span class="p">})</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span> <span class="c1">// [2, 4, 6]</span>

  <span class="c1">// 콜백 함수를 사용하는 고차 함수 filter</span>
  <span class="nx">res</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">].</span><span class="nx">filter</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">item</span> <span class="o">%</span> <span class="mi">2</span><span class="p">;</span>
  <span class="p">})</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span> <span class="c1">// [1, 3]</span>

  <span class="c1">// 콜백 함수를 사용하는 고차 함수 reduce</span>
  <span class="nx">res</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">].</span><span class="nx">reduce</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">acc</span><span class="p">,</span> <span class="nx">cur</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">add</span> <span class="o">+</span> <span class="nx">cur</span><span class="p">;</span>
  <span class="p">})</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span> <span class="c1">// 6</span>
</code></pre></div></div>

<h3 id="1275-순수-함수와-비순수-함수">12.7.5 순수 함수와 비순수 함수</h3>
<p>함수형 프로그래밍에서는 어떤 <code class="language-plaintext highlighter-rouge">외부 상태에 의존하지도 않고 변경하지도 않는</code> 부수 효과가 없는 함수를 <code class="language-plaintext highlighter-rouge">순수 함수</code>라 하고, <code class="language-plaintext highlighter-rouge">외부 상태에 의존하거나 외부 상태를 변경</code>하는 부수 효가가 있는 함수를 <code class="language-plaintext highlighter-rouge">비순수 함수</code>라고 한다.<br />
순수 함수는 동일한 인수가 전달되면 언제나 동일한 값을 반환하는 함수다. 함수 내부 상태에만 의존하고 함수의 외부 상태를 변경하지도 않는다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

  <span class="c1">// 순수 함수 -&gt; 전달 받은 인수로 실행</span>
  <span class="kd">function</span> <span class="nx">increase</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="o">++</span><span class="nx">n</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="c1">// 순수 함수가 반환한 결과값을 변수에 재할당해서 상태를 변경</span>
  <span class="nx">count</span> <span class="o">=</span> <span class="nx">increase</span><span class="p">(</span><span class="nx">count</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">count</span><span class="p">);</span> <span class="c1">// 1</span>

  <span class="nx">count</span> <span class="o">=</span> <span class="nx">increase</span><span class="p">(</span><span class="nx">count</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">count</span><span class="p">);</span> <span class="c1">// 2</span>
</code></pre></div></div>
<p>반대로 함수의 외부 상태에 따라 반환값이 달라지는 함수를 비순수 함수라고 한다. 인수를 전달받지 않고 함수 내부에서 외부 상채를 직접 참조하면 외부 상태에 의존하게 되어 반환값이 변할 수 있고, 외부 상태도 변결할 수 있으므로 비순수 함수가 된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

  <span class="c1">// 비 순수 함수 -&gt; 외부의 변수에 할당 된 값을 참조</span>
  <span class="kd">function</span> <span class="nx">increase</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="o">++</span><span class="nx">count</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="c1">// 비순수 함수는 외부 상태를 변경하므로 상태 변화를 추적하기 어려워진다.</span>
  <span class="nx">increase</span><span class="p">(</span><span class="nx">count</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">count</span><span class="p">);</span> <span class="c1">// 1</span>

  <span class="nx">increase</span><span class="p">(</span><span class="nx">count</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">count</span><span class="p">);</span> <span class="c1">// 2</span>
</code></pre></div></div>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">의사코드</code>(슈도코드, pseudocode[1])는 프로그램을 작성할 때 각 모듈이 작동하는 논리를 표현하기 위한 언어이다. 특정 프로그래밍 언어의 문법에 따라 쓰인 것이 아니라, 일반적인 언어로 코드를 흉내 내어 알고리즘을 써놓은 코드를 말한다. 의사(疑似)코드는 말 그대로 흉내만 내는 코드이기 때문에, 실제적인 프로그래밍 언어로 작성된 코드처럼 컴퓨터에서 실행할 수 없으며, 특정 언어로 프로그램을 작성하기 전에 알고리즘의 모델을 대략적으로 모델링하는 데에 쓰인다.</p>
</blockquote>]]></content><author><name>Hyejic</name></author><category term="js" /><category term="javascript" /><summary type="html"><![CDATA[모던 자바스크립트 Deep Dive 12장 함수 내용 정리]]></summary></entry></feed>