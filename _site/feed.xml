<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-05-11T01:03:10+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">공부해서 남주자</title><subtitle>공부한것을 기록하고 공유하는 블로그입니다.</subtitle><author><name>Hyejic</name></author><entry><title type="html">19장 프로토 타입</title><link href="http://localhost:4000/js/modernJS19/" rel="alternate" type="text/html" title="19장 프로토 타입" /><published>2022-05-09T00:00:00+09:00</published><updated>2022-05-09T00:00:00+09:00</updated><id>http://localhost:4000/js/modernJS19</id><content type="html" xml:base="http://localhost:4000/js/modernJS19/"><![CDATA[<p><br /></p>

<h1 id="19장-프로토타입">19장 프로토타입</h1>
<p>자바스크립트는 클래스 기반 객체지향 프로그래밍 언어보다 효율적이며 더 강력한 객체지향 프로그래밍 능력을 지니고 있는 프로토타입 기반의 객체지향 프로그래밍 언어다. 자바스크립트는 객체 기반의 프로그래밍 언어이며 자바스크립트를 이루고 있는 거의 “모든 것”이 객체다.</p>

<h2 id="191-객체지향-프로그래밍">19.1 객체지향 프로그래밍</h2>
<p>객체의 집합으로 프로그램을 표현하려는 프로그래밍 패러다임을 말한다.<br />
객체지향 프로그래밍은 실세계의 실체를 인식하는 철학적 사고를 프로그래밍에 접목하려는 시도에서 시작한다. 실체는 특징이나 성질을 나타내는 <code class="language-plaintext highlighter-rouge">속성</code>을 가지고 있고, 이를 통해 인식하거나 구별할 수 있다. 다양한 속성 중에서 프로그램에 필요한 속성만 간추려 내어 표현하는 것을 <code class="language-plaintext highlighter-rouge">추상화</code>라 한다.<br />
객체지향 프로그래밍은 객체의 상태를 나타내는 데이터와 상태 데이터를 조작할 수 있는 동작을 하나의 논리적인 단위로 묶어 생각한다. 따라서 객체는 상태 데이터와 동작을 하나의 논리적인 단위로 묶은 복합적인 자료구조라고 할 수 있다. 이 때 객체의 상태 데이터를 프로퍼트, 동작을 메서드라 부른다.</p>

<h2 id="192-상속과-프로토타입">19.2 상속과 프로토타입</h2>
<p>상속은 객체지향 프로그래밍의 핵심 개념으로, 어떤 객체의 프로퍼티 또는 메서드를 다른 객체가 상속받아 그대로 사용할 수 있는 것을 말한다.
자바스크립트는 프로토타입을 기반으로 상속을 구현한다. 예제에서 상속을 통해 불필요한 중복을 제거해 보자.</p>

<h3 id="중복-인스턴스">중복 인스턴스</h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 생성자 함수</span>
  <span class="kd">function</span> <span class="nx">Circle</span><span class="p">(</span><span class="nx">radius</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">radius</span> <span class="o">=</span> <span class="nx">radius</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">getArea</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">radius</span> <span class="o">**</span> <span class="mi">2</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">};</span>

  <span class="kd">const</span> <span class="nx">circle1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Circle</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">circle2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Circle</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>

  <span class="c1">// Circle 생성자 함수는 인스턴스를 생성할 때마다 동일한 동작을 하는 getArea 메서드를 중복 생성하고 모든 인스턴스가 중복 소유한다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">circle1</span><span class="p">.</span><span class="nx">getArea</span> <span class="o">===</span> <span class="nx">circle2</span><span class="p">.</span><span class="nx">getArea</span><span class="p">);</span> <span class="c1">// false</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">circle1</span><span class="p">.</span><span class="nx">getArea</span><span class="p">());</span> <span class="c1">// 3.141592653589793</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">circle2</span><span class="p">.</span><span class="nx">getArea</span><span class="p">());</span> <span class="c1">// 12.566370614359172</span>
</code></pre></div></div>
<h3 id="상속을-통한-중복-인스턴스-방지">상속을 통한 중복 인스턴스 방지</h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 생성자 함수</span>
  <span class="kd">function</span> <span class="nx">Circle</span><span class="p">(</span><span class="nx">radius</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">radius</span> <span class="o">=</span> <span class="nx">radius</span><span class="p">;</span>
  <span class="p">};</span>

  <span class="c1">// Circle 생성자 함수가 생성한 모든 인스턴스가 gerArea 메서드를 공유해서 사용할 수 있도록 프로토타입에 추가</span>
  <span class="nx">Circle</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getArea</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">radius</span> <span class="o">**</span> <span class="mi">2</span><span class="p">;</span>
  <span class="p">};</span>

  <span class="c1">// 인스턴스 생성</span>
  <span class="kd">const</span> <span class="nx">circle1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Circle</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">circle2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Circle</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>

  <span class="c1">// Circle 생성자 함수가 생성한 모든 인스턴스는 부모 객체의 역할을 하는 프로토타입 Circle.prototype으로부터 getArea 메서드를 상속받는다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">circle1</span><span class="p">.</span><span class="nx">getArea</span> <span class="o">===</span> <span class="nx">circle2</span><span class="p">.</span><span class="nx">getArea</span><span class="p">);</span> <span class="c1">// true</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">circle1</span><span class="p">.</span><span class="nx">getArea</span><span class="p">());</span> <span class="c1">// 3.141592653589793</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">circle2</span><span class="p">.</span><span class="nx">getArea</span><span class="p">());</span> <span class="c1">// 12.566370614359172</span>
</code></pre></div></div>
<p>상속은 코드의 재사용이란 관점에서 매우 유용하다.</p>

<h2 id="193-프로토타입-객체">19.3 프로토타입 객체</h2>
<p>프로토타입 객체란 객체지향 프로그래밍의 근간을 이루는 객체 간 상속을 구현하기 위해 사용된다.<br />
모든 객체는 [[Prototype]]이라는 내부 슬롯을 가지며, 이 내부 슬록의 값은 프로토타입의 참조다. 객체가 생성될때 객체 생성 방식에 따라 프로토타입이 결정되고 [[Prototype]]에 저장된다.<br />
(그림 19-3)</p>

<p>[[Prototype]] 내부 슬롯에는 직접 접근할 수 없지만, 위 그림처럼 __proto__ 접근자 프로퍼티를 통해 자신의 프로토타입, 즉 자신의 [[Prototype]] 내부 슬록이 가리키는 프로토타입에 간접적으로 접근할 수 있다. 그리고 프로토타입은 자신의 constructor 프로퍼티를 통해 생성자 함수에 접근할 수 있고, 생성자 함수는 자신의 prototype 프로퍼티를 통해 프로토타입에 접근할 수 있다.</p>

<h3 id="1931-__proto__-접근자-프로퍼티">19.3.1 __proto__ 접근자 프로퍼티</h3>
<p>__proto__ 접근자 프로퍼티를 통해 자신의 프로토타입, 즉 자신의 [[Prototype]] 내부 슬록이 가리키는 프로토타입에 간접적으로 접근할 수 있다.
(그림 19-4)</p>

<h4 id="__proto__는-접근자-프로퍼티다">__proto__는 접근자 프로퍼티다.</h4>
<p>접근자 프로퍼티는 자체적으로는 값을 갖지 않고 다른 데이터 프로퍼티의 값을 읽거나 저장할 때 사용하는 접근자 함수, 즉 [[Get]], [[Set]] 프로퍼티 어트리뷰트로 구성된 프로퍼티다. <br />
__proto__ 접근자 프로퍼티를 통해 프로토타입에 접근하면 getter 함수인 [[Get]]이 호출된다. <br />
__proto__ 접근자 프로퍼티를 통해 새로운 프로토타입을 할당하면 setter 함수인 [[Set]]이 호출된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{};</span>
  <span class="kd">const</span> <span class="nx">parent</span> <span class="o">=</span> <span class="p">{</span> <span class="na">x</span><span class="p">:</span> <span class="mi">1</span> <span class="p">};</span>

  <span class="c1">// getter 함수인 get __proto__가 호출되어 obj 객체의 프로토타입을 취득</span>
  <span class="nx">obj</span><span class="p">.</span><span class="nx">__proto__</span><span class="p">;</span> 

  <span class="c1">// setter 함수인 set __proto__가 호출되어 obj 객체의 프로토타입을 교체</span>
  <span class="nx">obj</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">=</span> <span class="nx">parent</span><span class="p">;</span> 

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span> <span class="c1">// 1</span>
</code></pre></div></div>

<h4 id="__proto__-접근자-프로퍼티는-상속을-통해-사용된다">__proto__ 접근자 프로퍼티는 상속을 통해 사용된다.</h4>
<p>모든 객체는 상속을 통해 Object.prototype.__proto__ 접근자 프로퍼티를 사용할 수 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Choi</span><span class="dl">"</span> <span class="p">};</span>

  <span class="c1">// person 객체는 __proto__ 프로퍼티를 소유하지 않는다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="dl">'</span><span class="s1">__proto__</span><span class="dl">'</span><span class="p">));</span> <span class="c1">// false</span>

  <span class="c1">// __proto__ 프로퍼티는 모든 객체의 프로토타입 객체인 Object.prototype의 접근자 프로퍼티다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">getOwnPropertyDescriptor</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span> <span class="dl">'</span><span class="s1">__proto__</span><span class="dl">'</span><span class="p">));</span>
  <span class="c1">// {enumerable: false, configurable: true, get: ƒ, set: ƒ}</span>

  <span class="c1">// 모든 객체는 Object.prototype의 접근자 프로퍼티 __proto__를 상속받아 사용할 수 있다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">({}.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span> <span class="c1">// true</span>
</code></pre></div></div>

<h4 id="__proto__-접근자-프로퍼티를-통해-프로토타입에-접근하는-이유">__proto__ 접근자 프로퍼티를 통해 프로토타입에 접근하는 이유</h4>
<p>프로토타입에 접근하기 위해 접근자 프로퍼티를 사용하는 이유는 상호 참조에 의해 프로토타입 체인이 생성되는 것을 방지하기 위해서다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">parent</span> <span class="o">=</span> <span class="p">{};</span>
  <span class="kd">const</span> <span class="nx">child</span> <span class="o">=</span> <span class="p">{};</span>

  <span class="nx">child</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">=</span> <span class="nx">parent</span><span class="p">;</span>
  <span class="nx">parent</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">=</span> <span class="nx">child</span><span class="p">;</span>
  <span class="c1">// TypeError: Cyclic __proto__ value</span>
</code></pre></div></div>
<p>위 예제에서 에러가 발생하지 않고 정상적으로 처리되었을 경우에는 서로가 자신의 프로토타입이 되는 비정상적인 프로토타입 체인이 만들어지기 때문에 __proto__ 접근자 프로퍼티는 에러를 발생시킨다.<br />
프로토타입 체인은 단방향 링크드 리스트로 구현되어야 한다. 만약 순환 참조(서로가 자신의 프로토타입이 되는)하는 프로토타입 체인이 만들어지면 프로토타입 체인 종점이 존재하지 않아서 무한 루프에 빠진다. 따라서 아무런 체크 없이 무조건적으로 프로토타입을 교체할 수 없도록 __proto__ 접근자 프로퍼티를 통해 프로토타입에 접근하고 교체하도록 구현되어있다.</p>

<h4 id="__proto__-접근자-프로퍼티를-코드-내에서-직접-사용하는-것은-권장하지-않는다">__proto__ 접근자 프로퍼티를 코드 내에서 직접 사용하는 것은 권장하지 않는다.</h4>
<p>모든 객체가 __proto__ 접근자 프로퍼티를 사용할 수 있는 것은 아니기 때문에 권장하지 않는다. -&gt; 직접 상속(Object.prototype을 상속받지 않는 객체)<br />
프로토타입의 참조를 취득하고 싶은 경우에는 Object.getPrototypeOf 메서드 사용.<br />
프로토타입을 교체하고 싶은 경우에는 Object.setPrototypeOf 메서드를 사용.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{};</span>
  <span class="kd">const</span> <span class="nx">parent</span> <span class="o">=</span> <span class="p">{</span> <span class="na">x</span><span class="p">:</span> <span class="mi">1</span> <span class="p">};</span>

  <span class="nb">Object</span><span class="p">.</span><span class="nx">getPrototypeOf</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span> <span class="c1">// obj.__proto__</span>

  <span class="nb">Object</span><span class="p">.</span><span class="nx">setPrototypeOf</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span> <span class="nx">parent</span><span class="p">);</span> <span class="c1">// obj.__proto__ = parent;</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span> <span class="c1">// 1</span>
</code></pre></div></div>
<p>Object.getPrototypeOf 메서드와 Object.setPrototypeOf 메서드는 get Object.prototype.__proto__ 와 set Object.prototype.__proto__ 의 처리 내용과 정확히 일치한다.</p>

<h3 id="1932-함수-객체의-prototype-프로퍼티">19.3.2 함수 객체의 prototype 프로퍼티</h3>
<p>함수 객체만이 소유하는 prototype 프로퍼티는 생성자 함수가 생성할 인스턴스의 프로토타입을 가리킨다. 따라서 생성자 함수로서 호출할 수 없는 non-constructor인 화살표 함수와 ES6 메서드 축약 표현으로 정의한 메서드는 prototype 프로퍼티를 소유하지 않으며 프로토타입도 생성하지 않는다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 함수 객체는 prototype 프로퍼티를 소유</span>
  <span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{}).</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="dl">'</span><span class="s1">prototype</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// -&gt; true</span>

  <span class="c1">// 일반 객체는 prototype 프로퍼티를 소유하지 않는다.</span>
  <span class="p">({}).</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="dl">'</span><span class="s1">prototype</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// -&gt; false</span>

  <span class="c1">// 화살표함수는 non-constructor</span>
  <span class="kd">const</span> <span class="nx">Person</span> <span class="o">=</span> <span class="nx">name</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
  <span class="p">};</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">Person</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="dl">'</span><span class="s1">prototype</span><span class="dl">'</span><span class="p">));</span> <span class="c1">// false</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span> <span class="c1">// undefined</span>
</code></pre></div></div>
<p>모든 객체가 가지고 있는 __proto__ 접근자 프로퍼티와 함수 객체만이 가지고 있는 prototype 프로퍼티는 경국 동일한 프로토타입을 가리킨다. 하지만 이들 프로퍼티를 사용하는 주체가 다르다.</p>

<table>
  <thead>
    <tr>
      <th>구분</th>
      <th>소유</th>
      <th>값</th>
      <th>사용 주체</th>
      <th>사용 목적</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>__proto__ 접근자 프로퍼티</td>
      <td>모든 객체</td>
      <td>프로토타입의 참조</td>
      <td>모든 객체</td>
      <td>객체가 자신의 프로토타입에 접근 또는 교체하기 위해 사용</td>
    </tr>
    <tr>
      <td>prototype 프로퍼티</td>
      <td>constructor</td>
      <td>프로토타입의 참조</td>
      <td>생성자 함수</td>
      <td>생성자 함수가 자신이 생성할 객체(인스턴스)의 프로토타입을 할당하기 위해 사용</td>
    </tr>
  </tbody>
</table>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 생성자 함수 </span>
  <span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="kd">const</span> <span class="nx">me</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Preson</span><span class="p">(</span><span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span><span class="p">);</span>

  <span class="c1">// 결국 Person.prototype과 me.__proto__ 는 동일한 프로토타입을 가리킨다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">===</span> <span class="nx">me</span><span class="p">.</span><span class="nx">__proto__</span><span class="p">);</span> <span class="c1">// true</span>
</code></pre></div></div>

<h3 id="1933-프로토타입의-constructor-프로퍼티와-생성자-함수">19.3.3 프로토타입의 constructor 프로퍼티와 생성자 함수</h3>
<p>모든 프로토타입은 constructor 프로퍼티를 갖는다. 이 constructor 프로퍼티는 perototype 프로퍼티로 자신을 참조하고 있는 생성자 함수를 가리킨다.<br />
이 연결은 함수 객체가 생성될 때 이뤄진다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 생성자 함수 </span>
  <span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="kd">const</span> <span class="nx">me</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Preson</span><span class="p">(</span><span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span><span class="p">);</span>

  <span class="c1">// me 객체의 생성자 함수는 Person이다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">me</span><span class="p">.</span><span class="kd">constructor</span> <span class="o">===</span> <span class="nx">Person</span><span class="p">);</span> <span class="c1">// true</span>
</code></pre></div></div>
<p>(그림 19-8)</p>

<p>위 예제에서 Person 생성자 함수는 me 객체를 생성했다. 이때 me 객체는 프로토타입의 constructor 프로퍼티를 통해서 생성자 함수와 연결된다. me 객체에는 constructor 프로퍼티가 없지만 me 객체의 프로토타입인 Person.prototype에는 constructor 프로퍼티가 있다. 따라서 me 객체는 프로토타입인 Person.prototype의 constructor 프로퍼티를 상속 받아 사용할 수 있다.</p>

<h2 id="194-리터럴-표기법에-의해-생성된-객체의-생성자-함수와-프로토타입">19.4 리터럴 표기법에 의해 생성된 객체의 생성자 함수와 프로토타입</h2>
<p>생성자 함수에 의해 생성된 인스턴스는 프로토타입의 constructor 프로퍼티에 의해 생성자 함수와 연결된다. 이때 constructor 프로퍼티가 가리키는 생성자 함수는 인스턴스를 생성한 생성자 함수다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// obj 객체를 생성한 생성자 함수는 Object이다.</span>
  <span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">();</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="kd">constructor</span> <span class="o">===</span> <span class="nb">Object</span><span class="p">);</span> <span class="c1">// true</span>
</code></pre></div></div>
<p>리터럴 표기법에 의해 생성된 객체도 물론 프로토타입이 존재한다. 하지만 리터럴 표기법에 의해 생성된 객체의 경우 프로토타입의 constructor 프로퍼티가 가리키는 생성자 함수가 반드시 객체를 생성한 생성자 함수라고 단정할 수는 없다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// obj 객체는 Object 생성자 함수로 생성한 객체가 아니라 객체 리터럴로 생성했다.</span>
  <span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{};</span>
  <span class="c1">// 하지만 obj 객체의 생성자 함수는 Object 생성자 함수다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="kd">constructor</span> <span class="o">===</span> <span class="nb">Object</span><span class="p">);</span> <span class="c1">// true</span>
</code></pre></div></div>
<p>객체 리터럴에 의해 생성된 객체이지만 obj객체는 Object 생성자 함수와 constructor 프로퍼티로 연결되어있다.</p>

<p>ECMAScript에 따르면 Object 생성자 함수는 Object 생성자 함수에 인수를 전달하지 않거나 undefined 또는 null을 인수로 전달하면서 호출하면 내부적으로는 추상 연산 OrdinaryObjectCreate를 호출하여 Object.prototype을 프로토타입으로 갖는 빈 객체를 생성한다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 인수가 전달되지 않았을떄 추상 연산 OrdinaryObjectCreate를 호출하여 빈객체 생성</span>
  <span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">();</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span> <span class="c1">// {}</span>

  <span class="c1">// 인수가 전달된 경우 인수를 객체로 반환</span>
  <span class="nx">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">(</span><span class="mi">123</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span> <span class="c1">// Number {123}</span>
</code></pre></div></div>
<p>이처럼 Object 생성자 함수 호출과 객체 리터럴의 평가는 빈 객체를 생성하는 점에서 동일하나 세부 내용은 다르다. 따라서 객체 리터럴에 의해 생성된 객체는 Object 생성자 함수가 생성한 객체가 아니다.<br />
함수 객체의 경우 함수 선언문과 함수 표현식을 평가하여 함수 객체를 생성한 것은 Function 생성자 함수가 아니다. 하지만 constructor 프로퍼티를 통해 확인해보면 foo 함수의 생성자 함수는 Function 생성자 함수다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 함수 선언문으로 생성</span>
  <span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{}</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">.</span><span class="kd">constructor</span> <span class="o">===</span> <span class="nb">Function</span><span class="p">);</span> <span class="c1">// true</span>
</code></pre></div></div>
<p>리터럴 표기법에 의해 생성된 객체도 가상적인 생성자 함수를 갖는다. 프로토타입은 생성자 함수와 더불어 생성되며 prototype, constructor 프로퍼티에 의해 연결되어 있기 때문이다.<br />
프로토타입과 생성자 함수는 단독으로 존재할 수 없고 언제나 쌍으로 존재한다.</p>

<h4 id="리터럴-표기법에-의해-생성된-객체의-생성자-함수와-프로토타입">리터럴 표기법에 의해 생성된 객체의 생성자 함수와 프로토타입</h4>
<p>리터럴 표기법 | 생성자 함수 | 프로토타입
–|–|–
객체 리터럴 | Object | Object.prototype
함수 리터럴 | Function | Function.prototype
배열 리터럴 | Array | Array.prototype
정규 표현식 리터럴 | RegExp | RegExp.prototype</p>

<h2 id="195-프로토타입의-생성-시점">19.5 프로토타입의 생성 시점</h2>
<p>프로토타입은 생성자 함수가 생성되는 시점에 더불어 생성된다. 프로토타입과 생성자 함수는 단독으로 존재할 수 없고 언제나 쌍으로 존재하기 때문이다.
생성자 함수는 사용자 정의 생성자 함수와 빌트인 생성자 함수로 구분할 수 있다.</p>

<h3 id="1951-사용자-정의-생성자-함수와-프로토타입-생성-시점">19.5.1 사용자 정의 생성자 함수와 프로토타입 생성 시점</h3>
<p>내부 메서드 [[Constructor]]를 갖는 함수 객체, 즉 일반 함수(함수 선언문, 함수 표현식)로 정의한 함수 객체는 new 연산자와 함께 생성자 함수로서 호출할 수 있다. constructor는 함수 정의가 평가되어 함수 객체를 생성하는 시점에 프로토타입도 더불어 생성된다.
non-constructor(화살표함수, ES6 메서드 축약표현)는 프로토타입이 생성되지 않는다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// Person 생성자 함수는 호이스팅되어 런타임 이전에 실행된다. 이때 프로토타입도 더불어 생성</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span> <span class="c1">// {constructor: f}</span>

  <span class="c1">// 생성자 함수</span>
  <span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
  <span class="p">}</span>
</code></pre></div></div>

<p>이처럼 빌트인 생성자 함수가 아닌 사용자 정의 생성자 함수는 자신이 평가되어 함수 객체로 생성되는 시점에 프로토타입도 더불어 생성되며, 생성된 프로토타입의 프로토타입은 언제나 Object.prototype이다.</p>

<h3 id="1952-빌트인-생성자-함수와-프로토타입-생성-시점">19.5.2 빌트인 생성자 함수와 프로토타입 생성 시점</h3>
<p>빌트인 생성자 함수 - Object, String, Number, Function, Array, RegExp, Date, Promise 등…
모든 빌트인 생성자 함수는 전역 객체가 생성되는 시점에 생성된다. 생성된 프로토타입은 빌트인 생성자 함수의 prototype 프로퍼티에 바인딩된다.<br />
(그림 19-13)<br />
객체가 생성되기 이전에 생성자 함수와 프로토타입은 이미 객체화되어 존재한다. 이후 생성자 함수 또는 리터럴 표기법으로 객체를 생성하면 프로토타입은 생성된 객체의 [[Prototype]] 내부 슬록에 할당된다.</p>

<h2 id="196-객체-생성-방식과-프로토타입의-결정">19.6 객체 생성 방식과 프로토타입의 결정</h2>
<p><code class="language-plaintext highlighter-rouge">객체 생성 방식</code></p>
<ul>
  <li>객체 리터럴</li>
  <li>Object 생성자 함수</li>
  <li>생성자 함수</li>
  <li>Object.create 메서드</li>
  <li>클래스(ES6)</li>
</ul>

<p>각 방식마다 세부적인 객체 생성 방식의 차이는 있으나 추상 연산 OrdinaryObjectCreate에 의해 생성된다는 공통점이 있다. 프로토타입은 추상 연산 OrdinaryObjectCreate에 전달되는 인수에 의해 결정되고 이 인수는 객체가 생성되는 시점에 객체 생성 방식에 의해 결정된다.</p>

<h3 id="1961-객체-리터럴에-의해-생성된-객체의-프로토타입">19.6.1 객체 리터럴에 의해 생성된 객체의 프로토타입</h3>
<p>객체 리터럴에 의해 생성되는 객체의 프로토타입은 Object.prototype이다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 객체 리터럴이 평가되면 추상 연산 OrdinaryObjectCreate에 의해 </span>
  <span class="c1">// Object 생성자 함수와 Object.prototype과 생성된 객체 사이에 연결이 만들어진다.</span>
  <span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="na">x</span><span class="p">:</span> <span class="mi">1</span> <span class="p">};</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="kd">constructor</span> <span class="o">===</span> <span class="nb">Object</span><span class="p">);</span> <span class="c1">//true</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="dl">'</span><span class="s1">x</span><span class="dl">'</span><span class="p">));</span> <span class="c1">// true</span>
</code></pre></div></div>
<p>obj 객체는 Object.prototype을 프로토타입으로 갖게되며 Object.prototype을 상속받는다.<br />
obj 객체는 constructor 프로퍼티와 hasOwnProperty 메서드 등을 소유하고 있지 않지만 Object.prototype 객체를 상속 받았기 때문에 자유롭게 사용할 수 있다.</p>

<p>(그림 19-14)</p>

<h3 id="1962-object-생성자-함수에-의해-생성된-객체의-프로토타입">19.6.2 Object 생성자 함수에 의해 생성된 객체의 프로토타입</h3>
<p>Object 생성자 함수를 인수 없이 호출하면 빈 객체 생성된다.<br />
객체 리터럴에 의해 생성된 객체와 동일한 구조를 갖는다.
Object 생성자 함수를 호출하면 추상 연상 OrdinaryObjectCreate가 호출되고 전달되는 프로토타입은 Object.prototype이다. Object 생성자 함수에 의해 생성되는 객체의 프로토타입은 Object.prototype이다.</p>
<ul>
  <li>객체 리터럴과 Object 생성자 함수에 의한 객체 생성 방식의 차이<br />
객체 리터럴 방식은 객체 리터럴 내부에 프로퍼티를 추가. Object 생성자 함수는 빈 객체 생성 후 프로퍼티 추가.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">;</span>
  <span class="nx">obj</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

  <span class="c1">// // Object 생성자 함수에 의해 생성된 obj 객체는 Object.prototype을 상속받는다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="kd">constructor</span> <span class="o">===</span> <span class="nb">Object</span><span class="p">);</span> <span class="c1">//true</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="dl">'</span><span class="s1">x</span><span class="dl">'</span><span class="p">));</span> <span class="c1">// true</span>
</code></pre></div></div>
<p>(그림 19-15)</p>

<h3 id="1963-생성자-함수에-의해-생성된-객체의-프로토타입">19.6.3 생성자 함수에 의해 생성된 객체의 프로토타입</h3>
<p>new 연산자와 함께 생성자 함수를 호출하여 인스턴스를 생성하면 다른 객체 생성 방식돠 마찬가지로 추상 연산 OrdinaryObjectCreate가 호출된다.<br />
생성자 함수에 의해 생성되는 객체의 프로토타입은 생성자 함수의 prototype 프로퍼티에 바인딩되어 있는 객체다.<br />
사용자 정의 생성자 함수 Person과 더불어 생성된 프로토타입 Person.prototype의 프로퍼티는 constructor뿐이다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="c1">// 프로토타입 메서드 추가로 하위 객체가 상속 받을 수 있도록 구현</span>
  <span class="c1">// 일반 객체와 같이 프로토타입도 추가, 삭제가 가능하고 이렇게 추가, 삭제된 프로퍼티는 프로토타입 체인에 즉각 반영된다.</span>
  <span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">sayHello</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Hi my name is </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="kd">const</span> <span class="nx">me</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">you</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="dl">'</span><span class="s1">Kim</span><span class="dl">'</span><span class="p">);</span>

  <span class="nx">me</span><span class="p">.</span><span class="nx">sayHello</span><span class="p">();</span> <span class="c1">// Hi my name is Choi</span>
  <span class="nx">you</span><span class="p">.</span><span class="nx">sayHello</span><span class="p">();</span> <span class="c1">// Hi my name is Kim</span>
</code></pre></div></div>

<p>(그림 19-17)<br />
Person 생성자 함수를 통해 생성된 모든 객체는 프로토타입에 추가된 sayHello 메서드를 상속받아 자신의 메서드처럼 사용할 수 있다.</p>

<h2 id="197-프로토타입-체인">19.7 프로토타입 체인</h2>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="c1">// 프로토타입 메서드</span>
  <span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">sayHello</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Hi my name is </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="kd">const</span> <span class="nx">me</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span><span class="p">);</span>

  <span class="c1">// hasOwnProperty는 Obejct.prototype의 메서드다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">me</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="dl">'</span><span class="s1">name</span><span class="dl">'</span><span class="p">));</span> <span class="c1">// true</span>
</code></pre></div></div>
<p>위 예제에서 Person 생성자 함수에 의해 생성된 me 객체는 Object.prototype의 메서드인 hasOwnProperty를 호출할 수 있다. 이것은 Person.prototype 뿐만 아니라 Object.prototype도 상속받았다는 의미이다.</p>

<p>자바스크립트는 객테의 프로퍼티(메서드 포함)에 접근하려고 할 때 해당 객체에 접근하려는 프로퍼티가 없다면 [[Prototype]] 내부 슬록의 참조를 따라 자신의 부모 역할을 하는 프로토타입의 프로퍼티를 순차적으로 검색한다. 이름 프로토타입 체인이라 한다. 프로토타입 체인은 자바스크립트가 객체지향 프로그래밍의 상속을 구현하는 매커니즘이다.</p>

<p>(그림 19-18)</p>

<p>me.hasOwnProperty(‘name’)과 같이 메서드를 호출하면 자바스크립트는 다음과 같은 과정을 거쳐 메서드를 검색한다.</p>
<ol>
  <li>hasOwnProperty 메서드를 호출한 me 객체에서 hasOwnProperty 메서드를 검색.<br />
me 객체에는 hasOwnProperty 메서드가 없으므로 [[Prototype]] 내부 슬롯에 바인딩 되어있는 프로토타입으로 이동하여 hasOwnProperty 메서드를 검색한다.</li>
  <li>Person.prototype에도 hasOwnProperty 메서드가 없으므로 체인을 따라 [[Prototype]] 내부 슬롯에 바인딩 되어있는 프로토타입으로 이동하여 hasOwnProperty 메서드를 검색한다.</li>
  <li>Object.prototype에는 hasOwnProperty 메서드가 존재하므로 Object.prototype.hasOwnProperty 메서드를 호출한다. 이때 Object.prototype.hasOwnProperty 메서드의 this에는 me 객체가 바인딩 된다.
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">me</span><span class="p">,</span><span class="dl">'</span><span class="s1">name</span><span class="dl">'</span><span class="p">);</span> <span class="c1">//true</span>
</code></pre></div>    </div>
    <blockquote>
      <p>call 메서드는 this로 사용할 객체를 전달하면서 함수를 호출한다.</p>
    </blockquote>
  </li>
</ol>

<p>프로토타입 체인의 최상위에 위치하는 객체는 언제나 Object.prototype이다. 따라서 모든 객체는 Object.prototype을 상속받는다. <code class="language-plaintext highlighter-rouge">Object.prototype을 프로토타입 체인의 종점</code>이라 한다.<br />
프로토타입 체인은 상속과 프로퍼티 검색을 위한 메커니즘이라고 할 수 있다. 반면에 스코프 체인은 식별자 검색을 위한 메커니즘이라고 할 수 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nx">me</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="dl">'</span><span class="s1">name</span><span class="dl">'</span><span class="p">);</span> 
</code></pre></div></div>
<p>위 예제의 경우, 먼저 식별자 체인에서 me 식별자를 검색한다. me 식별자는 전역에서 선언되었으므로 전역 스코프에서 검색된다. me 식별자 검색 후 me 객체의 프로토타입 체인에서 hasOwnProperty 메서드를 검색한다. 이처럼 <code class="language-plaintext highlighter-rouge">스코프 체인과 프로토타입 체인은 별도로 동작하는 것이 아니라 서로 협력하여 식별자와 프로퍼티를 검색하는 데 사용</code>된다.</p>

<h2 id="198-오버라이딩과-프로퍼티-섀도잉">19.8 오버라이딩과 프로퍼티 섀도잉</h2>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">Person</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// 생성자 함수</span>
    <span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// 프로토타입 메서드 추가</span>
    <span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">sayHello</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Hi! my name is </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
    <span class="p">};</span>

    <span class="c1">// 생성자 함수를 반환</span>
    <span class="k">return</span> <span class="nx">Person</span><span class="p">;</span>
  <span class="p">}());</span>

  <span class="kd">const</span> <span class="nx">me</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span><span class="p">);</span>

  <span class="c1">// 인스턴스 메서드 추가</span>
  <span class="nx">me</span><span class="p">.</span><span class="nx">sayHello</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Hey! my name is </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
  <span class="p">};</span>

  <span class="c1">// 인스턴스 메서드가 호출. 프로토타입 메서드는 인스턴스 메서드에 의해 가려진다. (프로퍼티 섀도잉)</span>
  <span class="nx">me</span><span class="p">.</span><span class="nx">sayHello</span><span class="p">();</span> <span class="c1">//Hey! my name is Choi</span>

  <span class="c1">// 인스턴스 메서드 삭제</span>
  <span class="k">delete</span> <span class="nx">me</span><span class="p">.</span><span class="nx">sayHello</span><span class="p">;</span>

  <span class="c1">// 프로퍼티 메서드 sayHello 출력</span>
  <span class="nx">me</span><span class="p">.</span><span class="nx">sayHello</span><span class="p">();</span> <span class="c1">// Hi! my name is Choi</span>

  <span class="c1">// 프로퍼티 메서드 sayHello 삭제 -&gt; 삭제되지 않는다.</span>
  <span class="k">delete</span> <span class="nx">me</span><span class="p">.</span><span class="nx">sayHello</span><span class="p">;</span>

  <span class="nx">me</span><span class="p">.</span><span class="nx">sayHello</span><span class="p">();</span> <span class="c1">// Hi! my name is Choi</span>

  <span class="c1">// 프로토타입 메서드의 변경 및 삭제는 프로토타입에 직접 접근해야 한다.</span>
  <span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">sayHello</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Hello! my name is </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="nx">me</span><span class="p">.</span><span class="nx">sayHello</span><span class="p">();</span> <span class="c1">// Hello! my name is Choi</span>

  <span class="k">delete</span> <span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">sayHello</span><span class="p">;</span>

  <span class="nx">me</span><span class="p">.</span><span class="nx">sayHello</span><span class="p">();</span> <span class="c1">// TypeError: me.sayHello is not a function</span>
</code></pre></div></div>
<p>(그림 19-19)<br />
프로토타입이 소유한 프로퍼티를 프로토타입 프로퍼티, 인스턴스가 소유한 프로퍼티를 인스턴스 프로퍼티라고 부른다.<br />
프로토타입 프로퍼티와 같은 이름의 프로퍼티를 인스턴스에 추가하면 체인을 따라 프로토타입 프로퍼티를 검색하여 프로토타입 프로퍼티를 덮어쓰는 것이 아니라 인스턴스 프로퍼티로 추가한다. 이때 인스턴스 메서드 sayHello는 프로토타입 메서드 sayHello를 오버라이딩했고 프로토타입 메서드 sayHello는 가려진다. 이처럼 상속 관계에 의해 프로퍼티가 가려지는 현상을 프로퍼티 섀도잉이라 한다.
프로토타입 메서드는 하위 객체를 통해 프로토타입을 변경 및 삭제하는 것은 불가능하다. 하위 객체를 통한 프로토타입의 get 엑세스 허용 set 엑세스 금지. 프로토타입에 직접 접근해야 한다.</p>

<h2 id="199-프로토타입의-교체">19.9 프로토타입의 교체</h2>
<p>프로토타입은 생성자 함수 또는 인스턴스에 의해 교체할 수 있다.</p>

<h3 id="1991-생성자-함수에-의한-프로토타입의-교체">19.9.1 생성자 함수에 의한 프로토타입의 교체</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kd">const</span> <span class="nx">Person</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// 생성자 함수</span>
    <span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// 생성자 함수의 prototype 프로퍼티를 통해 프로토타입을 교체</span>
    <span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="p">{</span>
      <span class="c1">// 💡 constructor 프로퍼티와 생성자 함수 간의 연결</span>
      <span class="c1">// constructor: Person,</span>
      <span class="nx">sayHello</span> <span class="p">()</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Hi! my name is </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
      <span class="p">}</span>
    <span class="p">};</span>

    <span class="k">return</span> <span class="nx">Person</span><span class="p">;</span>
  <span class="p">}());</span>

  <span class="kd">const</span> <span class="nx">me</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span><span class="p">);</span>

  <span class="c1">// 프로토타입을 교체하면 constructor 프로퍼티와 생성자 함수 간의 연결이 파괴된다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">me</span><span class="p">.</span><span class="kd">constructor</span> <span class="o">===</span> <span class="nx">Person</span><span class="p">)</span> <span class="c1">// false / 💡 constructor 함수 간 연결 후 -&gt; true</span>
  <span class="c1">// 프로토타입 체인을 따라 Object.prototype의 constructor 프로퍼티가 검색된다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">me</span><span class="p">.</span><span class="kd">constructor</span> <span class="o">===</span> <span class="nb">Object</span><span class="p">)</span> <span class="c1">// true / 💡 constructor 함수 간 연결 후 -&gt; false</span>
</code></pre></div></div>
<p>Person.prototype에 객체 리터럴을 할당했다. 이것은 Person 생성자 함수가 생성할 객체의 포로토타입을 객체 리터럴로 교체한 것이다.<br />
(그림 19-20)<br />
객체 리터럴에는 constructor 프로퍼티가 없다. 따라서 me 객체의 생성자 함수를 검색하면 Person이 아닌 Object가 나온다. 생성자 함수간의 연결 파괴.<br />
연결을 되살리려면 프로토타입으로 교체한 객체 리터럴에 constructor 프로퍼티를 추가.</p>

<h3 id="1992-인스턴스에-의한-프로토타입의-교체">19.9.2 인스턴스에 의한 프로토타입의 교체</h3>
<p>생성자 함수에 의한 프로토타입의 교체와 마찬가지로 constructor 프로퍼티와 생성자 함수 간의 연결이 파괴된다.<br />
별차이가 없어보이지만 미묘한 차이가 있다. 인스턴스에 의한 프로토타입의 교체는 Person 생성자 함수가 교체된 프로토타입에 연결이 되지 않는다.<br />
(그림 19-22)</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="kd">const</span> <span class="nx">me</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span><span class="p">);</span>
  
  <span class="c1">// 프로토타입으로 교체할 객체 </span>
  <span class="kd">const</span> <span class="nx">parent</span> <span class="o">=</span> <span class="p">{</span>
    <span class="c1">// 💡 constructor 프로퍼티와 생성자 함수 간의 연결</span>
    <span class="na">constructer</span><span class="p">:</span> <span class="nx">Person</span><span class="p">,</span>
    <span class="nx">sayHello</span> <span class="p">()</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Hi! my name is </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">};</span>

  <span class="c1">// 💡 생성자 함수의 prototype 프로퍼티와 프로토타입 간의 연결을 설정</span>
  <span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nx">parent</span><span class="p">;</span>

  <span class="c1">// me 객체의 프로토타입을 parent 객체로 교체</span>
  <span class="nb">Object</span><span class="p">.</span><span class="nx">setPrototypeOf</span><span class="p">(</span><span class="nx">me</span><span class="p">,</span> <span class="nx">parent</span><span class="p">);</span>
  <span class="c1">// 위 코드는 아래의 코드와 동일하게 동작</span>
  <span class="c1">// me.__proto__ = parent;</span>

  <span class="nx">me</span><span class="p">.</span><span class="nx">sayHello</span><span class="p">();</span> <span class="c1">// Hi! my name is Choi</span>

  <span class="c1">// 프로토타입을 교체하면 constructor 프로퍼티와 생성자 함수 간의 연결이 파괴된다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">me</span><span class="p">.</span><span class="kd">constructor</span> <span class="o">===</span> <span class="nx">Person</span><span class="p">)</span> <span class="c1">// false / 💡 constructor 함수 간 연결 후 -&gt; true</span>
  <span class="c1">// 프로토타입 체인을 따라 Object.prototype의 constructor 프로퍼티가 검색된다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">me</span><span class="p">.</span><span class="kd">constructor</span> <span class="o">===</span> <span class="nb">Object</span><span class="p">)</span> <span class="c1">// true / 💡 constructor 함수 간 연결 후 -&gt; false</span>

  <span class="c1">// 💡 생성자 함수의 prototype 프로퍼티가 교체된 프로토타입을 가리킨다.</span>
  <span class="c1">// console.log(Person.prototype === Object.getPrototypeOf(me)); // true</span>
</code></pre></div></div>
<p>연결을 되살리려면 프로토타입으로 교체한 객체 리터럴에 constructor 프로퍼티를 추가하고 함수의 prototype 프로퍼티를 재설정 해야한다.
이처럼 프로토타입 교체를 통해 객체 간의 상속 관계를 동적으로 변경하는 것은 꽤나 번거롭다. 따라서 프로토타입은 직접 교체하지 않는 것이 좋다.</p>

<h2 id="1910-instanceof-연산자">19.10 instanceof 연산자</h2>]]></content><author><name>Hyejic</name></author><category term="js" /><category term="javascript" /><summary type="html"><![CDATA[모던 자바스크립트 Deep Dive 19장 프로토 타입 내용 정리]]></summary></entry><entry><title type="html">17장 생성자 함수에 의한 객체 생성</title><link href="http://localhost:4000/js/modernJS17/" rel="alternate" type="text/html" title="17장 생성자 함수에 의한 객체 생성" /><published>2022-05-04T00:00:00+09:00</published><updated>2022-05-04T00:00:00+09:00</updated><id>http://localhost:4000/js/modernJS17</id><content type="html" xml:base="http://localhost:4000/js/modernJS17/"><![CDATA[<p><br /></p>

<h1 id="17장-생성자-함수에-의한-객체-생성">17장 생성자 함수에 의한 객체 생성</h1>

<h2 id="171-object-생성자-함수">17.1 Object 생성자 함수</h2>
<p>new 연산자와 함께 Object 생성자 함수를 호출하면 빈 객체를 생성하여 반환한다. 생성자 함수에 의해 생성된 객체를 인스턴스라 한다.
객체를 생성하는 방법은 객체 리터럴을 사용하는 것이 더 간편하다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 빈 객체의 생성</span>
  <span class="kd">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">();</span>
  <span class="nx">person</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span> <span class="c1">// {name: "Choi"}</span>
</code></pre></div></div>
<p>자바스크립트는 Object 생성자 함수 이외에도 String, Number, Boolean, Function, Array, Date, RegExp, Promise 등의 빌트인 생성자 함수를 제공한다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">strObj</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">String</span><span class="p">(</span><span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">strObj</span><span class="p">);</span> <span class="c1">// object</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">strObj</span><span class="p">);</span> <span class="c1">// String{"Choi"}</span>

  <span class="kd">const</span> <span class="nx">numObj</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Number</span><span class="p">(</span><span class="mi">123</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">numObj</span><span class="p">);</span> <span class="c1">// object</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">numObj</span><span class="p">);</span> <span class="c1">// Number{123}</span>

  <span class="kd">const</span> <span class="nx">boolObj</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Boolean</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">boolObj</span><span class="p">);</span> <span class="c1">// object</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">boolObj</span><span class="p">);</span> <span class="c1">// Boolean{true}</span>

  <span class="kd">const</span> <span class="nx">func</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Function</span><span class="p">(</span><span class="dl">'</span><span class="s1">x</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">return x * x</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">func</span><span class="p">);</span> <span class="c1">// function</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">dir</span><span class="p">(</span><span class="nx">func</span><span class="p">);</span> <span class="c1">// f anonymous(x)</span>

  <span class="kd">const</span> <span class="nx">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">arr</span><span class="p">);</span> <span class="c1">// object</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr</span><span class="p">);</span> <span class="c1">// [1, 2, 3]</span>

  <span class="c1">// RegExp 객체(정규표현식) 생성</span>
  <span class="kd">const</span> <span class="nx">regExp</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">RegExp</span><span class="p">(</span><span class="sr">/ab+c/i</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">regExp</span><span class="p">);</span> <span class="c1">// object</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">regExp</span><span class="p">);</span> <span class="c1">// /ab+c/i</span>

  <span class="kd">const</span> <span class="nx">date</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">();</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">date</span><span class="p">);</span> <span class="c1">// object</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">date</span><span class="p">);</span> <span class="c1">// Wed May 04 2022 14:46:45 GMT+0900 (한국 표준시)</span>
</code></pre></div></div>

<h3 id="172-생성자-함수">17.2 생성자 함수</h3>
<h3 id="1721-객체-리터럴에-의한-객체-생성-방식의-문제점">17.2.1 객체 리터럴에 의한 객체 생성 방식의 문제점</h3>
<p>객체 리터럴에 의한 객체 생성 방식은 단 하나의 객체만 생성한다. 동일한 프로퍼티를 갖는 객체를 여러개 생성해야 하는 경우 매번 같은 프로퍼티를 기술해야 하기 떄문에 비효율적이다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">circle1</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">radius</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span>
    <span class="nx">getDiameter</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="mi">2</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">};</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">circle1</span><span class="p">.</span><span class="nx">getDiameter</span><span class="p">());</span> <span class="c1">// 10</span>

  <span class="kd">const</span> <span class="nx">circle2</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">radius</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span>
    <span class="nx">getDiameter</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="mi">2</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">};</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">circle2</span><span class="p">.</span><span class="nx">getDiameter</span><span class="p">());</span> <span class="c1">// 20</span>
</code></pre></div></div>
<p>위 예제에서 원을 표현한 객체인 circle1 객체와 circle2 객체는 객체 고유의 상태 데이터인 radius는 값이 다르지만, 프로퍼티 구조와 getDiameter 메서드가 동일하다. 이렇게 동일한 내용의 메서드를 가진 객체를 여러개 생성하여 사용하는것은 비효율적이다.</p>

<h3 id="1722-생성자-함수에-의한-객체-생성-방식의-장점">17.2.2 생성자 함수에 의한 객체 생성 방식의 장점</h3>
<p>프로퍼티 구조가 동일한 객체 여러 개를 간편하게 생성할 수 있다. 일반 함수와 동일한 방법으로 생성자 함수를 정의하고 <code class="language-plaintext highlighter-rouge">new 연산자와 함께 호출하면 해당 함수는 생성자 함수로 동작</code>한다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">Circle</span><span class="p">(</span><span class="nx">radius</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">radius</span> <span class="o">=</span> <span class="nx">radius</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">getDimeter</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="mi">2</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="p">;</span>
    <span class="p">};</span>
  <span class="p">}</span>
  <span class="c1">// 인스턴스 생성</span>
  <span class="kd">const</span> <span class="nx">circle1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Circle</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">circle2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Circle</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">circle1</span><span class="p">);</span> <span class="c1">// Circle {radius: 5, getDimeter: ƒ}</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">circle2</span><span class="p">);</span> <span class="c1">// Circle {radius: 10, getDimeter: ƒ}</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">circle1</span><span class="p">.</span><span class="nx">getDimeter</span><span class="p">());</span> <span class="c1">// 10</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">circle2</span><span class="p">.</span><span class="nx">getDimeter</span><span class="p">());</span> <span class="c1">// 20</span>


  <span class="kd">const</span> <span class="nx">circle3</span> <span class="o">=</span> <span class="nx">Circle</span><span class="p">(</span><span class="mi">30</span><span class="p">);</span> <span class="c1">// new 연사자와 함께 호출하지 않으면 일반 함수로 동작한다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">circle3</span><span class="p">);</span> <span class="c1">// undefined</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">radius</span><span class="p">);</span> <span class="c1">// 30</span>
</code></pre></div></div>

<h3 id="1723-생성자-함수의-인스턴스-생성-과정">17.2.3 생성자 함수의 인스턴스 생성 과정</h3>
<p>생성자 함수의 역할은 프로퍼티 구조가 동일한 인스터스를 생성하기 위한 템플릿으로서 동작하여 인스턴스를 생성하는 것과 생성된 인스턴스를 초기화(인스턴스 프로퍼티 추가 및 초기값 할당)하는 것이다. 자바스크립트 엔진은 다음과 같은 과정을 거쳐 암묵적인 처리를 통해 인스턴스를 생성하고 반환한다.</p>

<h4 id="1-인스턴스-생성과-this-바인딩">1. 인스턴스 생성과 this 바인딩</h4>
<p>암묵적으로 빈 객체 생성. 이 빈 객체가 생성자 함수가 생성한 인스턴스다. 그리고 인스턴스는 this에 바인딩 된다. 이 처리는 런타임 이전에 실행된다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">Circle</span><span class="p">(</span><span class="nx">radius</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 1. 암묵적 인스턴스 생성과 this 바인딩</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">);</span> <span class="c1">// Circle {}</span>

    <span class="k">this</span><span class="p">.</span><span class="nx">radius</span> <span class="o">=</span> <span class="nx">radius</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">getDimeter</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="mi">2</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="p">;</span>
    <span class="p">};</span>
  <span class="p">}</span>

  <span class="kd">const</span> <span class="nx">circle</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Circle</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span> 
</code></pre></div></div>

<h4 id="2-인스턴스-초기화">2. 인스턴스 초기화</h4>
<p>this에 바인딩되어 있는 인스턴스에 프로퍼티나 메서드를 추가하고 생성자 함수가 인수로 전달받은 초기값을 인스턴스 프로퍼티에 할당하여 초기화 하거나 고정값을 할당한다. 이 처리는 개발자가 기술.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">Circle</span><span class="p">(</span><span class="nx">radius</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 1. 암묵적 인스턴스 생성과 this 바인딩</span>

    <span class="c1">// 2. this에 바인딩 되어 있는 인스턴스를 초기화</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">radius</span> <span class="o">=</span> <span class="nx">radius</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">getDimeter</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="mi">2</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="p">;</span>
    <span class="p">};</span>
  <span class="p">}</span>

  <span class="kd">const</span> <span class="nx">circle</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Circle</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span> 
</code></pre></div></div>

<h4 id="3-인스턴스-반환">3. 인스턴스 반환</h4>
<p>생성자 함수 내부의 모든 처리가 끝나면 완성된 인스턴스가 바인딩된 this가 암묵적으로 반환된다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">Circle</span><span class="p">(</span><span class="nx">radius</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 1. 암묵적 인스턴스 생성과 this 바인딩</span>

    <span class="c1">// 2. this에 바인딩 되어 있는 인스턴스를 초기화</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">radius</span> <span class="o">=</span> <span class="nx">radius</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">getDimeter</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="mi">2</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="p">;</span>
    <span class="p">};</span>

    <span class="c1">// 3. 완성된 인스턴스가 바인딩된 this가 암묵적으로 반환</span>
    <span class="c1">// return {} // 명시적으로 객체를 반환하면 this 반환이 무시된다.</span>
  <span class="p">}</span>

  <span class="c1">// 인스턴스 생성. Circle 생성자 함수는 암묵적으로 this를 반환</span>
  <span class="kd">const</span> <span class="nx">circle</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Circle</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span> 
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">circle</span><span class="p">);</span> <span class="c1">// Circle {radius: 5, getDimeter: ƒ}</span>
</code></pre></div></div>
<p>생성자 함수 내부에서 명시적으로 다른 값을 반환하는 것은 생성자 함수의 기본 동작을 훼손한다. 따라서 return 문을 반드시 생략해야 한다.</p>

<h3 id="1724-내부-메서드call과-construct">17.2.4 내부 메서드[[call]]과 [[Construct]]</h3>
<p>함수는 객체이지만 일반 객체과는 다르다. 일반 객체는 호출할 수 없지만 함수는 호출할 수 있다. 따라서 함수는 내부 슬롯과 내부 메서드는 물론, 함수로서 동작하기 위해 함수 각체만을 위한 [[Ebvironment]], [[FormalParameters]] 등의 내부 슬롯과 [[Call]], [[Construct]] 같은 내부 메서드를 추가로 가지고있다. 일반 함수로서 호출되면 함수 객체의 내부 메서드 [[Call]]이 호출되고, new 연산와 함께 생성자 함수로서 호출하면 [[Construct]]가 호출된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{}</span>

  <span class="nx">foo</span><span class="p">();</span> <span class="c1">// 일반 함수로서 호출되면 [[Call]]이 호출</span>

  <span class="k">new</span> <span class="nx">foo</span><span class="p">();</span> <span class="c1">// 생성자 함수로서 호출하면 [[Construct]]가 호출</span>
</code></pre></div></div>

<p>[[Call]]울 갖는 함수 객체를 callable<br />
[[Construct]]를 갖는 함수 객체를 constructor<br />
[[Construct]]를 갖지 않는 함수 객체를 non-constructor<br />
callable - 호출할 수 있는 객체, 즉 함수<br />
constructor - 생성자 함수로서 호출할 수 있는 함수<br />
constructor - 생성자 함수로서 호출할 수 없는 함수<br />
함수 객체는 반드시 callable이면서 constructor이거나 callable이면서 non-constructor다. 즉 모든 함수 객체는 호출할 수 있지만 모든 함수 객체를 생성자 함수로서 호출할 수 있는 것은 아니다.</p>

<p>(그림 17-1)</p>

<h3 id="1725-constructor와-non-constructor의-구분">17.2.5 constructor와 non-constructor의 구분</h3>
<p>자바스크립트 엔진은 함수 정의를 평가하여 함수 객체를 생성할 때 함수 정의 방식에 따라 함수를 constructor와 non-constructor로 구분한다.</p>
<ul>
  <li>constructor : 함수 선언문, 함수 표현식, 클래스(클래스도 함수다)</li>
  <li>non-constructor : 메서드(ES6의 축약 표현), 화살표 함수</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 일반 함수 정의 : 함수 선언문, 함수 표현식</span>
  <span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{}</span>
  <span class="kd">const</span> <span class="nx">bar</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{};</span>
  <span class="c1">// 프로퍼티 x의 값으로 할단된 것은 일반 함수로 정의된 함수다. 이는 메서드로 인정하지 않는다.</span>
  <span class="kd">const</span> <span class="nx">baz</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">x</span><span class="p">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{}</span>
  <span class="p">}</span>
  <span class="c1">// 일반함수로 정의된 함수만이 constructor다.</span>
  <span class="k">new</span> <span class="nx">foo</span><span class="p">();</span> <span class="c1">// -&gt; foo {}</span>
  <span class="k">new</span> <span class="nx">bar</span><span class="p">();</span> <span class="c1">// -&gt; bar {}</span>
  <span class="k">new</span> <span class="nx">baz</span><span class="p">.</span><span class="nx">x</span><span class="p">();</span> <span class="c1">// -&gt; x {}</span>

  <span class="c1">// 화살표 함수 정의</span>
  <span class="kd">const</span> <span class="nx">arrow</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{};</span>
  <span class="k">new</span> <span class="nx">arrow</span><span class="p">();</span> <span class="c1">// TypeError: arrow is not a constructor</span>

  <span class="c1">// 메서드 정의: ES6의 메서드 축약 표현만 메서드로 인정한다.</span>
  <span class="c1">//  function x() {</span>
  <span class="c1">//   console.log</span>
  <span class="c1">// }</span>
  <span class="c1">// const obj = {x}</span>
  <span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">x</span><span class="p">()</span> <span class="p">{}</span>
  <span class="p">}</span>
  <span class="k">new</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">x</span><span class="p">();</span> <span class="c1">// TypeError: obj.x is not a constructor</span>
</code></pre></div></div>
<p>함수 정의 방식에 따라 constructor와 non-constructor를 구분한다.</p>

<h3 id="1726-new-연산자">17.2.6 new 연산자</h3>
<p>new 연산자와 함께 함수를 호출하면 해당 함수는 생서자 함수로 동작한다. new 연산자와 함께 호출하는 함수는 constructor이어야 한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 생성자 함수로서 정의하지 않는 일반 함수</span>
  <span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="c1">// 생성자 함수로서 정의하지 않은 일반 함수를 new 연산자와 함께 호출</span>
  <span class="kd">let</span> <span class="nx">inst</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">add</span><span class="p">();</span>

  <span class="c1">// 함수가 객체를 반환하지 않았으므로 반환문이 무시된다. 따라서 빈 객체가 생성되어 반환된다.</span>
  <span class="nx">consloe</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">inst</span><span class="p">);</span> <span class="c1">// {}</span>

  <span class="c1">// 객체를 반환하는 일반 함수</span>
  <span class="kd">function</span> <span class="nx">createUser</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">role</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">{</span><span class="nx">name</span><span class="p">,</span> <span class="nx">role</span><span class="p">};</span>
  <span class="p">}</span>

  <span class="c1">// 일반함수를 new 연산자와 함께 호출</span>
  <span class="nx">inst</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">createUser</span><span class="p">(</span><span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">admin</span><span class="dl">'</span><span class="p">);</span>
  <span class="c1">// 함수가 생성한 객체를 반환한다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">inst</span><span class="p">);</span> <span class="c1">// {name: "Choi", role: "admin"}</span>
</code></pre></div></div>

<p>new 연산자 없이 함수를 호출하면 일반 함수로 호출된다. -&gt; [[Call]]이 호출</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">Circle</span><span class="p">(</span><span class="nx">radius</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">radius</span> <span class="o">=</span> <span class="nx">radius</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">getDimeter</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="mi">2</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="p">;</span>
    <span class="p">};</span>
  <span class="p">}</span>

  <span class="c1">// new 연산자 없이 생성자 함수 호출 -&gt; 일반 함수 호출</span>
  <span class="kd">const</span> <span class="nx">circle</span> <span class="o">=</span> <span class="nx">Circle</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span> 
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">circle</span><span class="p">);</span> <span class="c1">// undefined</span>

  <span class="c1">// 일반 함수의 this는 전역 객체 window를 가리킨다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">radius</span><span class="p">);</span> <span class="c1">// 5</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">getDimeter</span><span class="p">());</span> <span class="c1">//10</span>

  <span class="nx">circle</span><span class="p">.</span><span class="nx">getDimeter</span><span class="p">();</span> <span class="c1">//  TypeError: Cannot read properties of undefined</span>
</code></pre></div></div>
<p>위 에제에서 radius 프로퍼티와 getDiameter 메서드는 전역객체의 프로퍼티와 메서드가 된다.<br />
일반 함수와 생성자 함수에 특별한 형식적 차이가 없으므로 생성자 함수는 일반적으로 첫 문자를 대문자로 기술하는 파스칼 케이스로 명명하여 일반 함수과 구별할 수 있도록 해야한다.</p>

<h3 id="1727-newtarget">17.2.7 new.target</h3>
<p>ES6는 new.target을 지원<br />
new.target은 this와 유사하게 construtor인 모든 함수 내부에서 암묵적인 지역 변수와 같이 사용되며 메타 프로퍼티라고 부른다.
함수 내부에서 new.target을 사용하면 new 연산자와 함께 생성자 함수로서 호출되었는지 확인할 수 있다.<br />
new 연산자와 함께 생성자 함수로서 호출되면 함수 내부의 new.target은 함수 자신을 가리킨다. new 연산자 없이 일반 함수로서 호출된 함수 내부의 new.target은 undefined다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">Circle</span><span class="p">(</span><span class="nx">radius</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">new</span><span class="p">.</span><span class="nx">target</span><span class="p">){</span>
      <span class="k">return</span> <span class="k">new</span> <span class="nx">Circle</span><span class="p">(</span><span class="nx">radius</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">radius</span> <span class="o">=</span> <span class="nx">radius</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">getDimeter</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="mi">2</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="p">;</span>
    <span class="p">};</span>
  <span class="p">}</span>

  <span class="c1">// new 연산자 없이 생성자 함수 호출해도 new.target을 통해 생성자 함수로서 호출</span>
  <span class="kd">const</span> <span class="nx">circle</span> <span class="o">=</span> <span class="nx">Circle</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span> 
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">circle</span><span class="p">.</span><span class="nx">getDimeter</span><span class="p">());</span> 
</code></pre></div></div>

<p>빌트인 생성자 함수(Object, String, Number, Boolean, Function, Array, Date, RegExp, Promise 등)는 new 연산자와 함께 호출되었는지를 확인한 후 적절한 값을 반환한다.<br />
Object, function 생성자 함수는 new 연산자가 없거나 있는경우 모두 동일하게 동작.<br />
String, Number, Boolean 생성자 함수는 new 연산자 없이 호출하면 문자열, 숫자, 불리언 값을 반환. -&gt; 데이터 타입 변환 가능</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">();</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span> <span class="c1">// {}</span>

  <span class="nx">obj</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">();</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span> <span class="c1">// {}</span>

  <span class="kd">let</span> <span class="nx">func</span> <span class="o">=</span> <span class="k">new</span> <span class="kd">function</span><span class="p">(</span><span class="dl">'</span><span class="s1">x</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">return x * x</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">func</span><span class="p">);</span> <span class="c1">// f anonymous(x) {return x * x}</span>

  <span class="nx">func</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="dl">'</span><span class="s1">x</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">return x * x</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">func</span><span class="p">);</span> <span class="c1">// f anonymous(x) {return x * x}</span>

  <span class="kd">const</span> <span class="nx">str</span> <span class="o">=</span> <span class="nb">String</span><span class="p">(</span><span class="mi">123</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">str</span><span class="p">,</span> <span class="k">typeof</span> <span class="nx">str</span><span class="p">);</span> <span class="c1">// 123 string</span>

  <span class="kd">const</span> <span class="nx">num</span> <span class="o">=</span> <span class="nb">Number</span><span class="p">(</span><span class="dl">'</span><span class="s1">123</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">num</span><span class="p">,</span> <span class="k">typeof</span> <span class="nx">num</span><span class="p">);</span> <span class="c1">// 123 number</span>

  <span class="kd">const</span> <span class="nx">bool</span><span class="p">;</span> <span class="o">=</span> <span class="nb">Boolean</span><span class="p">(</span><span class="dl">'</span><span class="s1">true</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">bool</span><span class="p">;,</span> <span class="k">typeof</span> <span class="nx">bool</span><span class="p">;);</span> <span class="c1">// true boolean</span>
</code></pre></div></div>

<h4 id="️-this">⭐️ this</h4>
<p><code class="language-plaintext highlighter-rouge">this</code>는 객체 자신의 프로퍼티나 메서드를 참조하기 위한 자기 참조 변수다. this 바인딩은 함수 호출 방식에 따라 동적으로 결정된다.</p>

<table>
  <thead>
    <tr>
      <th>함수 호출 방식</th>
      <th>this가 가리키는 값 (this 바인딩)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>일반 함수로서 호출</td>
      <td>전역 객체</td>
    </tr>
    <tr>
      <td>메서드로서 호출</td>
      <td>메서드를 호출한 객체(마침표 앞의 객체)</td>
    </tr>
    <tr>
      <td>생성자 함수로서 호출</td>
      <td>생성자 함수가 (미래에) 생성할 인스터스</td>
    </tr>
  </tbody>
</table>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="c1">// 일반 함수 -&gt; 전역 객체</span>
  <span class="nx">foo</span><span class="p">();</span> <span class="c1">// window</span>

  <span class="c1">// 메서드 -&gt; 메서드를 호출한 객체</span>
  <span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="nx">foo</span><span class="p">};</span> <span class="c1">// ES6 프로퍼티 축약 표현</span>
  <span class="nx">obj</span><span class="p">.</span><span class="nx">foo</span><span class="p">();</span> <span class="c1">// obj</span>

  <span class="c1">// 생성자 함수 -&gt; 생성될 인스턴스</span>
  <span class="kd">const</span> <span class="nx">inst</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">foo</span><span class="p">();</span> <span class="c1">// inst</span>

</code></pre></div></div>]]></content><author><name>Hyejic</name></author><category term="js" /><category term="javascript" /><summary type="html"><![CDATA[모던 자바스크립트 Deep Dive 17장 생성자 함수에 의한 객체 생성 내용 정리]]></summary></entry><entry><title type="html">16장 프로퍼티 어트리뷰트</title><link href="http://localhost:4000/js/modernJS16/" rel="alternate" type="text/html" title="16장 프로퍼티 어트리뷰트" /><published>2022-05-02T00:00:00+09:00</published><updated>2022-05-02T00:00:00+09:00</updated><id>http://localhost:4000/js/modernJS16</id><content type="html" xml:base="http://localhost:4000/js/modernJS16/"><![CDATA[<p><br /></p>

<h1 id="16장-프로퍼티-어트리뷰트">16장 프로퍼티 어트리뷰트</h1>

<h2 id="161-내부-슬롯과-내부-메서드">16.1 내부 슬롯과 내부 메서드</h2>
<p>내부 슬롯과 매부 메서드는 자바스크립트 엔진의 구현 알고리즘을 설명하기 위해 ECMAScript 사양에서 사용하는 의사 프로퍼티와 의사 메서드다.<br />
모든 객체는 [[Prototype]]이라는 내부 슬롯을 갖는다. 내부 슬롯은 자바스크립트 엔진의 내부 로직이므로 원칙적으로 직접 접근할 수 없지만 [[Prototype]] 내부 슬록의 경우, <strong>proto</strong> 를 통해 간접적으로 접근 할 수 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">o</span> <span class="o">=</span> <span class="p">{};</span>
  <span class="nx">o</span><span class="p">.[[</span><span class="nx">Prototype</span><span class="p">]]</span> <span class="c1">// SyntaxError: Unexpected token'['</span>
  <span class="nx">o</span><span class="p">.</span><span class="nx">__proto__</span> <span class="c1">// Object.prototype</span>
</code></pre></div></div>

<h3 id="162-프로퍼티-어트리뷰트와-프로퍼티-디스크립터-객체">16.2 프로퍼티 어트리뷰트와 프로퍼티 디스크립터 객체</h3>
<p>자바스크립트 엔진은 프로퍼티를 생성할 때 프로퍼티의 상태를 나타내는 프로퍼티 어트리뷰트를 기본값으로 자동 정의한다.<br />
프로퍼티 어트리뷰트 -&gt; [[Value]], [[Writable]], [[Enumerable]], [[Configurable]]<br />
프로퍼티 어트리뷰트는 내부 슬롯이기 때문에 직접 접근이 불가능하고 Object.getOwnPropertyDescriptor 메서드를 사용하여 간접적으로 접근 가능. 존재하지 않는 프로퍼티는 undefined 반환.<br />
<code class="language-plaintext highlighter-rouge">Object.getOwnPropertyDescriptor</code> 메서드를 호출할 때 매개변수 전달. 첫번째 객체의 참조, 두번째 프로퍼티 키(문자열)<br />
<code class="language-plaintext highlighter-rouge">Object.getOwnPropertyDescriptors</code> 모든 프로퍼티의 프로퍼티 어트리뷰트 정보 제공.(ES8에서 도입)</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span>
  <span class="p">};</span>
  <span class="c1">// 매개변수 전달. 첫번째 객체의 참조, 두번째 프로퍼티 키(문자열)</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">getOwnPropertyDescriptor</span><span class="p">(</span><span class="nx">person</span><span class="p">,</span> <span class="dl">'</span><span class="s1">name</span><span class="dl">'</span><span class="p">));</span> 
  <span class="c1">// {value: 'Choi', writable: true, enumerable: true, configurable: true}</span>

  <span class="c1">// 존재하지 않는 프로퍼티</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">getOwnPropertyDescriptor</span><span class="p">(</span><span class="nx">person</span><span class="p">,</span> <span class="dl">'</span><span class="s1">age</span><span class="dl">'</span><span class="p">));</span> 
  <span class="c1">// undefined</span>

  <span class="nx">person</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="mi">30</span><span class="p">;</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">getOwnPropertyDescriptors</span><span class="p">(</span><span class="nx">person</span><span class="p">));</span> 
  <span class="c1">// age: {value: 30, writable: true, enumerable: true, configurable: true}</span>
  <span class="c1">// name: {value: 'Choi', writable: true, enumerable: true, configurable: true}</span>

</code></pre></div></div>

<h2 id="163-데이터-프로퍼티와-접근자-프로퍼티">16.3 데이터 프로퍼티와 접근자 프로퍼티</h2>
<ul>
  <li>데이터 프로퍼티<br />
키와 값으로 구성된 일반적인 프로퍼티다. 지금까지 살펴본 모든 프로퍼티는 데이터 프로퍼티다.</li>
  <li>접근자 프로퍼티<br />
자체적으로는 값을 갖지 않고 다른 데이터 프로퍼티의 값을 읽거나 저장할 때 호출되는 접근자 함수로 구성된 프로퍼티다.</li>
</ul>

<h3 id="1631-데이터-프로퍼티">16.3.1 데이터 프로퍼티</h3>
<p>자바스크립트 엔진이 프로퍼티를 생성할 때 기본 값으로 자동 정의된다.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">프로퍼티<br />어트리뷰트</th>
      <th style="text-align: center">프로퍼티 디스크립터<br />객체의 프로퍼티</th>
      <th style="text-align: left">설명</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">[[Value]]</td>
      <td style="text-align: center">value</td>
      <td style="text-align: left">- 프로퍼티 키를 통해 <code class="language-plaintext highlighter-rouge">프로퍼티 값에 접근하면 반환</code>되는 값이다.<br /> - 프로퍼티 키를 통해 프로퍼티 값을 변경하면 [[Value]]에 값을 재할당한다. 이때 프로퍼티가 없으면 프로퍼티를 동적 생성하고 생성된 프로퍼티의 [[Value]]에 값을 저장한다.</td>
    </tr>
    <tr>
      <td style="text-align: center">[[Writable]]</td>
      <td style="text-align: center">writable</td>
      <td style="text-align: left">- 프로퍼티 <code class="language-plaintext highlighter-rouge">값의 변경 기능 여부</code>를 나타내며 불리언 값을 갖는다. <br /> [[Writable]]의 값이 false인 경우 해당 프로퍼티의 [[Value]]의 값을 변경할 수 없는 읽기 전용 프로퍼티가 된다.</td>
    </tr>
    <tr>
      <td style="text-align: center">[[Enumerable]]</td>
      <td style="text-align: center">enumerable</td>
      <td style="text-align: left">- 프로퍼티의 <code class="language-plaintext highlighter-rouge">열거 가능 여부</code>를 나타내며 불리언 값을 갖는다. <br /> - [[Enumerable]]의 값이 false인 경우 해당 프로퍼티는 for…in 문이나 Object.keys 메서드 등으로 열거할 수 없다.</td>
    </tr>
    <tr>
      <td style="text-align: center">[[Configurable]]</td>
      <td style="text-align: center">configurable</td>
      <td style="text-align: left">- 프로퍼티의 <code class="language-plaintext highlighter-rouge">재정의 기능 여부</code>를 나타내며 불리언 값을 갖는다. <br /> - [[Configurable]]의 값이 false인 경우 해당 프로퍼티의 삭제, 프로퍼티 어트리뷰트 값이 변경이 금지된다. 단, [[Writable]]이 true인 경우 [[Value]]의 변경과 [[Writable]]을 false로 변경하는 것은 허용된다.</td>
    </tr>
  </tbody>
</table>

<h3 id="1632-접근자-프로퍼티">16.3.2 접근자 프로퍼티</h3>
<p>저채적으로 값을 갖지 않고 다른 데이터 프로퍼티의 값을 읽거나 저장할 때 사용하는 접근자 함수로 구성된 프로퍼티다.<br />
접근자 함수는 getter/setter 함수라고도 부른다.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">프로퍼티<br />어트리뷰트</th>
      <th style="text-align: center">프로퍼티 디스크립터<br />객체의 프로퍼티</th>
      <th style="text-align: left">설명</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">[[Get]]</td>
      <td style="text-align: center">get</td>
      <td style="text-align: left">- 접근자 프로퍼티를 통해 데이터 프로퍼티의 <code class="language-plaintext highlighter-rouge">값을 읽을 때</code> 호출되는 접근자 함수다. 즉, 접근자 프로퍼티 키로 프로퍼티 값에 접근하면 프로퍼티 어트리뷰트 [[Get]]의 값, 즉 getter 함수가 호출되고 그 결과가 프로퍼티 값으로 반환된다.</td>
    </tr>
    <tr>
      <td style="text-align: center">[[Set]]</td>
      <td style="text-align: center">set</td>
      <td style="text-align: left">- 접근자 프로퍼티를 총해 데이터 프로퍼티의 <code class="language-plaintext highlighter-rouge">값을 저장할 때</code> 호출되는 접근다 함수다. 즉, 접근자 프로퍼티 값을 저장하면 프로퍼티 어트리뷰트 [[Set]]의 값, 즉 setter 함수가 호출되고 그 결과가 프로퍼티 값으로 저장된다.</td>
    </tr>
    <tr>
      <td style="text-align: center">[[Enumerable]]</td>
      <td style="text-align: center">enumerable</td>
      <td style="text-align: left">- 프로퍼티의 <code class="language-plaintext highlighter-rouge">열거 가능 여부</code>를 나타내며 불리언 값을 갖는다. <br /> - [[Enumerable]]의 값이 false인 경우 해당 프로퍼티는 for…in 문이나 Object.keys 메서드 등으로 열거할 수 없다.</td>
    </tr>
    <tr>
      <td style="text-align: center">[[Configurable]]</td>
      <td style="text-align: center">configurable</td>
      <td style="text-align: left">- 프로퍼티의 <code class="language-plaintext highlighter-rouge">재정의 기능 여부</code>를 나타내며 불리언 값을 갖는다. <br /> - [[Configurable]]의 값이 false인 경우 해당 프로퍼티의 삭제, 프로퍼티 어트리뷰트 값이 변경이 금지된다. 단, [[Writable]]이 true인 경우 [[Value]]의 변경과 [[Writable]]을 false로 변경하는 것은 허용된다.</td>
    </tr>
  </tbody>
</table>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">firstName</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Hyeji</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">lastName</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span><span class="p">,</span>
  
    <span class="c1">// getter 함수</span>
    <span class="kd">get</span> <span class="nx">fullName</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="s2">`</span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">firstName</span><span class="p">}</span><span class="s2"> </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">lastName</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span>
    <span class="p">},</span>

    <span class="c1">// setter 함수</span>
    <span class="kd">set</span> <span class="nx">fullName</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
      <span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">firstName</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span><span class="p">]</span> <span class="o">=</span> <span class="nx">name</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="dl">'</span><span class="s1"> </span><span class="dl">'</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">};</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">+</span> <span class="dl">'</span><span class="s1"> </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">person</span><span class="p">.</span><span class="nx">lastName</span><span class="p">);</span> <span class="c1">// Hyeji Choi</span>

  <span class="c1">// 접근자 프로퍼티 fullName에 값을 저장하면 setter함수가 호출</span>
  <span class="nx">person</span><span class="p">.</span><span class="nx">fullName</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Hyeji Kim</span><span class="dl">"</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span> <span class="c1">// {firstName: 'Hyeji', lastName: 'Kim'}</span>

  <span class="c1">// 접근자 프로퍼티 fullName에 접근하면 getter 함수가 호출된다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">fullName</span><span class="p">);</span> <span class="c1">// Hyeji Kim</span>

  <span class="c1">// firstName은 데이터 프로퍼티다.</span>
  <span class="kd">let</span> <span class="nx">descriptor</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">getOwnPropertyDescriptor</span><span class="p">(</span><span class="nx">person</span><span class="p">,</span> <span class="dl">'</span><span class="s1">firstName</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">descriptor</span><span class="p">);</span> 
  <span class="c1">// {value: 'Hyeji', writable: true, enumerable: true, configurable: true}</span>

  <span class="c1">// fullName은 접근자 프로퍼티</span>
  <span class="nx">descriptor</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">getOwnPropertyDescriptor</span><span class="p">(</span><span class="nx">person</span><span class="p">,</span> <span class="dl">'</span><span class="s1">fullName</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">descriptor</span><span class="p">);</span> 
  <span class="c1">// {enumerable: true, configurable: true, get: ƒ, set: ƒ}</span>

</code></pre></div></div>

<p>접근자 프로퍼티 fullName으로 프로퍼티 값에 접근하면 내부적으로 [[Get]] 내부 메서드가 호출되어 다음과 같이 동작한다.</p>
<ol>
  <li>프로퍼티 키가 유효한지 확인한다. 프포퍼티 키는 문자열 또는 심벌이어야 한다. 프로퍼티 키 “fullName”은 문자열이므로 유효한 프로퍼티 키다.</li>
  <li>프로토타입 체인에서 프로퍼티를 검색한다. person 객체에 fullName으로 프로퍼티가 존재한다.</li>
  <li>검색된 fullName 프로퍼티가 에이터 프로퍼티인지 접근자 프로퍼티인지 확인한다. fullName 프로퍼티는 접근자 프로퍼티다.</li>
  <li>접근자 프로퍼티 fullName의 프로퍼티 어트리뷰트 [[Get]]의 값, 즉 getter 함수를 호출하여 그 결과를 반환한다. 프로퍼티 fullName의 프로퍼티 어트리뷰트 [[Get]]의 값은 Object.getOwnPropertyDescriptor 메서드가 반환하는 프로퍼티 디스크립터 객체의 get 프로퍼티 값과 같다.</li>
</ol>

<h2 id="164-프로퍼티-정의">16.4 프로퍼티 정의</h2>
<p>Object.defineProperty 메서드를 사용하면 프로퍼티의 어트리뷰트를 정의할 수 있다. 인수로는 객체의 참조와 데이터 프로퍼티의 키인 문자열, 프로퍼티 디스크립터 객체를 전달한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{};</span>

  <span class="c1">// 데이터 프로퍼티 정의</span>
  <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">person</span><span class="p">,</span> <span class="dl">'</span><span class="s1">firstName</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">value</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Hyeji</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">writable</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="na">enumerable</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="na">configurable</span><span class="p">:</span> <span class="kc">true</span>
  <span class="p">});</span>

  <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">person</span><span class="p">,</span> <span class="dl">'</span><span class="s1">lastName</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">value</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span>
  <span class="p">});</span>

  <span class="kd">let</span> <span class="nx">descriptor</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">getOwnPropertyDescriptor</span><span class="p">(</span><span class="nx">person</span><span class="p">,</span> <span class="dl">'</span><span class="s1">firstName</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">descriptor</span><span class="p">);</span>
  <span class="c1">// {value: 'Hyeji', writable: true, enumerable: false, configurable: true}</span>

  <span class="c1">// 디스크립터 객체의 프포퍼티를 누락시키면 undefined, false가 기본값이다.</span>
  <span class="nx">descriptor</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">getOwnPropertyDescriptor</span><span class="p">(</span><span class="nx">person</span><span class="p">,</span> <span class="dl">'</span><span class="s1">lastName</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">descriptor</span><span class="p">);</span>
  <span class="c1">// {value: 'Choi', writable: false, enumerable: false, configurable: false}</span>
  
  <span class="c1">// [[Enumerable]]의 값이 false인 경우</span>
  <span class="c1">// 해당 프로퍼티는 for...in문이나 Object.keys 등으로 열거할 수 없다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">person</span><span class="p">))</span> <span class="c1">// ["firstName"]</span>

  <span class="c1">// [[Writable]]의 값이 false인 경우 해당 프로퍼티의 [[value]]값을 변경할 수 없다.</span>
  <span class="c1">// 변경할 수 없는 값을 변경하려고 하면 에러는 발생하지 않고 무시된다.</span>
  <span class="nx">person</span><span class="p">.</span><span class="nx">lastName</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Kim</span><span class="dl">'</span><span class="p">;</span>

  <span class="c1">// [[Configurable]]의 값이 false인 경우 해당 프로퍼티를 삭제할 수 없다.</span>
  <span class="c1">// false인 프로퍼티를 삭제하려고 하면 에러는 발생하지 않고 무시된다.</span>
  <span class="k">delete</span> <span class="nx">person</span><span class="p">.</span><span class="nx">lastName</span><span class="p">;</span>

  <span class="c1">// [[Configurable]]의 값이 false인 경우 해당 프로퍼티를 재정의 할 수 없다.</span>
  <span class="c1">// Object.getOwnPropertyDescriptor(person, 'lastName', {enumerable: ture});</span>
  <span class="c1">// Uncaught TypeError: Cannot redefine property: lastName</span>

  <span class="nx">descriptor</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">getOwnPropertyDescriptor</span><span class="p">(</span><span class="nx">person</span><span class="p">,</span> <span class="dl">'</span><span class="s1">lastName</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">descriptor</span><span class="p">);</span>
  <span class="c1">// {value: 'Choi', writable: false, enumerable: false, configurable: false}</span>

  <span class="c1">// 접근자 프로퍼티</span>
  <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">person</span><span class="p">,</span> <span class="dl">'</span><span class="s1">fullName</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
    <span class="c1">// getter</span>
    <span class="kd">get</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="s2">`</span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">firstName</span><span class="p">}</span><span class="s2"> </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">lastName</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span>
    <span class="p">},</span>

    <span class="c1">// setter 함수</span>
    <span class="kd">set</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
      <span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">firstName</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span><span class="p">]</span> <span class="o">=</span> <span class="nx">name</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="dl">'</span><span class="s1"> </span><span class="dl">'</span><span class="p">);</span>
    <span class="p">},</span>
    <span class="na">enumerable</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="na">configurable</span><span class="p">:</span> <span class="kc">true</span>
  <span class="p">});</span>

  <span class="nx">descriptor</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">getOwnPropertyDescriptor</span><span class="p">(</span><span class="nx">person</span><span class="p">,</span> <span class="dl">'</span><span class="s1">fullName</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">fullName</span><span class="dl">'</span><span class="p">,</span> <span class="nx">descriptor</span><span class="p">);</span>
  <span class="c1">// fullName {enumerable: true, configurable: true, get: ƒ, set: ƒ}</span>

  <span class="nx">person</span><span class="p">.</span><span class="nx">fullName</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Hyeji Choi</span><span class="dl">'</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span>
  <span class="c1">// fullName {enumerable: true, configurable: true, get: ƒ, set: ƒ}</span>
</code></pre></div></div>

<p>프로퍼티 디스크립터 객체에서 생략된 어트리뷰트는 다음과 같이 기본값이 적용된다.</p>
<ul>
  <li>value, get, set -&gt; undefined</li>
  <li>writable, enumerable, configurable -&gt; false</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">Object.defineProperties</code> 메서드를 사용하면 여러개의 프로퍼티를 한 번에 정의할 수 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{};</span>

  <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperties</span><span class="p">(</span><span class="nx">person</span><span class="p">,</span> <span class="p">{</span>
    <span class="c1">// 데이터 프로퍼티 정의</span>
    <span class="na">firstName</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">value</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Hyeji</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">writable</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">enumerable</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">configurable</span><span class="p">:</span> <span class="kc">true</span>
    <span class="p">},</span>
    <span class="na">lastName</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">value</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">writable</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">enumerable</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">configurable</span><span class="p">:</span> <span class="kc">true</span>
    <span class="p">},</span>
    <span class="c1">// 접근자 프로퍼티 정의</span>
    <span class="na">fullName</span><span class="p">:</span> <span class="p">{</span>
      <span class="kd">get</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s2">`</span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">firstName</span><span class="p">}</span><span class="s2"> </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">lastName</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span>
      <span class="p">},</span>

      <span class="kd">set</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
        <span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">firstName</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span><span class="p">]</span> <span class="o">=</span> <span class="nx">name</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="dl">'</span><span class="s1"> </span><span class="dl">'</span><span class="p">);</span>
      <span class="p">},</span>
      <span class="na">enumerable</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">configurable</span><span class="p">:</span> <span class="kc">true</span>
    <span class="p">}</span>
  <span class="p">});</span>

  <span class="nx">person</span><span class="p">.</span><span class="nx">fullName</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Hyeji Choi</span><span class="dl">'</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span>
  <span class="c1">// {firstName: 'Hyeji', lastName: 'Choi'}</span>
</code></pre></div></div>

<h2 id="165-객체-변경-방지">16.5 객체 변경 방지</h2>
<p>자바스크립트는 객체의 변경을 방지하는 다양한 메서드를 제공한다. 객체 변경 방지 메서드들은 객체의 변경을 금지하는 강도가 다르다.
구분 | 메서드 | 프로퍼티 추가 | 프로퍼티 삭제 | 프로퍼티 값 읽기 | 프로퍼티 값 쓰기 | 프로퍼티 어트리뷰트 재정의
:–: | :–: | :–: | :–: | :–: | :–: | :–:
객체 확장 금지 | Object.preventExtensions | X | O | O | O | O
객체 밀봉 | Object.seal | X | X | O | O | X
객체 동결 | Object.freeze | X | X | O | X | X</p>

<h3 id="1651-객체-확장-금지">16.5.1 객체 확장 금지</h3>
<p>Object.preventExtensions 메서드는 객체의 확장을 금지한다. 즉, 확장이 금지된 객체는 프로퍼티 추가가 금지된다.<br />
Object.isExtensible 메서드로 확장 가능한 객체인지 확인 가능.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span> <span class="p">};</span>

  <span class="c1">// 확장 가능한 객체인지 확인 가능</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">isExtensible</span><span class="p">(</span><span class="nx">person</span><span class="p">));</span> <span class="c1">// true</span>

  <span class="c1">// person 객체의 확장을 금지 시킴.</span>
  <span class="nb">Object</span><span class="p">.</span><span class="nx">preventExtensions</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">isExtensible</span><span class="p">(</span><span class="nx">person</span><span class="p">));</span> <span class="c1">// false -&gt; 확장 금지 상태</span>

  <span class="nx">person</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span> <span class="c1">// 프로퍼티 추가 금지. 에러 없이 무시된다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span> <span class="c1">// {name: "Choi"}</span>

  <span class="c1">// 프로퍼티 추가는 금지되지만 삭제는 가능.</span>
  <span class="k">delete</span> <span class="nx">person</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span> <span class="c1">// {}</span>

  <span class="c1">// 프로퍼티 정의에 의한 프로퍼티 추가도 금지된다.</span>
  <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">person</span><span class="p">,</span> <span class="dl">'</span><span class="s1">age</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span> <span class="na">value</span><span class="p">:</span> <span class="mi">20</span> <span class="p">});</span>
  <span class="c1">// TypeError: Cannot define property age, object is not extensible</span>
</code></pre></div></div>

<h3 id="1652-객체-밀봉">16.5.2 객체 밀봉</h3>
<p>객체 밀봉이란 프로퍼티 <code class="language-plaintext highlighter-rouge">추가 및 삭제</code>와 프로퍼티 어트리뷰트 <code class="language-plaintext highlighter-rouge">재정의 금지</code>를 의미한다. 밀봉된 객체는 <code class="language-plaintext highlighter-rouge">읽기와 쓰기만 가능</code>하다.<br />
Object.isSealed 메서드로 밀봉된 객체인지 확인 가능.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span> <span class="p">};</span>

  <span class="c1">// person 객체는 밀봉된 객체가 아니다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">isSealed</span><span class="p">(</span><span class="nx">person</span><span class="p">));</span> <span class="c1">// false</span>

  <span class="c1">// person 객체를 밀봉</span>
  <span class="nb">Object</span><span class="p">.</span><span class="nx">seal</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">isSealed</span><span class="p">(</span><span class="nx">person</span><span class="p">));</span> <span class="c1">// true</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">getOwnPropertyDescriptors</span><span class="p">(</span><span class="nx">person</span><span class="p">));</span> 
  <span class="c1">// name: {value: 'Choi', writable: true, enumerable: true, configurable: false}</span>

  <span class="c1">// 프로퍼티 추가 금지</span>
  <span class="nx">person</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span> <span class="c1">// 무시</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span> <span class="c1">// {name: "Choi"}</span>

  <span class="c1">// 프로퍼티 삭제 금지</span>
  <span class="k">delete</span> <span class="nx">person</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span> <span class="c1">// 무시</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span> <span class="c1">// {name: "Choi"}</span>

  <span class="c1">// 프로퍼티 값 갱신 가능</span>
  <span class="nx">person</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Kim</span><span class="dl">'</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span> <span class="c1">// {name: "Kim"}</span>

  <span class="c1">// 프로퍼티 재정의 금지</span>
  <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">person</span><span class="p">,</span> <span class="dl">'</span><span class="s1">name</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span> <span class="na">configurable</span><span class="p">:</span> <span class="kc">true</span> <span class="p">});</span>
  <span class="c1">// TypeError: Cannot redefine property: name</span>
</code></pre></div></div>

<h3 id="1653-객체-동결">16.5.3 객체 동결</h3>
<p>객체 동결이란 프로퍼티 <code class="language-plaintext highlighter-rouge">추가 및 삭제</code>와 프로퍼티 어트리뷰트 <code class="language-plaintext highlighter-rouge">재정의</code> 금지, 프로퍼티 <code class="language-plaintext highlighter-rouge">값 갱신 금지</code>를 의미한다. 동결된 객체는 <code class="language-plaintext highlighter-rouge">읽기만 가능.</code><br />
Object.isFrozen 메서드로 동결된 객체인지 확인 가능.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span> <span class="p">};</span>

  <span class="c1">// person 객체는 동결된 객체가 아니다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">isFrozen</span><span class="p">(</span><span class="nx">person</span><span class="p">));</span> <span class="c1">// false</span>

  <span class="c1">// person 객체를 동결</span>
  <span class="nb">Object</span><span class="p">.</span><span class="nx">freeze</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">isFrozen</span><span class="p">(</span><span class="nx">person</span><span class="p">));</span> <span class="c1">// true</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">getOwnPropertyDescriptors</span><span class="p">(</span><span class="nx">person</span><span class="p">));</span> 
  <span class="c1">// name: {value: 'Choi', writable: false, enumerable: true, configurable: false}</span>

  <span class="c1">// 프로퍼티 추가 금지</span>
  <span class="nx">person</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span> <span class="c1">// 무시</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span> <span class="c1">// {name: "Choi"}</span>

  <span class="c1">// 프로퍼티 삭제 금지</span>
  <span class="k">delete</span> <span class="nx">person</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span> <span class="c1">// 무시</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span> <span class="c1">// {name: "Choi"}</span>

  <span class="c1">// 프로퍼티 값 갱신 금지</span>
  <span class="nx">person</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Kim</span><span class="dl">'</span><span class="p">;</span> <span class="c1">// 무시</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span> <span class="c1">// {name: "Choi"}</span>

  <span class="c1">// 프로퍼티 재정의 금지</span>
  <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">person</span><span class="p">,</span> <span class="dl">'</span><span class="s1">name</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span> <span class="na">configurable</span><span class="p">:</span> <span class="kc">true</span> <span class="p">});</span>
  <span class="c1">// TypeError: Cannot redefine property: name</span>
</code></pre></div></div>

<h3 id="1654-불변-객체">16.5.4 불변 객체</h3>
<p>변경 방지 메서드 들은 얕은 변경 방지로 중첩된 객체에는 영향을 주지 못한다. 중첩 객체까지 영향을 주려면 객체를 값으로 갖는 모든 프로퍼티에 대해 재귀적으로 메서드를 호출해야 한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 객체 동결 재귀적 호출</span>
  <span class="kd">function</span> <span class="nx">deepFreeze</span><span class="p">(</span><span class="nx">target</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 객체이고 동결되지 않은 객체만 동결한다.</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">target</span> <span class="o">&amp;&amp;</span> <span class="k">typeof</span> <span class="nx">target</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">object</span><span class="dl">'</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nb">Object</span><span class="p">.</span><span class="nx">isFrozen</span><span class="p">(</span><span class="nx">target</span><span class="p">))</span> <span class="p">{</span>
      <span class="nb">Object</span><span class="p">.</span><span class="nx">freeze</span><span class="p">(</span><span class="nx">target</span><span class="p">);</span>
      <span class="c1">// 모든 프로퍼티를 순회하여 재귀적으로 동결.</span>
      <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">target</span><span class="p">).</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">key</span> <span class="o">=&gt;</span> <span class="nx">deepFreeze</span><span class="p">(</span><span class="nx">target</span><span class="p">[</span><span class="nx">key</span><span class="p">]));</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">target</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="kd">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">address</span><span class="p">:</span> <span class="p">{</span><span class="na">city</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Seoul</span><span class="dl">'</span><span class="p">}</span>
  <span class="p">};</span>

  <span class="c1">// 깊은 객체 동결</span>
  <span class="nx">deepFreeze</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">isFrozen</span><span class="p">(</span><span class="nx">person</span><span class="p">));</span> <span class="c1">// true</span>
  <span class="c1">// 중첩된 객체까지 동결</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">isFrozen</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">address</span><span class="p">));</span> <span class="c1">// true</span>

  <span class="nx">person</span><span class="p">.</span><span class="nx">address</span><span class="p">.</span><span class="nx">city</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Busan</span><span class="dl">'</span><span class="p">;</span> <span class="c1">// 추가,삭제,재할당,갱신 금지 -&gt; 무시</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span> <span class="c1">// {name: 'Choi', address: {city: 'Seoul'}}</span>

</code></pre></div></div>]]></content><author><name>Hyejic</name></author><category term="js" /><category term="javascript" /><summary type="html"><![CDATA[모던 자바스크립트 Deep Dive 16장 프로퍼티 어트리뷰트 내용 정리]]></summary></entry><entry><title type="html">15장 let, const 키워드와 블록 레벨 스코프</title><link href="http://localhost:4000/js/modernJS15/" rel="alternate" type="text/html" title="15장 let, const 키워드와 블록 레벨 스코프" /><published>2022-04-26T00:00:00+09:00</published><updated>2022-04-26T00:00:00+09:00</updated><id>http://localhost:4000/js/modernJS15</id><content type="html" xml:base="http://localhost:4000/js/modernJS15/"><![CDATA[<p><br /></p>

<h1 id="15장-let-const-키워드와-블록-레벨-스코프">15장 let, const 키워드와 블록 레벨 스코프</h1>

<h2 id="151-var-키워드로-선언한-변수의-문제점">15.1 var 키워드로 선언한 변수의 문제점</h2>
<h3 id="1511-변수-중복-선언-허용">15.1.1 변수 중복 선언 허용</h3>
<p>var 키워드로 선언한 변수는 중복 선언이 가능하다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="kd">var</span> <span class="nx">y</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

  <span class="c1">// var 키워드로 선언된 변수는 같은 스코프 내에서 중복 선언을 허용</span>
  <span class="c1">// 초기화 문이 있는 경우 자바스크립트 엔지에 의해 var 키워드가 없는 것처럼 동작. 재선언.</span>
  <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
  <span class="c1">// 초기화문이 없는 변수 선언문은 무시된다.</span>
  <span class="kd">var</span> <span class="nx">y</span><span class="p">;</span> 

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span> <span class="c1">// 100</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">y</span><span class="p">);</span> <span class="c1">// 1</span>
</code></pre></div></div>
<p>위 예제와 같이 동일한 이름의 변수를 중복 선언하면서 값까지 할당했다면 의도치 않게 먼저 선언된 변수 값이 변경되는 부작용 발생.</p>

<h3 id="1512-함수-레벨-스코프">15.1.2 함수 레벨 스코프</h3>
<p>var 키워드로 선언한 변수는 오로지 함수의 코드 블록만을 지역 스코프로 인정한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

  <span class="k">if</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// var 키워드로 선언된 변수는 함수의 코드 블록만을 지역스코프로 인정하기 때문에 x 변수가 중복 선언된다.</span>
    <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="c1">// 10</span>
</code></pre></div></div>

<h3 id="1513-변수-호이스팅">15.1.3 변수 호이스팅</h3>
<p>변수 호이스팅에 의해 var 키워드로 선언한 변수는 변수 선언문이 이전에 참조할 수 있다. 단, 할당문 이전에 변수를 참조하면 언제나 undefined를 반환한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 이 시점에 호이스팅에 의해 foo변수가 선언</span>
  <span class="c1">// 변수 foo는 undefined로 초기화</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span> <span class="c1">// undefined</span>

  <span class="c1">// 변수에 값을 할당</span>
  <span class="nx">foo</span> <span class="o">=</span> <span class="mi">123</span><span class="p">;</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">)</span> <span class="c1">// 123</span>

  <span class="c1">// 변수 선언은 런타임 이전에 자바스크립트 엔진에 의해 암묵적으로 실행된다.</span>
  <span class="kd">var</span> <span class="nx">foo</span><span class="p">;</span>
</code></pre></div></div>
<p>변수 선언문 이전에 변수를 참조할 수 있지만 프로그램의 흐름상 맞지 않고 가독성을 떨어뜨리며 오류를 발생시킬 여지를 남긴다.</p>

<h2 id="152-let-키워드">15.2 let 키워드</h2>
<p>ES6에서 도입</p>

<h3 id="1521-변수-중복-선언-금지">15.2.1 변수 중복 선언 금지</h3>
<p>let 키워드로 이름이 같은 변수를 중복 선언하면 문법에러가 발생</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">let</span> <span class="nx">bar</span> <span class="o">=</span> <span class="mi">123</span><span class="p">;</span>
  
  <span class="kd">let</span> <span class="nx">bar</span> <span class="o">=</span> <span class="mi">456</span><span class="p">;</span> <span class="c1">// SyntaxError: Identifier 'bar' has already veen declared</span>
</code></pre></div></div>

<h3 id="1522-블록-레벨-스코프">15.2.2 블록 레벨 스코프</h3>
<p>let 키워드로 선언한 변수는 모든 코드 블록을 지역 스코프로 인정하는 블록 레벨 스코프를 따른다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">let</span> <span class="nx">foo</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// 전역변수</span>
  <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">foo</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="c1">// 지역변수</span>
    <span class="kd">let</span> <span class="nx">bar</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span> <span class="c1">// 지역변수</span>
  <span class="p">}</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span> <span class="c1">// 1</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">bar</span><span class="p">);</span> <span class="c1">// ReferenceError: bar is not defined -&gt; 전역에서 지역변수를 참조할 수 없다.</span>
</code></pre></div></div>

<p>함수도 코드 블록이으로 스코프를 따른다. 함수 내의 코드블록은 함수 레벨 스코프에 중첩된다.</p>

<p><img width="343" alt="그림 15-1 블록 레벨 스코프의 중첩" src="https://user-images.githubusercontent.com/44577555/165247412-a00c6168-efa6-4253-ac36-3a15f03ed5ae.png" /></p>

<h3 id="1523-변수-호이스팅">15.2.3 변수 호이스팅</h3>
<p>let 키워드로 선언한 변수는 변수 호이스팅이 발생하지 않는 것처럼 동작한다. 변수 선언문 이전에 참조하면 ReferenceError 발생.<br />
let 키워드 변수는 var 키워드 변수와 다르게 <code class="language-plaintext highlighter-rouge">선언 단계</code>와 <code class="language-plaintext highlighter-rouge">초기화 단계</code>가 <code class="language-plaintext highlighter-rouge">분리</code>되어 진행된다. 런타임 이전에 선언 단계가 먼저 실행되지만 초기화 단계는 변수 선언문에 도달했을 때 실행된다. 따라서 초기화 단계가 실행되기 전에 변수에 접근하면 참조에서가 발생한다. 스코프의 시작 지점부터 초기화 시작 지점까지 <code class="language-plaintext highlighter-rouge">변수를 참조할 수 없는 구간을 일시적 사각지대</code>라고 한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 초기화 이전의 일시적 사각지대에서는 참조할 수 없다. </span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span> <span class="c1">// ReferenceError: foo is not defined</span>
  
  <span class="kd">let</span> <span class="nx">foo</span><span class="p">;</span> <span class="c1">// 변수 선언문에서 초기화 단계가 실행</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span> <span class="c1">// undefined</span>

  <span class="nx">foo</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// 할당문에서 할단 단계 실행</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span> <span class="c1">// 1</span>
</code></pre></div></div>

<table>
  <thead>
    <tr>
      <th style="text-align: center">var 키워드 변수 생명주기</th>
      <th style="text-align: center">let 키워드 변수 생명주기</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"><img width="300" alt="var 키워드 변수 생명주기" src="https://user-images.githubusercontent.com/44577555/165249667-c6cebe00-cd26-406e-9d35-750d03cd8715.png" /></td>
      <td style="text-align: center"><img width="300" alt="let 키워드 변수 생명주기" src="https://user-images.githubusercontent.com/44577555/165249653-d750aacb-9dd8-4280-bd1c-3038170aa82e.png" /></td>
    </tr>
  </tbody>
</table>

<h3 id="1524-전역-객체와-let">15.2.4 전역 객체와 let</h3>
<p>let 키워드로 선언한 전역 변수는 전역 객체의 프로퍼티가 아니다. let 전역 변수는 보이지 않는 개념적인 블록 내에 존재하게 된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 브라우저 환경에서 실행</span>

  <span class="kd">let</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span> <span class="c1">// undefined -&gt; let, const로 선언한 변수는 전역 객체 window의 프로퍼티가 아니다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span> <span class="c1">// 1</span>
</code></pre></div></div>

<h2 id="153-const-키워드">15.3 const 키워드</h2>
<p>ES6에서 도입. const 키워드는 let 키워드와 대부분 동일하다.</p>

<h3 id="1531-선언과-초기화">15.3.1 선언과 초기화</h3>
<p>const 키워드로 선언한 변수는 반드시 선언과 동시에 초기화해야 한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 선언과 동시에 초기화를 하지 않으면 에러 발생</span>
  <span class="kd">const</span> <span class="nx">foo</span><span class="p">;</span> <span class="c1">// SyntaxError: Missing initializer in const declaration</span>
  <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span> <span class="c1">// ReferenceError: Cannot access 'foo' before initialization</span>
    <span class="kd">const</span> <span class="nx">foo</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span> <span class="c1">// 1</span>
  <span class="p">}</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span> <span class="c1">// ReferenceError: foo is not defined</span>

</code></pre></div></div>

<h3 id="1532-재할당-금지">15.3.2 재할당 금지</h3>
<p>var, let 키워드로 선언한 변수는 재할당이 자유롭지만 const 키워드로 선언한 변수는 재할당이 금지된다.</p>

<h3 id="1533-상수">15.3.3 상수</h3>
<p>const 키워드로 선언한 변수에 원시 값을 할당한 경우 변수 값을 변경할 수 없기때문에 상수를 표현하는 데 사용하기도 한다.<br />
상수는 재할당이 금지된 변수를 말한다. 상수는 상태 유지와 가독성, 유지보수의 편의를 위해 적극적으로 사용해야 한다. 일반적으로 상수의 이름은 대문자로 사용하고 여러 단어로 이뤄진 경우에는 스네이크 케이스로 표현한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 세율을 의미하는 0.1은 변경할 수 없는 상수로서 사용될 값</span>
  <span class="kd">const</span> <span class="nx">TAX_RATE</span> <span class="o">=</span> <span class="mf">0.1</span><span class="p">;</span>

  <span class="kd">let</span> <span class="nx">perTaxPrice</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>

  <span class="kd">let</span> <span class="nx">afterTaxPrice</span> <span class="o">=</span> <span class="nx">perTaxPrice</span> <span class="o">+</span> <span class="p">(</span><span class="nx">perTaxPrice</span> <span class="o">*</span> <span class="nx">TAX_RATE</span><span class="p">);</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">afterTaxPrice</span><span class="p">);</span> <span class="c1">// 110</span>
</code></pre></div></div>

<h3 id="1534-const-키워드와-객체">15.3.4 const 키워드와 객체</h3>
<p>const 키워드로 선언된 변수에 객체를 할당한 경우 값을 변경할 수 있다. 이때 객체가 변경되더라도 변수에 할당된 참조 값은 변경되지 않는다.<br />
const 키워드는 재할당을 금지할 뿐 “불변”을 의미하지는 않는다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span>
  <span class="p">};</span>

  <span class="nx">person</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Kim</span><span class="dl">'</span><span class="p">;</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span> <span class="c1">// {name: "Kim"}</span>
</code></pre></div></div>

<h2 id="154-var-vs-let-vs-const">15.4 var vs. let vs. const</h2>
<p>변수 선언에는 기본적으로 const를 사용하고 let은 재할당이 필요한 경우에 한정해 사용하는 것이 좋다.</p>
<ul>
  <li>ES6를 사용한다면 var 키워드를 사용하지 않는다.</li>
  <li>재할당이 필요한 경우에 한정해 let 키워드를 사용한다. 이때 변수의 스코프는 최대한 좁게 만든다.</li>
  <li>변경이 발생하지 않고 읽기 전용으로 사용하는 원시 값과 객체에는 const 키워드를 사용한다. const 키워드는 재할당을 금지하므로 var, let 키워드보다 안전하다.</li>
</ul>

<h2 id="변수-키워드-비교">변수 키워드 비교</h2>

<table>
  <thead>
    <tr>
      <th style="width:10%" class="text-center">키워드</th>
      <th style="width:10%" class="text-center">중복선언</th>
      <th style="width:10%" class="text-center">재할당</th>
      <th style="width:30%">스코프</th>
      <th style="width:40%">호이스팅</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td class="text-center">var</td>
      <td class="text-center">o</td>
      <td class="text-center">o</td>
      <td>함수의 코드 블록</td>
      <td>변수 선언문 이전에 참조 가능하고 할당문 이전에 참조하면 undefined 반환.</td>
    </tr>
    <tr>
      <td class="text-center">let</td>
      <td class="text-center">x</td>
      <td class="text-center">o</td>
      <td>모든 코드 블록(함수, if문, for문, while 문, try/catch문 등)</td>
      <td>호이스팅이 발생하지 않는 것처럼 동작한다.<br />선언단계와 초기화 단계가 분리되어 진행. <br />변수 선언 이전에 참조하면 참조 에러발생</td>
    </tr>
    <tr>
      <td class="text-center">const</td>
      <td class="text-center">x</td>
      <td class="text-center">x</td>
      <td>모든 코드 블록(함수, if문, for문, while 문, try/catch문 등)</td>
      <td>호이스팅이 발생하지 않는 것처럼 동작한다</td>
    </tr>
  </tbody>
</table>]]></content><author><name>Hyejic</name></author><category term="js" /><category term="javascript" /><summary type="html"><![CDATA[모던 자바스크립트 Deep Dive 15장 let, const 키워드와 블록 레벨 스코프 내용 정리]]></summary></entry><entry><title type="html">14장 전역 변수의 문제점</title><link href="http://localhost:4000/js/modernJS14/" rel="alternate" type="text/html" title="14장 전역 변수의 문제점" /><published>2022-04-25T00:00:00+09:00</published><updated>2022-04-25T00:00:00+09:00</updated><id>http://localhost:4000/js/modernJS14</id><content type="html" xml:base="http://localhost:4000/js/modernJS14/"><![CDATA[<p><br /></p>

<h1 id="14장-전역-변수의-문제점">14장 전역 변수의 문제점</h1>

<h2 id="141-변수의-생명-주기">14.1 변수의 생명 주기</h2>
<h3 id="1411-지역-변수의-생명-주기">14.1.1 지역 변수의 생명 주기</h3>
<p>변수는 자신이 선언된 위치에서 생성되고 소멸한다. 함수 내부에서 선언한 변수는 함수가 호출된 직후에 함수 몸체의 코드가 한 줄씩 순차적으로 실행되기 이전에 자스크립트 엔진에 의해 먼저 실행된다. 즉, 지역변수의 생명주기는 함수의 생명 주기와 일치한다.</p>

<p><img width="351" alt="14-1 지역 변수의 생명 주기" src="https://user-images.githubusercontent.com/44577555/165106439-35cda26f-b0b2-4f36-97ae-e730d2ab183f.png" /></p>

<p>변수는 메모리공간에 저장 되었다가 저장된 메모리 공간을 더이상 참조하지 않을 때 가비지 콜렉터에 의헤 해제되어 가용 메모리를 반환한다. 즉, 누군가가 메모리 공간을 참조하고 있으면 해제되지 않고 확보된 상태로 남아있게 되어 함수의 생명주기와 다를 수 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">global</span><span class="dl">'</span><span class="p">;</span>

  <span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span>  <span class="c1">// 🤔</span>
    <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">local</span><span class="dl">'</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="nx">foo</span><span class="p">();</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span> <span class="c1">// global</span>
</code></pre></div></div>

<p>위 예제에서 foo 함수 내부에서 선언된 지역 변수 x는 🤔 시점에 이미 선언되었고 undefined로 초기화되어 있다. x변수는 전역 변수 x가 아닌 지역 변수 x를 참조하고 할당문이 실행되기 전까지는 undefined 값을 갖는다. 이처럼 호이스팅은 스코프를 단위로 동작한다.</p>
<blockquote>
  <p><code class="language-plaintext highlighter-rouge">호이스팅?</code> 변수 선언이 스코프의 선두로 끌어 올려진 것처럼 동작하는 자바스크립트 고유의 특징</p>
</blockquote>

<h3 id="1412-전역-변수의-생명-주기">14.1.2 전역 변수의 생명 주기</h3>
<p>함수와 달리 전역 코드는 명시적인 호출 없이 실행된다. 전역 코드에는 반환문을 사용할 수 없으므로 마지막 문이 실행되어 더 이상 실행할 문이 없을 때 종료한다.<br />
var 키워드로 선언한 전역 변수는 전역 객체의 프로퍼티가 된다. 즉, 전역 변수의 생명 주기가 전역 객체의 생명 주기와 일치한다.</p>

<p><img width="420" alt="14-2 전역 변수의 생명 주기" src="https://user-images.githubusercontent.com/44577555/165118277-b36b8668-068f-42d8-b60d-8ef109348f5b.png" /></p>

<p>브라우저 환경에서 전역 객체는 window -&gt; var 키워드로 선언한 전역변수는 window의 프로퍼티이므로 생명주기는 전역 객체 window의 생명 주기와 같다.</p>

<h2 id="142-전역-변수의-문제점">14.2 전역 변수의 문제점</h2>
<ul>
  <li>암묵적 결합
    <ul>
      <li>전역 변수를 선언한 의도는 코드 어디서든 참조하고 할당할 수 있는 변수를 사용하겠다는 것. 모든 코드가 전역 변수를 참조하고 변경할 수 있는 암묵적 결합을 허용하는 것이다.</li>
    </ul>
  </li>
  <li>긴 생명 주기
    <ul>
      <li>전역 변수는 생명 주기가 길어서 메모리 리소스도 오랜 기간 소비한다. var 키워드는 중복 선언을 허용하므로 전역 변수로 선언했을때 변수 이름이 중복될 가능성이 있고 의도치 않은 재할당이 이뤄질 수 있다.</li>
    </ul>
  </li>
  <li>스코프 체인 상에서 종점에 존재
    <ul>
      <li>변수를 검색할 때 전역 변수가 가장 마지막에 검색된다. 즉 전역 변수의 검색 속도가 가장 느리다. (검색 시 지역 스코프에서 전역 스코프로 올라가기 때문)</li>
    </ul>
  </li>
  <li>네임스페이스 오염
    <ul>
      <li>자바스크립트는 파일이 분리되어 있다 해도 전역 스코프를 공유한다. 따라서 동일한 이름을 가진 변수나 함수가 같은 스코프에 존재할 수 있으며 예상치 못한 결과를 가져올 수 있다.</li>
    </ul>
  </li>
</ul>

<h2 id="143-전역-변수의-사용을-억제하는-방법">14.3 전역 변수의 사용을 억제하는 방법</h2>
<p>전역 변수를 반드시 사용해야 할 이유를 찾지 못한다면 지역 변수를 사용해야 한다. 변수의 스코프는 좁을수록 좋다.</p>

<h3 id="1431-즉시-실행-함수">14.3.1 즉시 실행 함수</h3>
<p>즉시 실행 함수는 단 한 번만 호출된다. 모든 코드를 즉시 실행 함수로 감싸면 모든 변수는 즉시 실행 함수의 지역 변수가 된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
  <span class="p">}());</span>
  
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span> <span class="c1">// ReferenceError: foo is not defined</span>
</code></pre></div></div>

<h3 id="1432-네임스페이스-객체">14.3.2 네임스페이스 객체</h3>
<p>전역에 네임스페이스 역할을 담당할 객체를 생성하고 전역 변수처럼 사용하고 싶은 변수를 프로퍼티로 추가하는 방법이다.
네임스페이스를 분리해서 식별자 충돌을 방지하는 효과는 있으나 네임스페이스 객체 자체가 전역 변수에 할당되므로 유용하지 않다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">MYAPP</span> <span class="o">=</span> <span class="p">{};</span>

  <span class="nx">MYAPP</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Choi</span><span class="dl">"</span><span class="p">;</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">MYAPP</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span> <span class="c1">// Choi</span>

</code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 계층적 구조 가능</span>
  <span class="kd">var</span> <span class="nx">MYAPP</span> <span class="o">=</span> <span class="p">{};</span>
  
  <span class="nx">MYAPP</span><span class="p">.</span><span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">address</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Seoul</span><span class="dl">'</span> 
  <span class="p">};</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">MYAPP</span><span class="p">.</span><span class="nx">person</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span> <span class="c1">// Choi</span>
</code></pre></div></div>

<h3 id="1433-모듈-패턴">14.3.3 모듈 패턴</h3>
<p><code class="language-plaintext highlighter-rouge">모듈 패턴</code>은 자바스크립트의 강력한 기능인 <code class="language-plaintext highlighter-rouge">클로저를 기반</code>으로 동작하고 전역 변수의 억제는 물론 <code class="language-plaintext highlighter-rouge">캡슐화</code>까지 구현할 수 있다. 모듈 패턴은 전역 네임스페이스의 오염을 막는 기능은 한정적이지만 정보 은닉을 구현하기 위해 사용한다.</p>
<blockquote>
  <p><code class="language-plaintext highlighter-rouge">캡슐화</code>는 객체의 상태를 나타내는 프로퍼티와 프로퍼티를 참조하고 조작할 수 있는 동작인 메서드를 하나로 묶는것을 말한다. 캡슐화는 객체의 특정 프로퍼티나 메서드를 감출 목적으로 사용하기도 하는데 이를 정보 은닉이라 한다.</p>
</blockquote>

<blockquote>
  <p>자바스크립트는 public, private, protected 등의 접근 제한자를 제공하지 않는다.</p>
</blockquote>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">Counter</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="c1">// private 변수</span>
    <span class="kd">var</span> <span class="nx">num</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="c1">// 외부로 공개할 데이터나 메서드를 프로퍼티로 추가한 객체를 반환한다.</span>
    <span class="c1">// public member</span>
    <span class="k">return</span> <span class="p">{</span>
      <span class="nx">increase</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="o">++</span><span class="nx">num</span><span class="p">;</span>
      <span class="p">},</span>
      <span class="nx">decrease</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="o">--</span><span class="nx">num</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}());</span>

  <span class="c1">// private 변수는 외부로 노출되지 않는다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">Counter</span><span class="p">.</span><span class="nx">num</span><span class="p">)</span> <span class="c1">// undefined</span>
  
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">Counter</span><span class="p">.</span><span class="nx">increase</span><span class="p">());</span> <span class="c1">// 1</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">Counter</span><span class="p">.</span><span class="nx">increase</span><span class="p">());</span> <span class="c1">// 2</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">Counter</span><span class="p">.</span><span class="nx">decrease</span><span class="p">());</span> <span class="c1">// 1</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">Counter</span><span class="p">.</span><span class="nx">decrease</span><span class="p">());</span> <span class="c1">// 0</span>
</code></pre></div></div>

<p>위 예제에서 외부에 노출하고 싶은 변수나 함수를 객체에 담아 프로퍼티를 퍼블릭 맴버로 만들었다.
노출하고 싶지 않은 변수나 함수는 반환하는 객체에 추가하지 않으면 외부에서 접근할 수 없는 프라이빗 맴버가 된다.</p>

<h3 id="1434-es6-모듈">14.3.4 ES6 모듈</h3>
<p>ES6 모듈은 파일 자체의 독자적인 모듈 스코프를 제공한다. script 테그에 type=”module” 어트리뷰트를 추가하면 로드된 자바스크립트 파일은 모듈로서 동작한다.</p>
<ul>
  <li>mjs 확장자 권장.</li>
  <li>구형 브라우저에서는 동작하지 않으며 브라우저의 ES6모듈 기능을 사용하더라도 트랜스파일링이나 번들링이 필요하다.</li>
</ul>]]></content><author><name>Hyejic</name></author><category term="js" /><category term="javascript" /><summary type="html"><![CDATA[모던 자바스크립트 Deep Dive 14장 전역 변수의 문제점 내용 정리]]></summary></entry><entry><title type="html">13장 스코프</title><link href="http://localhost:4000/js/modernJS13/" rel="alternate" type="text/html" title="13장 스코프" /><published>2022-04-20T00:00:00+09:00</published><updated>2022-04-20T00:00:00+09:00</updated><id>http://localhost:4000/js/modernJS13</id><content type="html" xml:base="http://localhost:4000/js/modernJS13/"><![CDATA[<p><br /></p>

<h1 id="13장-스코프">13장 스코프</h1>

<h2 id="131-스코프란">13.1 스코프란?</h2>
<p>모든 식별자(변수 이름, 함수 이름, 클래스 이름 등)는 자신이 선언된 위치에 의해 다른 코드가 식별자 자신을 참조할 수 있는 유효 범위가 결정된다. 이를 스코프라 한다. 즉, 스코프는 식별자가 유효한 범위를 말한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">global</span><span class="dl">'</span><span class="p">;</span>

  <span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">local</span><span class="dl">'</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="nx">foo</span><span class="p">();</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span>
</code></pre></div></div>

<p>위 예제에서 코드의 가장 바깥 영역에 선언된 x 변수는 어디서든 참조할 수 있다. 하지만 foo함수 내부에서 선언된 x 변수는 foo 함수 내부에서만 참조할 수 있고 foo 함수 외부에서는 참조할 수 없다. 이때 두 개의 x 변수는 식별자 이름이 동일하지만 자신이 유효한 범위, 즉 스코프가 다른 별개의 변수다.</p>

<h2 id="132-스코프의-종류">13.2 스코프의 종류</h2>
<p>스코프는 전역과 지역으로 구분할 수 있다.</p>

<p><img width="506" alt="스크린샷 2022-04-20 오후 11 31 08" src="https://user-images.githubusercontent.com/44577555/164254346-4d8f28f9-6a38-4db3-89dd-da025da9cc4e.png" /></p>

<h3 id="1321-전역과-전역-스코프">13.2.1 전역과 전역 스코프</h3>
<p>전역이란 코드의 가장 바깥 영역을 말한다. 전역에 변수를 선언하면 전역 스코프를 갖는 전역 변수가 되고 어디서든지 참조할 수 있다.</p>

<h3 id="1322-지역과-지역-스코프">13.2.2 지역과 지역 스코프</h3>
<p>지역이란 함수 몸체 내부를 말한다. 지역 변수는 자신의 지역 스코프와 하위 지역 스코프에서 유효하다.<br />
위의 예제(그림 13-2)에서 inner 함수 내부에서 선언된 x 변수 이외에 이름이 같은 전역 변수 x가 존재한다. 이때 inner 함수 내부에서 x 변수를 참조하면 전역 변수 x를 참조하는 것이 아니라 inner 함수 내부의 x 변수를 참조한다. 이는 자바스크립트 엔진이 스코프 체인을 통해 참조할 변수를 검색했기 때문인다.</p>

<h2 id="133-스코프-체인">13.3 스코프 체인</h2>
<p>함수는 중첩될 수 있으므로 함수의 지역 스코프도 중첩될 수 있다. 이는 스코프가 함수의 중첩에 의해 계층적 구조를 갖는다는 것을 의미한다. 모든 스코프는 하나의 계층적 구조로 연결되며, 모든 지역 스코프의 최상위 스코프는 전역 스코프다. 이렇게 스코프가 계층적으로 연결된 것을 스코프 체인이라 한다. 변수를 참조할 때 자바스크립트 엔진은 스코프 체인을 통해 변수를 참조하는 코드의 스코프에서 시작하여 상위 스코프 방향으로 이동하며 선언된 변수를 검색한다.</p>

<h3 id="1331-스코프-체인에-의한-변수-검색">13.3.1 스코프 체인에 의한 변수 검색</h3>
<p>자바스크립트 엔진은 스코프 체인을 따라 변수를 참조하는 코드의 스코프에서 시작해서 상위 스코프 방향으로 이동하며 선언된 변수를 검색한다. 상위 스코프에서 유효한 변수는 하위 스코프에서 자유롭게 참조할 수 있지만 하위 스코프에서 유효한 변수를 상위 스코프에서 참조할 수는 없다.</p>

<h3 id="1332-스코프-체인에-의한-함수-검색">13.3.2 스코프 체인에 의한 함수 검색</h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">global function foo</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">};</span>
  
  <span class="kd">function</span> <span class="nx">bar</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">local function foo</span><span class="dl">'</span><span class="p">);</span>
    <span class="p">};</span>
    <span class="nx">foo</span><span class="p">();</span>
  <span class="p">};</span>

  <span class="nx">bar</span><span class="p">();</span> <span class="c1">// local function foo</span>
</code></pre></div></div>
<p>함수도 식별자에 할당되기 때문에 스코프를 갖는다. 따라서 스코프를 “변수를 검색할 때 사용하는 규칙”이라고 표현하기보다는 “식별자를 검색하는 규칙”이라고 표현하는 편이 좀 더 적합하다.</p>

<h2 id="134-함수-레벨-스코프">13.4 함수 레벨 스코프</h2>
<p>지역은 함수 몸체 내부를 말하고 지역은 지역 스코프를 만든다고 했다. 이는 코드 블록이 아닌 함수에 의해서만 지역 스코프가 생성된다는 의미다.<br />
var 키워드로 선언된 변수는 오로지 함수의 코드 블록(함수 몸체)만을 지역 스코프로 인정한다. 이러한 특성을 함수 레벨 스코프라 한다. 따라서 아래 예제에서 if 문의 코드 블록 내에서 선언된 x 변수는 전역변수다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

  <span class="k">if</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span> <span class="c1">// 10 -&gt; x 변수 중복 선언으로 인해 값이 재 할당 되었다.</span>
</code></pre></div></div>

<h2 id="135-렉시컬-스코프">13.5 렉시컬 스코프</h2>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  
  <span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
    <span class="nx">bar</span><span class="p">();</span>
  <span class="p">}</span>

  <span class="kd">function</span> <span class="nx">bar</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="nx">foo</span><span class="p">();</span> <span class="c1">// ?</span>
  <span class="nx">bar</span><span class="p">();</span> <span class="c1">// ?</span>
</code></pre></div></div>
<p>위 예제의 실행 결과는 bar 함수의 상위 스코프가 무엇인지에 따라 결정된다.</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">함수를 어디서 호출했는지</code>에 따라 함수의 상위 스코프를 결정한다. (동적 스코프)</li>
  <li><code class="language-plaintext highlighter-rouge">함수를 어디서 정의했는지</code>에 따라 함수의 상위 스코프를 결정한다. (<code class="language-plaintext highlighter-rouge">렉시컬 스코프</code>, 정적 스코프)</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">자바스크립트</code>를 비롯한 대부분읜 프로그래밍 언어는 <code class="language-plaintext highlighter-rouge">렉시컬 스코프를 따른다.</code>
따라서 함수를 어디서 호출했는지가 아니라 함수를 어디서 정의했는지에 따라 상위 스코프를 결정한다. 함수가 호출된 위치는 상위 스코프 결정에 어떠한 영향도 주지 않는다. 이처럼 함수의 상위 스코프는 함수 정의가 실행될 때 정적으로 결정된다. 함수 정의가 실행되어 생성된 함수 객체는 이렇게 결정된 상위 스코프를 기억한다.<br />
위 예제의 bar 함수는 전역에서 정의되었고 자신이 정의된 스코프, 즉 전역 스코프를 기억한다. 그리고 bar 함수가 호풀되면 호출된 곳이 어디인지 관계없이 언제나 자신이 기억하고 있는 전역 스코프를 상위 스코프로 사용하기 때문에 전역 변수 x의 값 1을 두 번 출력한다.</p>]]></content><author><name>Hyejic</name></author><category term="js" /><category term="javascript" /><summary type="html"><![CDATA[모던 자바스크립트 Deep Dive 13장 스코프 내용 정리]]></summary></entry><entry><title type="html">12장 함수</title><link href="http://localhost:4000/js/modernJS12/" rel="alternate" type="text/html" title="12장 함수" /><published>2022-04-19T00:00:00+09:00</published><updated>2022-04-19T00:00:00+09:00</updated><id>http://localhost:4000/js/modernJS12</id><content type="html" xml:base="http://localhost:4000/js/modernJS12/"><![CDATA[<p><br /></p>

<h1 id="12장-함수">12장 함수</h1>

<h2 id="121-함수란">12.1 함수란?</h2>
<p>일련의 과정을 문으로 구현하고 코드 블록으로 감싸서 하나의 실행 단위로 정의한 것이다.<br />
함수 내부로 입력을 전달받는 변수를 매개변수, 입력을 인수, 출력을 반환겂이라 한다. 특정 함수를 구별하기 위해 식별자인 함수 이름을 사용할 수 있다.</p>

<p><img width="337" alt="스크린샷 2022-04-20 오전 1 29 12" src="https://user-images.githubusercontent.com/44577555/164051408-51c00262-288b-4f9f-9b70-946eed9a12f1.png" /></p>

<p>함수는 함수 정의를 통해 생성되고, 인수를 매개변수를 통해 함수에 전달하면서 함수의 실행을 명시적으로 지시하는것을 함수 호출이라 한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 함수 정의</span>
  <span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">){</span>
    <span class="k">return</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="c1">//</span>
  <span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">add</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span> <span class="c1">// 7</span>
</code></pre></div></div>

<h2 id="122-함수를-사용하는-이유">12.2 함수를 사용하는 이유</h2>
<p>함수는 필요할 때 몇 번이든 호출할 수 있으므로 코드의 재사용이라는 측면에서 매우 유용하다.<br />
코드의 가독성을 향상시키기 위해서는 함수의 이름을 변수 이름과 마찬가지로 자신의 역할을 잘 설명할 수 있도록 지어야 한다.</p>

<h2 id="123-함수-리터럴">12.3 함수 리터럴</h2>
<p>함수 리터럴은 function 키워드, 함수 이름, 매개변수 목록, 함수 몸체로 구성된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 변수에 함수 리터럴을 할당</span>
  <span class="kd">var</span> <span class="nx">f</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span><span class="p">;</span>
  <span class="p">}</span>
</code></pre></div></div>
<p><img width="542" alt="스크린샷 2022-04-20 오전 1 54 23" src="https://user-images.githubusercontent.com/44577555/164055686-a17681e9-8de1-4e08-912c-4bd34dc14f45.png" /></p>

<p>함수는 객체다. 일반 객체는 호출할 수 없지만 함수는 호출할 수 있다.</p>

<h2 id="124-함수-정의">12.4 함수 정의</h2>
<p>함수를 정의하는 방법 4가지</p>

<p><img width="558" alt="스크린샷 2022-04-20 오후 6 26 21" src="https://user-images.githubusercontent.com/44577555/164196982-5c51edad-c714-4562-b343-ccb68477e902.png" /></p>

<h3 id="1241-함수-선언문">12.4.1 함수 선언문</h3>
<p>함수 선언문은 함수 이름을 생략할 수 없다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 함수 선언문</span>
  <span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span><span class="p">;</span>
  <span class="p">}</span>
</code></pre></div></div>

<p>이름이 있는 기명 함수 리터럴은 코드의 문맥에 따라 함수 선언문 또는 함수 리터럴 표현식으로 해석된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 함수 선언문</span>
  <span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">foo</span><span class="dl">'</span><span class="p">);</span> <span class="p">}</span>
  <span class="nx">foo</span><span class="p">();</span> <span class="c1">// foo</span>
  <span class="c1">// 함수 리터럴을 피연산자로 사용하면 함수 선언문이 아니라 함수 리터럴 표현식으로 해석된다.</span>
  <span class="p">(</span><span class="kd">function</span> <span class="nx">bar</span><span class="p">()</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">bar</span><span class="dl">'</span><span class="p">);</span> <span class="p">});</span>
  <span class="nx">bar</span><span class="p">();</span> <span class="c1">// ReferenceError: bar is not defined</span>
</code></pre></div></div>

<p>함수 몸체 외부에서는 함수 이름으로 함수를 참조할 수 없으므로 함수 몸체 외부에서는 함수 이름으로 함수를 호출할 수 없다.<br />
자바스크립트 엔진은 생성된 함수를 호출하기 위해 함수 이름과 동일한 이름의 식별자를 암묵적으로 생성하고, 거기에 함수 객체를 할당한다.</p>

<p><img width="412" alt="스크린샷 2022-04-20 오후 7 21 58" src="https://user-images.githubusercontent.com/44577555/164208268-d64fdd7a-17ae-4d6e-b131-afdb762cffa7.png" /></p>

<p>함수 선언문으로 생성한 함수를 호출한 것은 함수 이름 add가 아니라 자바스크립트 엔진이 암묵적으로 생성한 식별자 add인 것이다.</p>

<h3 id="1242-함수-표현식">12.4.2 함수 표현식</h3>
<p>자바스크립트의 함수는 <code class="language-plaintext highlighter-rouge">일급 객체</code>이므로 함수 리터럴로 생성한 함수 객체를 변수에 할당할 수 있다. 이러한 함수 정의 방식을 함수 표현식이라 한다.<br />
함수 리터럴의 함수 이름은 생략할 수 있고 함수 표현식의 함수 리터럴은 함수 이름을 생략하는 것이 일반적이다.</p>
<blockquote>
  <p><code class="language-plaintext highlighter-rouge">일급객체</code>란 컴퓨터 프로그래밍 언어 디자인에서, 일급 객체(영어: first-class object)란 다른 객체들에 일반적으로 적용 가능한 연산을 모두 지원하는 객체를 가리킨다. 보통 함수에 인자로 넘기기, 수정하기, 변수에 대입하기와 같은 연산을 지원할 때 일급 객체라고 한다.</p>
</blockquote>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 함수 표현식</span>
  <span class="kd">var</span> <span class="nx">add</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span><span class="p">;</span>
  <span class="p">};</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">add</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">));</span> <span class="c1">// 7</span>
</code></pre></div></div>

<h3 id="1243-함수-생성-시점과-함수-호이스팅">12.4.3 함수 생성 시점과 함수 호이스팅</h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 함수 참조</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">dir</span><span class="p">(</span><span class="nx">add</span><span class="p">);</span> <span class="c1">// add(2, 5)</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">dir</span><span class="p">(</span><span class="nx">sub</span><span class="p">);</span> <span class="c1">// undefined</span>

  <span class="c1">// 함수 호출</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">add</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">));</span> <span class="c1">// 7</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">sub</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">));</span> <span class="c1">// TypeError: sub is not a function</span>

  <span class="c1">// 함수 선언문</span>
  <span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span><span class="p">;</span>
  <span class="p">};</span>
  <span class="c1">// 함수 표현식</span>
  <span class="kd">var</span> <span class="nx">sub</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">x</span> <span class="o">-</span> <span class="nx">y</span><span class="p">;</span>
  <span class="p">};</span>
</code></pre></div></div>
<p>함수 선언문으로 정의한 함수는 함수 선언문 이전에 호출할 수 있다. 그러나 함수 표현식으로 정의한 함수는 함수 표현식 이전에 호출할 수 없다. 생성 시점이 다르다.
<code class="language-plaintext highlighter-rouge">함수 선언문은 런타임 이전에 함수 객제가 먼저 생성</code>된다. 따라서 함수 선언문 이전에 함수를 참조할 수 있으며 호출할 수도 있다. 이처럼 <code class="language-plaintext highlighter-rouge">함수 선언문이 코드의 선두로 끌어 올려진 것차럼 동작</code>하는 자바스크립트 고유의 특징을 <code class="language-plaintext highlighter-rouge">함수 호이스팅</code>이라 한다.<br />
함수 표현식은 변수에 할당되는 값이 함수 리터럴인 문이다. 따라서 변수 선언은 런타임 이전에 실행되어 undefined로 초기화 되지만 변수 할당문의 값은 런타임에 평가되므로 함수 표현식의 함수 리터럴도 할당문이 실행되는 런타임 시점에 평가되어 함수 객체가 된다. 따라서 <code class="language-plaintext highlighter-rouge">함수 표현식으로 함수를 정의하면 함수 호이스팅이 아니라 변수 호이스팅이 발생</code>한다.
함수 표현식으로 정의한 함수는 반드시 함수 표현식 이후에 참조 또는 호출해야 한다.</p>

<h3 id="1244-function-생성자-함수">12.4.4 Function 생성자 함수</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">add</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Function</span><span class="p">(</span><span class="dl">'</span><span class="s1">x</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">y</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">return x + y</span><span class="dl">'</span><span class="p">);</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">add</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">));</span> <span class="c1">//7</span>
</code></pre></div></div>
<p>Function 생성자 함수로 함수를 생성하는 방식은 일반적이지 않으며 바람직 하지도 않다.</p>

<h3 id="1245-화살표-함수">12.4.5 화살표 함수</h3>
<p>ES6에서 도입된 화살표 함수는 function 키워드 대신 화살표(=&gt;)를 사용해 좀 더 간략한 방법으로 함수를 선언할 수 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">add</span> <span class="o">=</span> <span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">add</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">));</span> <span class="c1">// 7</span>
</code></pre></div></div>

<p>화살표 함수는 생성자 함수로 사용할 수 없고, 기존 함수와 this 바인딩 방식이 다르고, prototype 프로퍼티가 없으며 arguments 객체를 생성하지 않는다.</p>

<h2 id="125-함수-호출">12.5 함수 호출</h2>

<h3 id="1251-매개변수와-인수">12.5.1 매개변수와 인수</h3>
<p>함수를 실행하기 위해 필요한 값을 함수 외부에서 함수 내부로 전달할 필요가 있는 경우, 매개변수를 통해 인수를 전달한다.</p>

<p><img width="288" alt="스크린샷 2022-04-20 오후 9 15 31" src="https://user-images.githubusercontent.com/44577555/164228264-522a04e9-b40e-4b27-8a9a-79f0a091b8a1.png" /></p>

<p>함수가 호출될 때마다 매개변수는 이와 같은 단계를 거친다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">add</span><span class="p">(</span><span class="mi">2</span><span class="p">));</span> <span class="c1">// NaN -&gt; y값이 전달되지 않아서 y는 undefined로 초기화된 그대로이다. 따라서 2 + undefined와 같으므로 NaN이 반환된다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">add</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">));</span> <span class="c1">// 7 -&gt;  10 무시</span>

</code></pre></div></div>
<p>함수는 매개변수의 개수와 인수의 개수가 일치하는지 체크하지 않는다.<br />
전달되지 않은 매개변수는 undefined로 초기화된 그대로를 유지한다.<br />
매개변수보다 인수가 더 많은 경우 초과된 인수는 무시되지만 암묵적으로 arguments객체의 프로퍼티로 보관된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arguments</span><span class="p">);</span> <span class="c1">// Arguments(3) [2, 5, 10, callee: f, Symbol(Symbol.iterator): f]</span>
    <span class="k">return</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="nx">add</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span> <span class="c1">// 10은 매개변수에 할당 되지 않지만 arguemnts에 보관된다.</span>
</code></pre></div></div>

<h3 id="1252-인수-확인">12.5.2 인수 확인</h3>
<p>자바스크립트 문법상 어떠한 문제도 없으면 엔진은 아무런 이의제기 없이 코드를 실행한다. 따라서 자바스크립트의 경우 함수를 정의할 때 적절한 인수가 전달되었는지 확인할 필요가 있다.</p>
<h4 id="매개변수-타입체크">매개변수 타입체크</h4>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">x</span> <span class="o">!==</span> <span class="dl">'</span><span class="s1">number</span><span class="dl">'</span> <span class="o">||</span> <span class="k">typeof</span> <span class="nx">y</span> <span class="o">!==</span> <span class="dl">'</span><span class="s1">number</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">thorw</span> <span class="k">new</span> <span class="nx">TypeError</span><span class="p">(</span><span class="dl">'</span><span class="s1">인수는 모두 숫자값이어야 합니다.</span><span class="dl">'</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">add</span><span class="p">(</span><span class="mi">2</span><span class="p">));</span> <span class="c1">// TypeError: 인수는 모두 숫자값이어야 합니다.</span>
</code></pre></div></div>
<h4 id="단축-평가를-통해-기본값-할당">단축 평가를 통해 기본값 할당</h4>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">c</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">a</span> <span class="o">=</span> <span class="nx">a</span> <span class="o">||</span> <span class="mi">0</span><span class="p">;</span>
    <span class="nx">b</span> <span class="o">=</span> <span class="nx">b</span> <span class="o">||</span> <span class="mi">0</span><span class="p">;</span>
    <span class="nx">c</span> <span class="o">=</span> <span class="nx">c</span> <span class="o">||</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span> <span class="o">+</span> <span class="nx">c</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">));</span> <span class="c1">// 6</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">));</span> <span class="c1">// 3</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">add</span><span class="p">());</span> <span class="c1">// 0</span>
</code></pre></div></div>
<h4 id="매개변수-기본값-es6">매개변수 기본값 (ES6)</h4>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">a</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">b</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">c</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span> <span class="o">+</span> <span class="nx">c</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">));</span> <span class="c1">// 6</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">));</span> <span class="c1">// 3</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">add</span><span class="p">());</span> <span class="c1">// 0</span>
</code></pre></div></div>

<h3 id="1253-매개변수의-최대-개수">12.5.3 매개변수의 최대 개수</h3>
<p>ECMAScript 사양에서는 매개변수의 최대 개수에 대해 명시적으로 제한하고 있지 않지만 매개변수의 개수가 많다는 것은 함수가 여러가지 일을 한다는 증거이므로 바람직하지 않다. 이상적인 함수는 한 가지 일만 해야 하며 가급적 작게 만들어야 한다.</p>

<h3 id="1254-반환문">12.5.4 반환문</h3>
<p>함수는 return 키워드와 표현식으로 이뤄진 반환문을 사용해 실행 결과를 함수 외부로 반환할 수 있다.</p>

<h4 id="반환문의-역할">반환문의 역할</h4>
<ul>
  <li>반환문은 함수의 실행을 중단하고 함수 몸체를 빠져나간다. 따라서 반환문 이후에 다른 문이 존재하면 그 문은 실행되지 않고 무시된다.</li>
  <li>반환문은 return 키워드 뒤에 오는 표현식을 평가해 반환한다. return 키워드 뒤에 반환값으로 사용할 표현식을 명시적으로 지정하지 않으면 undefined가 반환된다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">multiply</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span><span class="p">;</span> <span class="c1">// 반환문</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">실행?</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// 실행되지 않는다.</span>
  <span class="p">}</span>
  <span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">multiply</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>  <span class="c1">// 반환된 값이 result 변수에 저장된다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span> <span class="c1">// 8</span>

  <span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span><span class="p">;</span>  <span class="c1">// return 키워드 생략 가능</span>
  <span class="p">}</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">());</span> <span class="c1">// undefined</span>
</code></pre></div></div>
<p>return 키워드와 반환값으로 사용할 표현식 사이에 줄바꿈이 있으면 세미콜론이 자동 삽입 되어서 의도하지 않은 결과가 발생할 수 있다.</p>

<h2 id="126-참조에-의한-전달과-외부-상태의-변경">12.6 참조에 의한 전달과 외부 상태의 변경</h2>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">changeVal</span><span class="p">(</span><span class="nx">primitive</span><span class="p">,</span> <span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">primitive</span> <span class="o">+=</span> <span class="mi">100</span><span class="p">;</span>
    <span class="nx">obj</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Kim</span><span class="dl">'</span><span class="p">;</span>
  <span class="p">};</span>

  <span class="kd">var</span> <span class="nx">num</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
  <span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span><span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Lee</span><span class="dl">'</span><span class="p">}</span> <span class="p">;</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">num</span><span class="p">)</span> <span class="c1">// 100</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">)</span> <span class="c1">// {name: "Lee"}</span>

  <span class="nx">changeVal</span><span class="p">(</span><span class="nx">num</span><span class="p">,</span> <span class="nx">person</span><span class="p">);</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">num</span><span class="p">)</span> <span class="c1">// 100 -&gt; 원시 값은 원본이 훼손되지 않는다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">)</span> <span class="c1">// {name: "Kim"} -&gt; 객체는 원본이 훼손된다.</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">원시 타입 인수</code>는 값 자체가 복사되어 매개변수에 전달되기 때문에 함수 몸체에서 그 값을 변경해도 <code class="language-plaintext highlighter-rouge">원본은 훼손되지 않는다.</code><br />
하지만 <code class="language-plaintext highlighter-rouge">객체 타입 인수</code>는 참조 값이 복사되어 매개변수에 전달되기 때문에 함수 몸체에서 참조 값을 통해 객체를 변경할 경우 <code class="language-plaintext highlighter-rouge">원본 훼손된다.</code> 이처럼 함수가 외부 상태를 변경하면 상태 변화를 추적하기 어렵다. 복잡한 코드에서 의도치 않은 객체의 변경을 추적하는 것은 어려운 일이다.</p>

<h3 id="해결방법">해결방법</h3>
<p>객체를 불변객체로 만들어 사용한다. 객체의 복사본을 새롭게 생성하여 객체를 마치 원시 값처럼 변경 불가능한 값으로 동작하게 만드는것이다. 객체의 상채 변경이 필요한 경우에는 깊은 복사를 통해 새로운 객체를 생성하고 재할당을 통해 교체한다.<br />
외부 상태를 변경하지 않고 외부 상태에 의존하지도 않는 함수를 순수 함수라고 한다.</p>

<h2 id="127-다양한-함수의-형태">12.7 다양한 함수의 형태</h2>
<h3 id="1271-즉시-실행-함수">12.7.1 즉시 실행 함수</h3>
<p>즉시 실행 함수는 단 한 번만 호출되며 다시 호출할 수 없다. 함수 이름이 없는 익명함수를 사용하는 것이 일반적이지만 기명 즉시 실행 함수도 사용할 수 있다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 익명 즉시 실행 함수</span>
  <span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
    <span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>

    <span class="k">return</span> <span class="nx">a</span> <span class="o">*</span> <span class="nx">b</span><span class="p">;</span>
  <span class="p">}());</span>

  <span class="c1">// rl명 즉시 실행 함수</span>
  <span class="p">(</span><span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
    <span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>

    <span class="k">return</span> <span class="nx">a</span> <span class="o">*</span> <span class="nx">b</span><span class="p">;</span>
  <span class="p">}());</span>

  <span class="nx">foo</span><span class="p">();</span> <span class="c1">// ReferenceError: foo is not defined  -&gt; </span>
</code></pre></div></div>
<p>기명 함수의 함수 이름은 함수 몸체에서만 참조할 수 있는 식별자이므로 즉시 실행 함수를 다시 호출 할 수 없다.</p>

<p>그룹 연산자로 함수를 묶은 이유는 먼저 함수 리터럴을 평가해서 함수 객체를 생성하기 위해서다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 가장 일반적인 방식</span>
  <span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="c1">// ...</span>
  <span class="p">}());</span>
</code></pre></div></div>

<h3 id="1272-재귀-함수">12.7.2 재귀 함수</h3>
<p>함수가 자기 자신을 호출하는 행위, 즉 재귀 호출을 수행하는 함수를 재귀 함수라고 한다. 재귀 함수는 반복되는 처리를 위해 사용한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 카운트 수행</span>
  <span class="kd">function</span> <span class="nx">countdown</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">n</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">n</span><span class="p">);</span>
    <span class="nx">countdown</span><span class="p">(</span><span class="nx">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span> <span class="c1">// 재귀 호출</span>
  <span class="p">};</span>

   <span class="nx">countdown</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</code></pre></div></div>

<p>재귀 함수는 자신을 무한 재귀 호출한다. 따라서 재귀 함수 내에는 재귀 호출을 멈출 수 있는 탈출 조건을 반드시 만들어야 한다.<br />
재귀 함수는 무산 반복에 빠질 위험이 있고, 스택 오버플로 에러를 발생시킬 수 있으므로 주의해서 사용해야 한다. 반복문을 사용하는 것보다 재귀 함수를 사용하는 편이 더 직관적으로 이해하기 쉬울 때만 한정적으로 사용하는 것이 바람직하다.</p>

<h3 id="1273-중첩-함수">12.7.3 중첩 함수</h3>
<p>함수 내부에 정의된 함수를 중첩 함수 또는 내부 함수라고 한다. 중첩 함수는 외부 함수 내부에서만 호출할 수 있으며, 일반적으로 중첩 함수는 자신을 포함하는 외부 함수를 돕는 헬퍼 함수의 역할을 한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">outer</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="c1">// 중첩 함수</span>
    <span class="kd">function</span> <span class="nx">inner</span><span class="p">()</span> <span class="p">{</span>
      <span class="kd">var</span> <span class="nx">y</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
      <span class="c1">// 외부함수의 변수를 참조할 수 있다.</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span><span class="p">);</span> <span class="c1">// 3</span>
    <span class="p">}</span>
    <span class="nx">inner</span><span class="p">();</span>
  <span class="p">}</span>

  <span class="nx">outer</span><span class="p">();</span>
</code></pre></div></div>

<h3 id="1274-콜백-함수">12.7.4 콜백 함수</h3>
<p>각 함수마다 수행하는 일이 다르지만 공통적으로 수행되어지는 일이 있다면 함수를 합성하는 것으로 해결할 수 있다.<br />
함수의 변하지 않는 공통 로직은 미지 정의해 두고, 경우에 따라 변경되는 로직은 추상화해서 함수 외부에서 함수 내부로 전달하는 것이다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 외부에서 전달받은 f를 n만큼 반복 호출한다.</span>
  <span class="c1">// 고차 함수</span>
  <span class="kd">function</span> <span class="nx">repeat</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span> <span class="nx">f</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">n</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">f</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">};</span>

  <span class="c1">// 콜백 함수</span>
  <span class="kd">var</span> <span class="nx">logAll</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
  <span class="p">};</span>

  <span class="nx">repeat</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="nx">logAll</span><span class="p">);</span> <span class="c1">// 0 1 2 3 4</span>

  <span class="c1">// 콜백 함수</span>
  <span class="kd">var</span> <span class="nx">logOdds</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">i</span> <span class="o">%</span> <span class="mi">2</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
  <span class="p">};</span>

  <span class="nx">repeat</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="nx">logOdds</span><span class="p">);</span> <span class="c1">// 1 3</span>
</code></pre></div></div>

<p>이처럼 함수의 매개변수를 통해 다른 함수의 내부로 전달되는 함수를 콜백 함수라고 하며, 매개변수를 통해 함수의 외부에서 콜백 함수를 전달받은 함수를 고차 함수라고한다. 고차 함수는 콜백 함수를 자신의 일부분으로 합성한다. 콜백 함수는 고차 함수에 의해 호출되며 이 때 고차 함수는 필요에 따라 콜백 함수에 인수를 전달할 수 있다.<br />
콜백 함수는 함수형 프로그래밍 패러다임뿐만 아니라 비동기 처리에 활용되는 중요한 패턴이다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">btn</span><span class="dl">'</span><span class="p">).</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">});</span>

  <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">(){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">1초 경과</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">},</span> <span class="mi">1000</span><span class="p">);</span>
</code></pre></div></div>

<p>콜백 함수는 배열 고차 함수에서도 사용된다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 콜백 함수를 사용하는 고차 함수 map</span>
  <span class="kd">var</span> <span class="nx">res</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">].</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">item</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span>
  <span class="p">})</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span> <span class="c1">// [2, 4, 6]</span>

  <span class="c1">// 콜백 함수를 사용하는 고차 함수 filter</span>
  <span class="nx">res</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">].</span><span class="nx">filter</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">item</span> <span class="o">%</span> <span class="mi">2</span><span class="p">;</span>
  <span class="p">})</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span> <span class="c1">// [1, 3]</span>

  <span class="c1">// 콜백 함수를 사용하는 고차 함수 reduce</span>
  <span class="nx">res</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">].</span><span class="nx">reduce</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">acc</span><span class="p">,</span> <span class="nx">cur</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">add</span> <span class="o">+</span> <span class="nx">cur</span><span class="p">;</span>
  <span class="p">})</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span> <span class="c1">// 6</span>
</code></pre></div></div>

<h3 id="1275-순수-함수와-비순수-함수">12.7.5 순수 함수와 비순수 함수</h3>
<p>함수형 프로그래밍에서는 어떤 <code class="language-plaintext highlighter-rouge">외부 상태에 의존하지도 않고 변경하지도 않는</code> 부수 효과가 없는 함수를 <code class="language-plaintext highlighter-rouge">순수 함수</code>라 하고, <code class="language-plaintext highlighter-rouge">외부 상태에 의존하거나 외부 상태를 변경</code>하는 부수 효가가 있는 함수를 <code class="language-plaintext highlighter-rouge">비순수 함수</code>라고 한다.<br />
순수 함수는 동일한 인수가 전달되면 언제나 동일한 값을 반환하는 함수다. 함수 내부 상태에만 의존하고 함수의 외부 상태를 변경하지도 않는다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

  <span class="c1">// 순수 함수 -&gt; 전달 받은 인수로 실행</span>
  <span class="kd">function</span> <span class="nx">increase</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="o">++</span><span class="nx">n</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="c1">// 순수 함수가 반환한 결과값을 변수에 재할당해서 상태를 변경</span>
  <span class="nx">count</span> <span class="o">=</span> <span class="nx">increase</span><span class="p">(</span><span class="nx">count</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">count</span><span class="p">);</span> <span class="c1">// 1</span>

  <span class="nx">count</span> <span class="o">=</span> <span class="nx">increase</span><span class="p">(</span><span class="nx">count</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">count</span><span class="p">);</span> <span class="c1">// 2</span>
</code></pre></div></div>
<p>반대로 함수의 외부 상태에 따라 반환값이 달라지는 함수를 비순수 함수라고 한다. 인수를 전달받지 않고 함수 내부에서 외부 상채를 직접 참조하면 외부 상태에 의존하게 되어 반환값이 변할 수 있고, 외부 상태도 변결할 수 있으므로 비순수 함수가 된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

  <span class="c1">// 비 순수 함수 -&gt; 외부의 변수에 할당 된 값을 참조</span>
  <span class="kd">function</span> <span class="nx">increase</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="o">++</span><span class="nx">count</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="c1">// 비순수 함수는 외부 상태를 변경하므로 상태 변화를 추적하기 어려워진다.</span>
  <span class="nx">increase</span><span class="p">(</span><span class="nx">count</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">count</span><span class="p">);</span> <span class="c1">// 1</span>

  <span class="nx">increase</span><span class="p">(</span><span class="nx">count</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">count</span><span class="p">);</span> <span class="c1">// 2</span>
</code></pre></div></div>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">의사코드</code>(슈도코드, pseudocode[1])는 프로그램을 작성할 때 각 모듈이 작동하는 논리를 표현하기 위한 언어이다. 특정 프로그래밍 언어의 문법에 따라 쓰인 것이 아니라, 일반적인 언어로 코드를 흉내 내어 알고리즘을 써놓은 코드를 말한다. 의사(疑似)코드는 말 그대로 흉내만 내는 코드이기 때문에, 실제적인 프로그래밍 언어로 작성된 코드처럼 컴퓨터에서 실행할 수 없으며, 특정 언어로 프로그램을 작성하기 전에 알고리즘의 모델을 대략적으로 모델링하는 데에 쓰인다.</p>
</blockquote>]]></content><author><name>Hyejic</name></author><category term="js" /><category term="javascript" /><summary type="html"><![CDATA[모던 자바스크립트 Deep Dive 12장 함수 내용 정리]]></summary></entry><entry><title type="html">11장 원시 값과 객체의 비교</title><link href="http://localhost:4000/js/modernJS11/" rel="alternate" type="text/html" title="11장 원시 값과 객체의 비교" /><published>2022-04-14T00:00:00+09:00</published><updated>2022-04-14T00:00:00+09:00</updated><id>http://localhost:4000/js/modernJS11</id><content type="html" xml:base="http://localhost:4000/js/modernJS11/"><![CDATA[<p><br /></p>

<h1 id="11장-원시-값과-객체의-비교">11장 원시 값과 객체의 비교</h1>
<p>자바스크립트가 제공하는 데이터 타입은 크게 원시타입과 객체 타입으로 구분할 수 있다.<br />
<code class="language-plaintext highlighter-rouge">원시 값은 변경 불가능</code>한 값이고 <code class="language-plaintext highlighter-rouge">객체는 변경 가능</code>한 값이다.</p>

<h2 id="111-원시-값">11.1 원시 값</h2>
<h3 id="1111-변경-불가능한-값">11.1.1 변경 불가능한 값</h3>
<p>원시 값은 변경 불가능한 값, 즉 읽기 전용 값이다. 어떤일이 있어도 불변한다. 원시 값 자체를 변경할 수 없다는 것이지 변수의 값을 변경할 수 없다는 것이 아니다.
변수는 재할당을 통해 값을 변경할 수 있다. 상대 개념인 상수는 재할당이 금지된 변수를 말한다. 따라서 상수는 재할당이 금지된 변수일 뿐이다.</p>

<p>변수가 참조하던 메모리 공간의 주소가 변경된 이유는 변수에 할당된 원시 값이 변경 불가능한 값이기 때문이다.
만약 원시 값이 변경 가능한 값이라면 메모리 공간의 주소를 바꿀 필요없이 원시 값 자체를 변경하면 그만이다. (아래 그림 참고)</p>

<p><img width="522" alt="스크린샷 2022-04-20 오전 1 21 47" src="https://user-images.githubusercontent.com/44577555/164050165-8ec12fcb-9f0f-49d9-9c69-1d5bed58ea8d.png" /></p>

<p>따라서 변수 값을 변경하기 위해 원시 값을 재할당하면 새로운 메모리 공간을 확보하고 재할당한 값을 저장한 후, 변수가 참조하던 메모리 공간의 주소를 변경한다. 이러한 특성을 불변성이라 한다. (아래 그림 참고)</p>

<p><img width="520" alt="스크린샷 2022-04-20 오전 1 22 21" src="https://user-images.githubusercontent.com/44577555/164050252-99d09bde-7144-4988-b683-9bc7ee3e71c8.png" /></p>

<h3 id="1112-문자열과-불변성">11.1.2 문자열과 불변성</h3>
<p>원시 값인 문자열은 다른 원시 값과 비교할 때 독특한 특징이 있다. 문자열은 몇 개의 문자로 이뤄졌느냐에 따라 필요한 메모리 공간의 크기가 결정된다. 숫자 값은 1도 10000도 동일한 8바이트가 필요하지만 문자열의 경우 1개의 문자라면 2바이트, 10개의 문자로 이뤄졌다면 20바이트가 필요하다. 문자열은 유사 배열 객체이면서 이터러블이으로 배열과 유사하게 각 문자에 접근이 가능하다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">str</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">string</span><span class="dl">'</span><span class="p">;</span>

  <span class="nx">str</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">S</span><span class="dl">'</span><span class="p">;</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">str</span><span class="p">);</span> <span class="c1">// string</span>
</code></pre></div></div>

<p>이미 생성된 문자열의 일부 문자를 변경해도 반영되지 않는다. 문자열은 변경 불가능한 값이기 때문이다.</p>

<blockquote>
  <p>유사 배열 객체<br />
마치 배열처럼 인덱스로 프로퍼티 값에 접근할 수 있고 length 프로퍼티를 갖는 객체를 말한다.</p>
</blockquote>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 문자열은 유사 배열이므로 배열과 유사하게 인덱스를 사용해 각 문자에 접근할 수 있다.</span>
  <span class="kd">var</span> <span class="nx">str</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">string</span><span class="dl">'</span><span class="p">;</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">str</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span> <span class="c1">// s</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">str</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span> <span class="c1">// 6</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">str</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">);</span> <span class="c1">// STRING</span>
</code></pre></div></div>

<h3 id="1113-값에-의한-전달">11.1.3 값에 의한 전달</h3>
<p>변수에 원시 값을 갖는 변수를 할당하면 할당받는 변수에는 할당되는 변수의 <code class="language-plaintext highlighter-rouge">원시 값이 복사되어 전달</code>된다. 이것을 <code class="language-plaintext highlighter-rouge">값에 의한 전달</code>이라 한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">score</span> <span class="o">=</span> <span class="mi">80</span><span class="p">;</span>
  <span class="kd">var</span> <span class="nx">copy</span> <span class="o">=</span> <span class="nx">score</span><span class="p">;</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">score</span><span class="p">,</span> <span class="nx">copy</span><span class="p">);</span> <span class="c1">// 80 80</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">score</span> <span class="o">===</span> <span class="nx">copy</span><span class="p">)</span> <span class="c1">// true</span>
</code></pre></div></div>
<p>copy 변수에 원시 값을 갖는 score 변수를 할당하면 원시 값 80이 복사되어 전달된다.<br />
score 변수와 copy 변수의 값은 80으로 동일하지만, 각 변수의 값 80은 다른 메모리 공간에 저장된 별개의 값이다.<br />
(그림 11-3)</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">score</span> <span class="o">=</span> <span class="mi">80</span><span class="p">;</span>
  <span class="kd">var</span> <span class="nx">copy</span> <span class="o">=</span> <span class="nx">score</span><span class="p">;</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">score</span><span class="p">,</span> <span class="nx">copy</span><span class="p">);</span> <span class="c1">// 80 80</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">score</span> <span class="o">===</span> <span class="nx">copy</span><span class="p">)</span> <span class="c1">// true</span>

  <span class="nx">score</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">score</span><span class="p">,</span> <span class="nx">copy</span><span class="p">);</span> <span class="c1">// 100 80</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">score</span> <span class="o">===</span> <span class="nx">copy</span><span class="p">)</span> <span class="c1">// false</span>
</code></pre></div></div>
<p>score 변수와 copy 변수의 값 80은 다른 메모리 공간에 저장된 별개의 값이기 때문에 score 변수를 변경해도 copy 변수의 값에는 어떠한 영향도 주지 않는다.<br />
<code class="language-plaintext highlighter-rouge">"값의 의한 전달"</code>도 사실은 값을 전달하는 것이 아니라 메모리 주소를 전달한다. 단, 전달된 메모리 주소를 통해 메모리 공간에 접근하면 값을 참조할 수 있다.</p>

<h2 id="112-객체">11.2 객체</h2>
<p>객체는 프로퍼티의 개수가 정해져 있지 않으며, 동적으로 추가되고 삭제할 수 있다. 또한 프로퍼티의 값에도 제약이 없다. 따라서 객체는 원시 값과 같이 확보해야 할 메모리 공간의 크기를 사전에 정해 둘 수 없다.</p>

<h3 id="1121-변경-가능한-값">11.2.1 변경 가능한 값</h3>
<p>객체 타입의 값. 즉 객체는 변경 가능한 값이다. 객체를 할당한 변수를 참조하면 메모리에 저장되어 있는 참조 값을 통해 실제 객체에 접근한다. 객체는 변경 가능한 값이다. 따라서 객체를 할당한 변수는 재할당 없이 객체를 직접 변경할 수 있다. 즉, 재할당 없이 프로퍼티를 동적으로 추가할 수도 있고 프로퍼티 값을 갱산할 수도 있으며 프로퍼티 자체를 삭제할 수도 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Lee</span><span class="dl">'</span>
  <span class="p">};</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">)</span> <span class="c1">// {name: "Lee"}</span>

  <span class="c1">// 프로퍼티 값 갱신</span>
  <span class="nx">person</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Kim</span><span class="dl">'</span><span class="p">;</span>
  <span class="c1">// 프로퍼티 동적 생성 </span>
  <span class="nx">person</span><span class="p">.</span><span class="nx">address</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Seoul</span><span class="dl">'</span><span class="p">;</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">)</span> <span class="c1">// {name: "Kim", address: "Seoul"}</span>
</code></pre></div></div>
<blockquote>
  <p><code class="language-plaintext highlighter-rouge">얕은 복사와 깊은 복사</code><br />
객체를 프로퍼트 값으로 갖는 객체의 경우 얕은 복사는 한 단계까지만 복사하는것을 말하고 깊은 복사는 객체에 중첩되어 있는 객체까지 모두 복사하는 것을 말한다.</p>
</blockquote>

<h3 id="1122-참조에-의한-전달">11.2.2 참조에 의한 전달</h3>
<p>객체를 가리키는 변수를 다른 변수에 할당하면 원본의 참조 값이 복사되어 전달된다. 이를 참조에 의한 전달이라 한다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Lee</span><span class="dl">'</span>
  <span class="p">};</span>

  <span class="c1">// 참조 값을 복사(얕은 복사)</span>
  <span class="kd">var</span> <span class="nx">copy</span> <span class="o">=</span> <span class="nx">person</span><span class="p">;</span>
</code></pre></div></div>

<p><img width="553" alt="스크린샷 2022-04-20 오전 1 23 12" src="https://user-images.githubusercontent.com/44577555/164050375-3cd757ae-321c-48d7-8eb2-e37e03752407.png" /></p>

<p>원본 person을 사본 copy에 할당하면 원본 person의 참조 값을 복사해서 copy에 저장한다. 원본 person과 사본 copy는 서로 다른 매모리 주소를 가지지만 동일한 참조 값을 갖는다. <code class="language-plaintext highlighter-rouge">두 개의 식별자가 하나의 객체를 공유</code>한다는 것을 의미한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Lee</span><span class="dl">'</span>
  <span class="p">};</span>

  <span class="c1">// 참조 값을 복사(얕은 복사)</span>
  <span class="kd">var</span> <span class="nx">copy</span> <span class="o">=</span> <span class="nx">person</span><span class="p">;</span>

  <span class="c1">//person과 copy는 동일한 객체를 참조한다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">copy</span> <span class="o">===</span> <span class="nx">person</span><span class="p">);</span> <span class="c1">//true</span>

  <span class="nx">copy</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Kim</span><span class="dl">'</span><span class="p">;</span>

  <span class="nx">person</span><span class="p">.</span><span class="nx">address</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Seoul</span><span class="dl">'</span><span class="p">;</span>

  <span class="c1">// copy와 person은 동일한 객체를 참조하기 때문에 어느 한쪽에서 객체를 변경하면 서로 영향을 주고받는다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span> <span class="c1">// {name: "Kim", address: "Seoul"}</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">copy</span><span class="p">);</span> <span class="c1">// {name: "Kim", address: "Seoul"}</span>
</code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">person1</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Lee</span><span class="dl">'</span>
  <span class="p">};</span>

  <span class="kd">var</span> <span class="nx">person2</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Lee</span><span class="dl">'</span>
  <span class="p">};</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person1</span> <span class="o">===</span> <span class="nx">person2</span><span class="p">);</span> <span class="c1">// false -&gt; 각 변수가 참조하는 값은 전혀 다른 값이다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person1</span><span class="p">.</span><span class="nx">name</span> <span class="o">===</span> <span class="nx">person2</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span> <span class="c1">// true -&gt; 각 변수에 저장된 name의 값은 같다.</span>
</code></pre></div></div>]]></content><author><name>Hyejic</name></author><category term="js" /><category term="javascript" /><summary type="html"><![CDATA[모던 자바스크립트 Deep Dive 11장 원시 값과 객체의 비교 내용 정리]]></summary></entry><entry><title type="html">10장 객체 리터럴</title><link href="http://localhost:4000/js/modernJS10/" rel="alternate" type="text/html" title="10장 객체 리터럴" /><published>2022-04-12T00:00:00+09:00</published><updated>2022-04-12T00:00:00+09:00</updated><id>http://localhost:4000/js/modernJS10</id><content type="html" xml:base="http://localhost:4000/js/modernJS10/"><![CDATA[<p><br /></p>

<h1 id="10장-객체-리터럴">10장 객체 리터럴</h1>

<h2 id="101-객체란">10.1 객체란?</h2>
<p>자바스크립트는 객체 기방의 프로그래밍 언어이며, 자바스크립트를 구성하는 거ㅣ “모든 것”이 객체다. 다양한 타입의 값을 하나의 단위로 구성한 복합적인 자료구조다.<br />
객체는 프로퍼티와 메서드로 구성된 집합체다.</p>
<ul>
  <li>프로퍼티 : 객체의 상태를 나타내는 값(data)</li>
  <li>메서드 : 프로퍼티상태 데이터를 참조하고 조작할 수 있는 동작(behavior)</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">counter</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">num</span> <span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="c1">// 프로퍼티</span>
    <span class="na">increase</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="c1">// 메서드</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">num</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
</code></pre></div></div>

<h2 id="102-객체-리터럴에-의한-객체-생성">10.2 객체 리터럴에 의한 객체 생성</h2>
<h3 id="자바스크립트의-객체-생성-방법">자바스크립트의 객체 생성 방법</h3>
<ul>
  <li>객체 리터럴</li>
  <li>Object 생성자 함수</li>
  <li>생성자 함수</li>
  <li>Object.create 메서드</li>
  <li>클래스(ES6)</li>
</ul>

<p>객체 생성 방법들중 가장 일반적이고 간단한 방법은 객체 리터럴이다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Lee</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">sayHello</span><span class="p">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Hello: My name is </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="s2">.`</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">};</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">person</span><span class="p">);</span> <span class="c1">// object</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span> <span class="c1">// {name: "Lee", sayHello: f}</span>
</code></pre></div></div>

<h2 id="103-프로퍼티">10.3 프로퍼티</h2>
<p>객체는 프로퍼티의 집합이며, 프로퍼티는 키와 값으로 구성된다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
    <span class="c1">// 프로퍼티 키는 name, 프로퍼티 값은 'Lee'</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Lee</span><span class="dl">'</span><span class="p">,</span>
    <span class="c1">// 프로퍼티 키는 age, 프로퍼티 값은 20</span>
    <span class="na">age</span><span class="p">:</span> <span class="mi">20</span>
  <span class="p">};</span>
</code></pre></div></div>
<ul>
  <li>프로퍼티 키: 빈 문자열을 포함하는 모든 문자열 또는 심벌 값</li>
  <li>프로퍼티 값: 자바스크립트에서 사용할 수 있는 모든 값</li>
</ul>

<p>프로퍼티 키는 가급적 네이밍 규칙을 준수하여 사용하는 것을 권장한다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">firstName</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Hye-ji</span><span class="dl">'</span><span class="p">,</span> <span class="c1">// 네이밍 규직 준수</span>
    <span class="dl">'</span><span class="s1">last-name</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span> <span class="c1">// 네이밍 규직 준수하지 않음 (반드시 따옴표 사용)</span>
  <span class="p">};</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span> <span class="c1">// {firstName: 'Hye-ji', last-name: 'Choi'}</span>
</code></pre></div></div>

<p>문자열 또는 문자열로 평가할 수 있는 표현식을 사용해 프로퍼티 키를 동적으로 생성할 수 있다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{};</span>
  <span class="kd">var</span> <span class="nx">key</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">hello</span><span class="dl">'</span><span class="p">;</span>

  <span class="c1">//ES5</span>
  <span class="nx">obj</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">world</span><span class="dl">'</span><span class="p">;</span>
  
  <span class="c1">//ES6</span>
  <span class="c1">// var obj = {[key]: 'world'};</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span> <span class="c1">// {hello: "world"}</span>
</code></pre></div></div>

<p>빈 문자열이나 var, function과 같은 예약어를 프로퍼티 키로 사용해도 에러가 발생하지 않는다. 하지만 예상치 못한 에러가 발생할 여지가 있으므로 권장하지 않는다. 이미 존재하는 <code class="language-plaintext highlighter-rouge">프로퍼티 키를 중복</code>으로 선언하면 나중에 선언한 프로퍼티가 기존 프로퍼티를 <code class="language-plaintext highlighter-rouge">덮어쓴다</code>.</p>

<h2 id="104-메서드">10.4 메서드</h2>
<p>프로퍼티 값이 함수일 경우 일반 함수와 구분하기 위해 메서드라 부른다. 즉 메서드는 <code class="language-plaintext highlighter-rouge">객체에 묶여있는 함수</code>다.</p>

<h2 id="105-프로퍼티-접근">10.5 프로퍼티 접근</h2>
<h3 id="프로퍼티-접근-방법">프로퍼티 접근 방법</h3>
<ul>
  <li>마침표 프로퍼티 접근 연사자(.)를 사용하는 <code class="language-plaintext highlighter-rouge">마침표 표기법</code></li>
  <li>대괄호 프로퍼티 접근 연산자([…])를 사용하는 <code class="language-plaintext highlighter-rouge">대괄호 표기법</code></li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Lee</span><span class="dl">'</span>
  <span class="p">};</span>

  <span class="c1">// 마침표 표기법</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span> <span class="c1">// "Lee"</span>
  <span class="c1">// 대괄호 표기법</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">[</span><span class="dl">'</span><span class="s1">name</span><span class="dl">'</span><span class="p">]);</span> <span class="c1">// "Lee"</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">대괄호 표기법</code>을 사용하는 경우 <code class="language-plaintext highlighter-rouge">프로퍼티 키는 반드시 따옴표</code>로 감싼 문자열이어야 한다. <code class="language-plaintext highlighter-rouge">존재하지 않는 프로퍼티</code>에 접근하면 <code class="language-plaintext highlighter-rouge">undefined를 반환</code>한다. 프로퍼티 키가 식별자 네이밍 규칙을 준수하지 않는 이름이면 반드시 대괄호 표기법을 사용해야 한다.</p>

<h2 id="106-프로퍼티-값-갱신">10.6 프로퍼티 값 갱신</h2>
<p>이미 존재하는 프로퍼티에 값을 할당하면 프로퍼티 값이 갱신된다.</p>

<h2 id="107-프로퍼티-동적-생성">10.7 프로퍼티 동적 생성</h2>
<p>존재하지 않는 프로퍼티에 값을 할당하면 프로퍼티가 동적으로 생성되어 추가된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span>
  <span class="p">};</span>

  <span class="nx">person</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="mi">30</span><span class="p">;</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">)</span> <span class="c1">// {name: 'Choi', age: 30}</span>
</code></pre></div></div>

<h2 id="108-프로퍼티-삭제">10.8 프로퍼티 삭제</h2>
<p>delete 연산사는 객체의 프로퍼티를 삭제한다. 만약 존재하지 않는 프로퍼티를 삭제하면 아무런 에러 없이 무시된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span>
  <span class="p">};</span>

  <span class="nx">person</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="mi">30</span><span class="p">;</span>

  <span class="k">delete</span> <span class="nx">person</span><span class="p">.</span><span class="nx">age</span><span class="p">;</span> <span class="c1">// 동적으로 생성된 age 프로퍼티 삭제</span>
  <span class="k">delete</span> <span class="nx">person</span><span class="p">.</span><span class="nx">address</span><span class="p">;</span>  <span class="c1">// 존재하지 않는 프로퍼티 라서 무시된다</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">)</span> <span class="c1">// {name: 'Choi'}</span>
</code></pre></div></div>

<h2 id="109-es6에서-추가된-객체-리터럴의-확장-기능">10.9 ES6에서 추가된 객체 리터럴의 확장 기능</h2>
<h3 id="1091-프로퍼티-축약-표현">10.9.1 프로퍼티 축약 표현</h3>
<p>프로퍼티 값으로 변수를 사용하는 경우 변수 이름과 프로퍼티 키가 동일한 이름일 때 프로퍼티 키를 생략할 수 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">//ES6</span>
  <span class="kd">let</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">y</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
  
  <span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">x</span><span class="p">,</span> <span class="nx">y</span> <span class="p">};</span> <span class="c1">// { x: x, y: y}</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="c1">// {x: 1, y: 2}</span>
</code></pre></div></div>

<h3 id="1092-계산된-프로퍼티-이름">10.9.2 계산된 프로퍼티 이름</h3>
<p>문자열 또는 문자열로 타입 변환할 수 있는 값으로 평가되는 표현식을 사용해 프로퍼티 키를 동적으로 생성 할 수도 있다. 단, 프로퍼티 키로 사용할 표현식을 대괄호([…])로 묶어야 한다.</p>

<h4 id="es5">ES5</h4>
<p>객체 리터럴 외부에서 대괄호 표기법 사용([…])</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">prefix</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">prop</span><span class="dl">'</span><span class="p">;</span>
  <span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

  <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{};</span>

  <span class="nx">obj</span><span class="p">[</span><span class="nx">prefix</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">-</span><span class="dl">'</span> <span class="o">+</span> <span class="o">++</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">i</span><span class="p">;</span>
  <span class="nx">obj</span><span class="p">[</span><span class="nx">prefix</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">-</span><span class="dl">'</span> <span class="o">+</span> <span class="o">++</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">i</span><span class="p">;</span>
  <span class="nx">obj</span><span class="p">[</span><span class="nx">prefix</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">-</span><span class="dl">'</span> <span class="o">+</span> <span class="o">++</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">i</span><span class="p">;</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="c1">// {prop-1: 1, prop-2: 2, prop-3: 3}</span>
</code></pre></div></div>

<h4 id="es6">ES6</h4>
<p>객체 리터럴 내부에서 동적 생성</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">prefix</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">prop</span><span class="dl">'</span><span class="p">;</span>
  <span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

  <span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
    <span class="p">[</span><span class="s2">`</span><span class="p">${</span><span class="nx">prefix</span><span class="p">}</span><span class="s2">-</span><span class="p">${</span><span class="o">++</span><span class="nx">i</span><span class="p">}</span><span class="s2">`</span><span class="p">]:</span> <span class="nx">i</span><span class="p">,</span>
    <span class="p">[</span><span class="s2">`</span><span class="p">${</span><span class="nx">prefix</span><span class="p">}</span><span class="s2">-</span><span class="p">${</span><span class="o">++</span><span class="nx">i</span><span class="p">}</span><span class="s2">`</span><span class="p">]:</span> <span class="nx">i</span><span class="p">,</span>
    <span class="p">[</span><span class="s2">`</span><span class="p">${</span><span class="nx">prefix</span><span class="p">}</span><span class="s2">-</span><span class="p">${</span><span class="o">++</span><span class="nx">i</span><span class="p">}</span><span class="s2">`</span><span class="p">]:</span> <span class="nx">i</span>
  <span class="p">};</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="c1">// {prop-1: 1, prop-2: 2, prop-3: 3}</span>
</code></pre></div></div>

<h3 id="1093-메서드-축약-표현">10.9.3 메서드 축약 표현</h3>
<h4 id="es5-1">ES5</h4>
<p>프로퍼티 값으로 함수를 할당</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">sayHi</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Hi </span><span class="dl">'</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">};</span>

  <span class="nx">obj</span><span class="p">.</span><span class="nx">sayHi</span><span class="p">();</span> <span class="c1">// Hi Choi</span>
</code></pre></div></div>

<h4 id="es6-1">ES6</h4>
<p>function 키워드를 생략</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span><span class="p">,</span>
    <span class="nx">sayHi</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Hi </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">};</span>

  <span class="nx">obj</span><span class="p">.</span><span class="nx">sayHi</span><span class="p">();</span> <span class="c1">// Hi Choi</span>
</code></pre></div></div>]]></content><author><name>Hyejic</name></author><category term="js" /><category term="javascript" /><summary type="html"><![CDATA[모던 자바스크립트 Deep Dive 10장 객체 리터럴 내용 정리]]></summary></entry><entry><title type="html">09장 타입 변환과 단축 평가</title><link href="http://localhost:4000/js/modernJS09/" rel="alternate" type="text/html" title="09장 타입 변환과 단축 평가" /><published>2022-04-07T00:00:00+09:00</published><updated>2022-04-07T00:00:00+09:00</updated><id>http://localhost:4000/js/modernJS09</id><content type="html" xml:base="http://localhost:4000/js/modernJS09/"><![CDATA[<p><br /></p>

<h1 id="09장-타입-변환과-단축-평가">09장 타입 변환과 단축 평가</h1>

<h2 id="91-타입-변환이란">9.1 타입 변환이란?</h2>
<p>개발자가 의도적으로 값의 타입을 변환하는 것을 <code class="language-plaintext highlighter-rouge">명시적 타입 변환</code> 또는 <code class="language-plaintext highlighter-rouge">타입 캐스팅</code>이라 한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>

  <span class="c1">// 의도적으로 x의 값의 타입을 string으로 변경</span>
  <span class="kd">var</span> <span class="nx">str</span> <span class="o">=</span> <span class="nx">x</span><span class="p">.</span><span class="nx">toString</span><span class="p">();</span> 
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">str</span><span class="p">,</span> <span class="nx">str</span><span class="p">)</span> <span class="c1">// string 10</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">x</span><span class="p">,</span> <span class="nx">x</span><span class="p">)</span> <span class="c1">// number 10</span>
</code></pre></div></div>

<p>개발자의 의도와는 상관없이 자바스크립트 엔진에 의해 암묵적으로 타입이 자동 변환되는 것을 <code class="language-plaintext highlighter-rouge">암묵적 타입 변환</code> 또는 <code class="language-plaintext highlighter-rouge">타입 강제 변환</code> 이라 한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>

  <span class="c1">// 문자열 연결 연산자는 숫자 타입 x의 값을 바탕으로 새로운 문자열을 생성한다.</span>
  <span class="kd">var</span> <span class="nx">str</span> <span class="o">=</span> <span class="nx">x</span> <span class="o">+</span> <span class="dl">''</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">str</span><span class="p">,</span> <span class="nx">str</span><span class="p">)</span> <span class="c1">// string 10</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">x</span><span class="p">,</span> <span class="nx">x</span><span class="p">)</span> <span class="c1">// number 10</span>
  
</code></pre></div></div>

<h2 id="92-암묵적-타입-변환">9.2 암묵적 타입 변환</h2>
<p>암묵적 타입 변환이 발생하면 문자열, 숫자, 불리언과 같은 원시 타입 중 하나로 타일을 자동 변환한다.</p>

<h3 id="921-문자열-타입으로-변환">9.2.1 문자열 타입으로 변환</h3>
<p>(+)연산자는 피연산자 중 하나 이상이 문자열이면 문자열 연결 연산자로 동작한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="mi">1</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">2</span><span class="dl">'</span> <span class="c1">// "12"</span>
  <span class="mi">0</span> <span class="o">+</span> <span class="dl">''</span> <span class="c1">//  "0"</span>
  <span class="kc">true</span> <span class="o">+</span> <span class="dl">''</span> <span class="c1">// "true"</span>
  <span class="kc">undefined</span> <span class="o">+</span> <span class="dl">''</span> <span class="c1">// "undefined"</span>
  <span class="p">(</span><span class="nb">Symbol</span><span class="p">())</span> <span class="o">+</span> <span class="dl">''</span> <span class="c1">// typeError : Cannot conver a Symbol value to a string</span>
  <span class="p">({})</span> <span class="o">+</span> <span class="dl">''</span> <span class="c1">// "[object Object]"</span>
  <span class="p">[</span><span class="mi">10</span><span class="p">,</span><span class="mi">20</span><span class="p">]</span> <span class="o">+</span> <span class="dl">''</span> <span class="c1">// "10,20"</span>
  <span class="p">(</span><span class="kd">function</span><span class="p">(){})</span> <span class="c1">// "function(){}"</span>
</code></pre></div></div>

<h3 id="922-숫자-타입으로-변환">9.2.2 숫자 타입으로 변환</h3>
<p>산술 연산자의 피연산자 중에서 숫자 타입이 아닌 피연산자를 숫자 타입으로 암묵적 타입 변환한다. <code class="language-plaintext highlighter-rouge">피연산자를 숫자 타입으로 변환할 수 없는 경우</code>는 산술 연산을 수행할 수 없으므로 표현식의 <code class="language-plaintext highlighter-rouge">평가 결과는 NaN</code>이 된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="mi">1</span> <span class="o">-</span> <span class="dl">'</span><span class="s1">1</span><span class="dl">'</span> <span class="c1">// 0</span>
  <span class="mi">1</span> <span class="o">*</span> <span class="dl">'</span><span class="s1">10</span><span class="dl">'</span> <span class="c1">// 10</span>
  <span class="mi">1</span> <span class="o">/</span> <span class="dl">'</span><span class="s1">one</span><span class="dl">'</span> <span class="c1">// NaN</span>
  <span class="dl">'</span><span class="s1">1</span><span class="dl">'</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="c1">// true</span>
  <span class="o">+</span><span class="dl">''</span> <span class="c1">// 0</span>
  <span class="o">+</span><span class="dl">'</span><span class="s1">0</span><span class="dl">'</span> <span class="c1">// 0</span>
  <span class="o">+</span><span class="dl">'</span><span class="s1">1</span><span class="dl">'</span> <span class="c1">// 1</span>
  <span class="o">+</span><span class="dl">'</span><span class="s1">string</span><span class="dl">'</span> <span class="c1">// NaN</span>
  <span class="o">+</span><span class="kc">true</span> <span class="c1">// 1</span>
  <span class="o">+</span><span class="kc">false</span> <span class="c1">// 0</span>
  <span class="o">+</span><span class="kc">null</span> <span class="c1">// 0</span>
  <span class="o">+</span><span class="kc">undefined</span> <span class="c1">// NaN</span>
</code></pre></div></div>

<h3 id="923-불리언-타입으로-변환">9.2.3 불리언 타입으로 변환</h3>
<p>자바스크립트 엔진은 조건식의 평가 결과를 불리언 타입으로 암묵적 타입 변환한다. 이때 자바스크립트 엔진은 <code class="language-plaintext highlighter-rouge">불리언 타입이 아닌 값을 Truthy값 또는 Falsy 값으로 구분</code>한다.</p>

<h4 id="false-값으로-평가되는-falsy값">false 값으로 평가되는 Falsy값</h4>
<ul>
  <li>false</li>
  <li>undefined</li>
  <li>null</li>
  <li>0, -0</li>
  <li>NaN</li>
  <li>’‘(빈문자열)</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">if</span><span class="p">(</span><span class="dl">''</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">1</span><span class="dl">'</span><span class="p">);</span>
  <span class="k">if</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">2</span><span class="dl">'</span><span class="p">);</span>
  <span class="k">if</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">3</span><span class="dl">'</span><span class="p">);</span>
  <span class="k">if</span><span class="p">(</span><span class="dl">'</span><span class="s1">str</span><span class="dl">'</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">4</span><span class="dl">'</span><span class="p">);</span>
  <span class="k">if</span><span class="p">(</span><span class="kc">null</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">5</span><span class="dl">'</span><span class="p">);</span>

  <span class="c1">// 2 4</span>
</code></pre></div></div>

<h2 id="93-명시적-타입-변환">9.3 명시적 타입 변환</h2>
<p>개발자의 의도에 따라 타입을 변경.</p>

<h3 id="931-문자열-타입으로-변환">9.3.1 문자열 타입으로 변환</h3>
<ol>
  <li>String 생성자 함수를 new 연산자 없이 호출</li>
  <li>Object.prototype.toString 메서드 사용</li>
  <li>문자열 연결 연산자 이용</li>
</ol>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 1. String 생성자 함수</span>
  <span class="nb">String</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> <span class="c1">// "1"</span>
  <span class="nb">String</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span> <span class="c1">// "true"</span>

  <span class="c1">// 2. toString 메서드</span>
  <span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="nx">toString</span><span class="p">();</span> <span class="c1">// "1"</span>
  <span class="p">(</span><span class="kc">NaN</span><span class="p">).</span><span class="nx">toString</span><span class="p">();</span> <span class="c1">// "NaN"</span>
  <span class="p">(</span><span class="kc">false</span><span class="p">).</span><span class="nx">toString</span><span class="p">();</span> <span class="c1">// "false"</span>

  <span class="c1">// 3. 문자열 연결 연산자</span>
  <span class="mi">1</span> <span class="o">+</span> <span class="dl">''</span><span class="p">;</span> <span class="c1">// "1"</span>
  <span class="kc">Infinity</span> <span class="o">+</span> <span class="dl">''</span><span class="p">;</span> <span class="c1">// "Infinity"</span>
  <span class="kc">true</span> <span class="o">+</span> <span class="dl">''</span><span class="p">;</span> <span class="c1">// "true"</span>
</code></pre></div></div>

<h3 id="932-숫자타입으로-변환">9.3.2 숫자타입으로 변환</h3>
<ol>
  <li>Number 생성자 함수를 new 연산자 없이 호출</li>
  <li>parseInt, parseFloat 함수 사용(문자열만 숫자 타입으로 변환 가능)</li>
  <li>단항 산술 연산자 이용 (+)</li>
  <li>산술 연산자 이용 (*)</li>
</ol>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 1. Number 생성자 함수</span>
  <span class="nb">Number</span><span class="p">(</span><span class="dl">'</span><span class="s1">0</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// 0</span>
  <span class="nb">Number</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span> <span class="c1">// 1</span>

  <span class="c1">// 2. parseInt, parseFloat 함수</span>
  <span class="nb">parseInt</span><span class="p">(</span><span class="dl">'</span><span class="s1">0</span><span class="dl">'</span><span class="p">)</span> <span class="c1">// "1"</span>
  <span class="nb">parseFloat</span><span class="p">(</span><span class="dl">'</span><span class="s1">10.53</span><span class="dl">'</span><span class="p">)</span> <span class="c1">// 10.53</span>

  <span class="c1">// 3. + 단항 산술 연산자</span>
  <span class="o">+</span><span class="dl">'</span><span class="s1">0</span><span class="dl">'</span><span class="p">;</span> <span class="c1">// 0</span>
  <span class="o">+</span><span class="dl">'</span><span class="s1">-1</span><span class="dl">'</span><span class="p">;</span> <span class="c1">// -1</span>
  <span class="o">+</span><span class="kc">false</span><span class="p">;</span> <span class="c1">// 0</span>

  <span class="c1">// 3. * 산술 연산자</span>
  <span class="dl">'</span><span class="s1">0</span><span class="dl">'</span> <span class="o">*</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// 0</span>
  <span class="dl">'</span><span class="s1">-1</span><span class="dl">'</span> <span class="o">*</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// -1</span>
  <span class="kc">true</span> <span class="o">*</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// 1</span>
  
</code></pre></div></div>
<h3 id="933-불리언-타입으로-변환">9.3.3 불리언 타입으로 변환</h3>
<ol>
  <li>Boolean 생성자 함수를 new 연산자 없이 호출</li>
  <li>! 부정 논리 연산자를 두 번 사용</li>
</ol>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 1. Boolean 생성자 함수</span>
  <span class="nb">Boolean</span><span class="p">(</span><span class="dl">'</span><span class="s1">x</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// true</span>
  <span class="nb">Boolean</span><span class="p">(</span><span class="dl">''</span><span class="p">);</span> <span class="c1">// false</span>
  <span class="nb">Boolean</span><span class="p">(</span><span class="dl">'</span><span class="s1">false</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// true</span>
  <span class="nb">Boolean</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span> <span class="c1">// false</span>
  <span class="nb">Boolean</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> <span class="c1">// true</span>
  <span class="nb">Boolean</span><span class="p">(</span><span class="kc">NaN</span><span class="p">);</span> <span class="c1">// false</span>
  <span class="nb">Boolean</span><span class="p">({});</span> <span class="c1">// true</span>
  <span class="nb">Boolean</span><span class="p">([]);</span> <span class="c1">// true</span>

  <span class="c1">// 2. 부정 논리 연산자를 두 번</span>
  <span class="o">!!</span><span class="dl">'</span><span class="s1">x</span><span class="dl">'</span><span class="p">;</span> <span class="c1">// true</span>
  <span class="o">!!</span><span class="dl">''</span><span class="p">;</span> <span class="c1">// false</span>
  <span class="o">!!</span><span class="dl">'</span><span class="s1">false</span><span class="dl">'</span><span class="p">;</span> <span class="c1">// true</span>
  <span class="o">!!</span><span class="mi">0</span><span class="p">;</span> <span class="c1">// false</span>
  <span class="o">!!</span><span class="kc">NaN</span><span class="p">;</span> <span class="c1">// false</span>
  <span class="o">!!</span><span class="kc">undefined</span><span class="p">;</span> <span class="c1">// false</span>
  <span class="o">!!</span><span class="p">{};</span> <span class="c1">//true</span>
  <span class="o">!!</span><span class="p">[];</span> <span class="c1">//true</span>
</code></pre></div></div>

<h2 id="94-단축-평가">9.4 단축 평가</h2>
<h3 id="941-논리-연산자를-사용한-단축-평가">9.4.1 논리 연산자를 사용한 단축 평가</h3>
<h4 id="논리합-논리곱">논리합(||) 논리곱(&amp;&amp;)</h4>
<p><code class="language-plaintext highlighter-rouge">논리곱(&amp;&amp;)</code> 연산자는 두 개의 피연산자가 <code class="language-plaintext highlighter-rouge">모두 true로 평가될 때 true를 반환</code>한다. 논리곱 연산자는 논리 연산의 결과를 결정하는 두 번째 피연산자를 그대로 반환한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="dl">'</span><span class="s1">Cat</span><span class="dl">'</span> <span class="o">||</span> <span class="dl">'</span><span class="s1">Dog</span><span class="dl">'</span> <span class="c1">// "Dog"</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">논리합(||)</code> 연산자는 두 개의 피연산자 중 <code class="language-plaintext highlighter-rouge">하나만 true로 평가되어도 true를 반환</code>한다. 논리합 연산자는 논리 연산의 결과를 첫 번째 피 연산자가 결정한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="dl">'</span><span class="s1">Cat</span><span class="dl">'</span> <span class="o">||</span> <span class="dl">'</span><span class="s1">Dog</span><span class="dl">'</span> <span class="c1">// "Cat"</span>
</code></pre></div></div>

<p>논리 연산의 결과를 결정하는 피연산자를 타입 변환하지 않고 그대로 반환한다. 이를 단축 평가라 한다. 단축평가는 표현식을 평가하는 도중에 평가가 확정된 경우 나머지 평가 과정을 생략한다.</p>

<table>
  <thead>
    <tr>
      <th>단축 평가 표현식</th>
      <th>평가 결과</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>true || anything</td>
      <td>true</td>
    </tr>
    <tr>
      <td>false || anything</td>
      <td>anything</td>
    </tr>
    <tr>
      <td>true &amp;&amp; anything</td>
      <td>anything</td>
    </tr>
    <tr>
      <td>false &amp;&amp; anything</td>
      <td>false</td>
    </tr>
  </tbody>
</table>

<h4 id="if문-대체">if문 대체</h4>
<p>어떤 조건이 Truthy 값일 때 무언가를 해야 한다면 논리곱(&amp;&amp;) 연산자 표현식으로 if문을 대체할 수 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">done</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
  <span class="kd">var</span> <span class="nx">message</span> <span class="o">=</span> <span class="dl">''</span><span class="p">;</span>
  
  <span class="c1">// if문 사용</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="nx">message</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">완료</span><span class="dl">'</span><span class="p">;</span>

  <span class="c1">// 논리곱 연산자 표현</span>
  <span class="nx">message</span> <span class="o">=</span> <span class="nx">done</span> <span class="o">&amp;&amp;</span> <span class="dl">'</span><span class="s1">완료</span><span class="dl">'</span><span class="p">;</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">message</span><span class="p">);</span> <span class="c1">// 완료</span>
</code></pre></div></div>
<p>어떤 조건이 Falsy 값일 때 무언가를 해야 한다면 논리합(||) 연산자 표현식으로 if문을 대체할 수 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">done</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
  <span class="kd">var</span> <span class="nx">message</span> <span class="o">=</span> <span class="dl">''</span><span class="p">;</span>
  
  <span class="c1">// if문 사용</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">done</span><span class="p">)</span> <span class="nx">message</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">미완료</span><span class="dl">'</span><span class="p">;</span>

  <span class="c1">// 논리곱 연산자 표현</span>
  <span class="nx">message</span> <span class="o">=</span> <span class="nx">done</span> <span class="o">||</span> <span class="dl">'</span><span class="s1">미완료</span><span class="dl">'</span><span class="p">;</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">message</span><span class="p">);</span> <span class="c1">// 미완료</span>
</code></pre></div></div>

<h3 id="942-옵셔널-체이닝-연산자">9.4.2 옵셔널 체이닝 연산자</h3>
<p>ES11에서 도입된 <code class="language-plaintext highlighter-rouge">옵셔널 체이닝 연산자 ?.는 좌항의 피연산자가 null 또는 undefined인 경우 undefined를 반환</code>하고, 그렇지 않으면 우항의 프로퍼티 참조를 이어간다. 객체를 가리키기를 기대하는 변수가 null 또는 undefined가 아닌지 확인하고 프로퍼티를 참조할 때 유용하다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">elem</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
  <span class="kd">var</span> <span class="nx">value</span> <span class="o">=</span> <span class="nx">elem</span><span class="p">?.</span><span class="nx">value</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">value</span><span class="p">);</span> <span class="c1">// undefined </span>
</code></pre></div></div>

<p>좌항 피연산자가 false로 평가되는 Falsy 값이라도 null 또는 undefined가 아니면 우항의 프로퍼티 참조를 이어간다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">str</span> <span class="o">=</span> <span class="dl">''</span><span class="p">;</span>
  <span class="kd">var</span> <span class="nx">length</span> <span class="o">=</span> <span class="nx">str</span><span class="p">?.</span><span class="nx">length</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">length</span><span class="p">);</span> <span class="c1">// 0</span>
</code></pre></div></div>

<h3 id="943-null-병합-연산자">9.4.3 null 병합 연산자</h3>
<p>ES11에서 도입된 null 병합 연산자 ??는 좌항의 피연산자가 null 또는 undefined인 경우 우항의 피연산자를 반환하고, 그렇지 않으면 좌항의 피연산자를 반환한다. 변수에 기본값을 설정할 때 유용하다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="kc">null</span> <span class="p">??</span> <span class="dl">'</span><span class="s1">default string</span><span class="dl">'</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span> <span class="c1">// "default string"</span>
</code></pre></div></div>]]></content><author><name>Hyejic</name></author><category term="js" /><category term="javascript" /><summary type="html"><![CDATA[모던 자바스크립트 Deep Dive 09장 타입 변환과 단축 평가 내용 정리]]></summary></entry></feed>