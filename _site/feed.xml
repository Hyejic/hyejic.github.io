<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-05-26T01:09:33+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">공부해서 남주자</title><subtitle>공부한것을 기록하고 공유하는 블로그입니다.</subtitle><author><name>Hyejic</name></author><entry><title type="html">25장 클래스</title><link href="http://localhost:4000/js/modernJS25/" rel="alternate" type="text/html" title="25장 클래스" /><published>2022-05-23T00:00:00+09:00</published><updated>2022-05-23T00:00:00+09:00</updated><id>http://localhost:4000/js/modernJS25</id><content type="html" xml:base="http://localhost:4000/js/modernJS25/"><![CDATA[<p><br /></p>

<h1 id="25장-클래스">25장 클래스</h1>
<h2 id="251-클래스는-프로토타입의-문법적-설탕인가">25.1 클래스는 프로토타입의 문법적 설탕인가?</h2>
<p>클래스는 함수이며 기존 프로토타입 기반 패턴을 클래스 기반 패턴처럼 사용할 ㅅ 있도록 하는 문법적 설탕이라고 볼 수도 있다.<br />
단, 클래스와 생성자 함수는 모두 프로토타입 기반의 인스턴스를 생성하지만 정확히 동일하게 동작하지는 않는다. 클래스는 함수보다 엄격하고 생성자 함수에서는 제공하지 않는 기능도 제공한다.</p>
<h3 id="클래스와-생성자-함수-차이점">클래스와 생성자 함수 차이점</h3>
<ul>
  <li>클래스를 new 연산자 없이 호출하면 에러가 발생한다. 하지만 생성자 함수를 new 연산자 없이 호출하면 일반 함수로서 호출된다.</li>
  <li>클래스는 상속을 지원하는 extends와 super 키워드를 제공한다. 하지만 생성자 함수는 extends와 super 키워드를 지원하지 않는다.</li>
  <li>클래스는 호이스팅이 발생하지 않는 것처럼 동작한다. 하지만 함수 선언문으로 정의된 생성자 함수는 함수 호이스팅이, 함수 표현식으로 정의한 생성자 함수는 변수 호이스팅이 발생한다.<br />
(클래스는 호이스팅 안되는것처럼. 함수 선언문 - 함수 호이스팅. 함수 표현식 - 변수 호이스팅)</li>
  <li>클래스 내의 모든 코드에는 암묵적으로 strict mode가 저장되어 실행되며 strict mode를 해제할 수 없다. 하지만 생성자 함수는 암묵적으로 strict mode가 지정되지 않는다.</li>
  <li>클래스의 constructor, 프로토타입 메서드, 정적 메서드는 모두 프로퍼티 어트리뷰트 [[Enumerable]]의 값이 false다. 다시 말해, 열거되지 않는다.</li>
</ul>

<p>클래스는 생성자 함수 기반의 객체 생성 방식보다 견고하고 명료하다. 특히 클래스의 extends와 super 키워드는 상속 관계 구현을 더욱 간결하고 명료하게 한다.<br />
따라서 클래스를 프로토타입 기반 객체 생성 패턴의 단순한 문법적 설탕이라고 보기보다는 새로운 객체 생성 매커니즘으로 보는 것이 좀 더 합당하다.</p>

<h2 id="252-클래스의-정의">25.2 클래스의 정의</h2>
<p>클래스는 class 키워드를 사용하여 정의한다. 클래스 이름은 파스칼 케이스를 사용하는것이 일반적.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 클래스 선언문</span>
  <span class="kd">class</span> <span class="nx">Person</span> <span class="p">{}</span>
</code></pre></div></div>
<p>일반적이지는 않지만 함수와 마찬가지로 표현식으로 클래스를 정의할 수도 있다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 익명 클래스 표현식</span>
  <span class="kd">const</span> <span class="nx">Person</span> <span class="o">=</span> <span class="kd">class</span> <span class="p">{};</span>

  <span class="c1">// 기명 클래스 표현식</span>
  <span class="kd">const</span> <span class="nx">Person</span> <span class="o">=</span> <span class="kd">class</span> <span class="nx">MyClass</span> <span class="p">();</span>
</code></pre></div></div>

<p>클래스는 함수다. 따라서 클래스는 값처럼 사용할 수 있는 일급 객체로서 다음과 같은 특징을 갖는다.</p>
<ul>
  <li>무명의 리터럴로 생성할 수 있따. 즉, 런타임에 생성이 가능하다.</li>
  <li>변수나 자료구조(객체, 배열 등)에 저장할 수 있다.</li>
  <li>함수의 매개변수에게 전달할 수 있다.</li>
  <li>함수의 반환값으로 사용할 수 있다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 클래스 선언문</span>
  <span class="kd">class</span> <span class="nx">Person</span> <span class="p">{</span>
    <span class="c1">// 생성자</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// 인스턴스 생성 및 초기화</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span> <span class="c1">// name 프로퍼티는 public하다.</span>
    <span class="p">}</span>
    <span class="c1">// 프로토타입 메서드</span>
    <span class="nx">sayHi</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Hi! My name is </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="c1">// 정적 메서드</span>
    <span class="kd">static</span> <span class="nx">sayHello</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Hello</span><span class="dl">'</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="c1">// 인스턴스 생성</span>
  <span class="kd">const</span> <span class="nx">me</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span><span class="p">);</span>

  <span class="c1">// 인스턴스의 프로퍼티 참조</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">me</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span> <span class="c1">// Choi</span>
  <span class="c1">// 프로토타입 메서드 호출</span>
  <span class="nx">me</span><span class="p">.</span><span class="nx">sayHi</span><span class="p">();</span> <span class="c1">// Hi! My name is Choui</span>
  <span class="c1">// 정적 메서드 호출</span>
  <span class="nx">Person</span><span class="p">.</span><span class="nx">sayHello</span><span class="p">();</span> <span class="c1">// Hello!</span>
</code></pre></div></div>

<h3 id="클래스와-생성자-함수의-정의-방식-비교">클래스와 생성자 함수의 정의 방식 비교</h3>
<p><img width="551" alt="그림25-1" src="https://user-images.githubusercontent.com/44577555/169783238-5771091a-021b-42ec-b625-e00895874b23.png" /></p>

<h2 id="253-클래스-호이스팅">25.3 클래스 호이스팅</h2>
<p>클래스는 함수로 평가된다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 클래스 선언문</span>
  <span class="kd">class</span> <span class="nx">Person</span> <span class="p">{}</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">Person</span><span class="p">);</span> <span class="c1">// function</span>
</code></pre></div></div>
<p>클래스 선언문으로 정의한 클래스는 함수 선언문과 같이 런타임 이전(소스코드 평가 과정)에 먼저 평가되어 함수 객체를 생성한다. 이때 클래스가 평가되어 생성된 함수 객체는 생성자 함수로서 호출할 수 있는 함수, 즉 constructor다. 함수 정의가 평가되어 함수 객체를 생성하는 시점에 프로토타입도 더불어 생성된다.(프로토타입과 생성자 함수는 언제나 쌍으로 존재하기 때문)<br />
단, 클래스는 클래스 정의 이전에 참조할 수 없다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">Person</span><span class="p">);</span>
  <span class="c1">// ReferenceError: Cannot access 'Person' before initialization</span>

  <span class="c1">// 클래스 선언문</span>
  <span class="kd">class</span> <span class="nx">Person</span> <span class="p">{}</span>
</code></pre></div></div>

<p>클래스 선언문은 let, const 키워드로 선언한 변수처럼 호이스팅 된다. 따라서 클래스 선언문 이전에 일시적 사각지대에 빠지기 떄문에 호이스팅이 발생하지 않는것 처럼 동작한다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">Person</span> <span class="o">=</span> <span class="dl">''</span><span class="p">;</span>

  <span class="p">{</span>
    <span class="c1">// 호이스팅이 발생하지 않는다면 ''이 출력되어야 한다.</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">Person</span><span class="p">);</span>
    <span class="c1">// ReferenceError: Cannot access 'Person' before initialization</span>

    <span class="c1">// 클래스 선언문</span>
    <span class="kd">class</span> <span class="nx">Person</span> <span class="p">{}</span>
  <span class="p">}</span>
</code></pre></div></div>

<h2 id="254-인스턴스-생성">25.4 인스턴스 생성</h2>
<p>클래스는 생성자 함수이며 new 연산자와 함께 호출되어 인스턴스를 생성한다.
함수와는 다르게 클래스는 반드시 new 연산자와 함께 호출해야 한다.
(함수 - new 연산자 사용 여부에 따라 일반함수 또는 생성자 함수가 된다.)</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">class</span> <span class="nx">Person</span> <span class="p">{}</span>

  <span class="kd">const</span> <span class="nx">me</span> <span class="o">=</span> <span class="nx">Person</span><span class="p">();</span>
  <span class="c1">// TypeError: Class constructor Foo cannot be invoked without 'new'</span>
</code></pre></div></div>
<p>클래스 표현식으로 정의된 클래스의 경우 클래스를 가리키는 식별자를 사용해 인스턴스를 생성하지 ㅇ낳고 기명 클래스 표현식의 클래스 이름을 사용해 인스턴스를 생성하면 에러가 발생한다. 이는 기명 함수 표현식과 마찬가지로 클래스 표현식에서 사용한 클래스 이름은 외부 코드에서 접근 불가능하기 때문이다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">Person</span> <span class="o">=</span> <span class="kd">class</span> <span class="nx">MyClass</span> <span class="p">{};</span>

  <span class="c1">// 함수 표현식과 마찬가지로 클래스를 가리키는 식별자로 인스턴스를 생성해야 한다.</span>
  <span class="kd">const</span> <span class="nx">me</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">();</span>

  <span class="c1">// 클래스 이름 MyClass는 함수와 동일하게 클래스 몸체 내부에서만 유효한 식별자다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">MyClass</span><span class="p">);</span> <span class="c1">// ReferenceError: MyClass is not defined</span>

  <span class="kd">const</span> <span class="nx">you</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MyClass</span><span class="p">();</span> <span class="c1">// ReferenceError: MyClass is not defined</span>
</code></pre></div></div>

<h2 id="255-메서드">25.5 메서드</h2>
<p>클래스 몸체에서 정의할 수 있는 메서드는 constructor(생성자), 프로토타입 메서드, 정적 메서드의 세 가지가 있다.</p>
<h3 id="2551-constructor">25.5.1 constructor</h3>
<p>constructor는 인스턴스를 생성하고 초기화하기 위한 특수한 메서드다. 
클래스는 인스턴스를 생성하기 위한 생성자 함수다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">class</span> <span class="nx">Person</span> <span class="p">{</span>
    <span class="c1">// 생성자</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// 인스턴스 생성 및 초기화</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="c1">// 클래스는 함수다</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">Person</span><span class="p">);</span> <span class="c1">// function</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">dir</span><span class="p">(</span><span class="nx">Person</span><span class="p">);</span> <span class="c1">// class Person</span>
</code></pre></div></div>
<p><img width="235" alt="console.dir" src="https://user-images.githubusercontent.com/44577555/169851947-d40a643c-b649-459d-a879-37567be392f9.png" /></p>

<p>이처럼 클래스는 평가되어 함수 객체가 된다. 함수와 동일하게 프로퍼티와 연결되어 있으며 자신의 스코프체인을 구성한다.<br />
모든 함수 객체가 가지고 있는 prototype 프로퍼티가 가리키는 프로토타입 객체의 constructor 프로퍼티는 클래스 자신을 가리키고 있다. 이는 클래스가 인스턴스를 생성하는 생성자 함수라는 것을 의미한다. 즉, new 연산자와 함께 클래스를 호출하면 클래스는 인스턴스를 생성한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">class</span> <span class="nx">Person</span> <span class="p">{</span>
    <span class="c1">// 생성자</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// 인스턴스 생성 및 초기화</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="kd">const</span> <span class="nx">me</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">me</span><span class="p">);</span>
</code></pre></div></div>
<p><img width="391" alt="image" src="https://user-images.githubusercontent.com/44577555/169854114-342a4a03-a7e5-4af1-b86a-85a2c3a13830.png" /></p>

<p>Person 클래스의 constructor 내부에서 this에 추가한 name 프로퍼티가 클래스가 생성한 인스턴스의 프로퍼티로 추가된 것을 확인할 수 있다. 즉, 생성자 함수와 마찬가지로 constructor 내부에서 this에 추가한 프로퍼티는 인스턴스 프로퍼티가 된다. constructor 내부의 this는 생성자 함수와 마찬가지로 클래스가 생성한 인스턴스를 가리킨다.<br />
클래스 몸체에 정의한 constructor는 단순한 메서드로 해석되는 것이 아니라 클래스가 평가되어 생성한 함수 객체 코드의 일부가 된다. 다시 말해, 클래스 정의가 평가되면 constructor의 기술된 동작을 하는 함수 객체가 생성된다.</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">클래스의 constructor 메서드와 프로토타입의 constructor 프로퍼티</code><br />
클래스의 constructor 메서드와 프로토타입의 constructor 프로퍼티는 이름이 같아 혼동하기 쉽지만 직접적인 관련이 없다. 프로토타입의 constructor 프로퍼티는 모든 프로토타입이 가지고 있는 프로퍼티이며, 생성자 함수를 가리킨다.</p>
</blockquote>

<h4 id="클래스의-constructor와-생성자-함수의-차이점">클래스의 constructor와 생성자 함수의 차이점</h4>

<ul>
  <li>
    <p>constructor는 클래스 내에 최대 한 개만 존재할 수 있다.</p>
  </li>
  <li>constructor는 생략할 수 있다. 생략하면 클래스에 빈 consructor가 암묵적으로 정의된다. 따라서 constructor를 생략한 클래스는 빈 constructor에 의해서 빈 객체를 생성한다.
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">class</span> <span class="nx">Person</span> <span class="p">{</span>
    <span class="c1">// 암묵적으로 constructor 생성</span>
    <span class="kd">constructor</span><span class="p">()</span> <span class="p">{}</span>
  <span class="p">}</span>

  <span class="kd">const</span> <span class="nx">me</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">();</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">me</span><span class="p">);</span> <span class="c1">// Person {}</span>
</code></pre></div>    </div>
  </li>
  <li>프로퍼티가 추가되어 초기화된 인스턴스를 생성하려면 constructor 내부에서 this에 인스턴스 프로퍼티를 추가한다.
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">class</span> <span class="nx">Person</span> <span class="p">{</span>
    <span class="kd">constructor</span><span class="p">()</span> <span class="p">{</span>
      <span class="c1">// 고정값 인스턴스 초기화</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span><span class="p">;</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">address</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Seoul</span><span class="dl">'</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="c1">// 인스턴스 프로퍼티가 추가된다.</span>
  <span class="kd">const</span> <span class="nx">me</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">();</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">me</span><span class="p">);</span> <span class="c1">// Person {name: "Choi", address: "Seoul"}</span>
</code></pre></div>    </div>
  </li>
  <li>외부에서 인스턴스 프로퍼티의 초기값을 전달하려면 constructor에 매개변수를 선언하고 인스턴스를 생성할 때 초기값을 전달한다. 이때 초기값은 constructor의 매개변수에게 전달된다.
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">class</span> <span class="nx">Person</span> <span class="p">{</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">address</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">address</span> <span class="o">=</span> <span class="nx">address</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="c1">// 인스턴스 프로퍼티가 추가된다.</span>
  <span class="kd">const</span> <span class="nx">me</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">Seoul</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">me</span><span class="p">);</span> <span class="c1">// Person {name: "Choi", address: "Seoul"}</span>
</code></pre></div>    </div>
    <p>인스턴스를 초기화 하려면 constructor를 생략해서는 안 된다.</p>
  </li>
  <li>constructor는 별도의 반환문을 갖지 않아야 한다. new 연산자와 함께 클래스가 호출되면 생성자함수와 동일하게 암묵적으로 this, 즉 인스턴스를 반환하기 때문이다. 만약 this가 아닌 다른 객체를 명시적으로 반환하면 this, 즉 인스턴스가 반환되지 못하고 return 문에 명시한 객체가 반환된다.
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">class</span> <span class="nx">Person</span> <span class="p">{</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
        
      <span class="c1">// 명시적으로 객체를 반환하면 암묵적인 this 반환이 무시된다.</span>
      <span class="k">return</span> <span class="p">{};</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="c1">// constructor에서 명시적으로 반환한 빈 객체가 반환된다.</span>
  <span class="kd">const</span> <span class="nx">me</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">me</span><span class="p">);</span> <span class="c1">// {}</span>
</code></pre></div>    </div>
    <p>명시적으로 원시값을 반환하면 원시값 반환은 무시되고 암묵적으로 this가 반환된다.</p>
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">class</span> <span class="nx">Person</span> <span class="p">{</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
        
      <span class="c1">// 명시적으로 원시값을 반환하면 원시값 반환은 무시되고 암묵적으로 this가 반환된다.</span>
      <span class="k">return</span> <span class="mi">100</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="kd">const</span> <span class="nx">me</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">me</span><span class="p">);</span> <span class="c1">// Person {name: "Choi"}</span>
</code></pre></div>    </div>
    <p>이처럼 constructor 내부에서 명시적으로 this가 아닌 다른 값을 반환하는 것은 클래스의 기본 동작을 훼손하는 것이므로 constructor 내부에서 return 문은 반드시 생략해야 한다.</p>
  </li>
</ul>

<h3 id="2552-프로토타입-메서드">25.5.2 프로토타입 메서드</h3>
<p>셍성자 함수를 사용하여 인스턴스를 생성하는 경우 프로토타입 메서드를 생성하기 위해서는 다음과 같이 명시적으로 프로토타입에 메서드를 추가해야 한다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 생성자 함수</span>
  <span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="c1">// ⭐️ 생성자 함수 프로토타입 메서드</span>
  <span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">sayHi</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Hi my name is </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="kd">const</span> <span class="nx">me</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Peroson</span><span class="p">(</span><span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">me</span><span class="p">.</span><span class="nx">sayHi</span><span class="p">();</span> <span class="c1">// Hi my name is Choi</span>
</code></pre></div></div>

<p>클래스 몸체에서 정의한 메서드는 생성자 함수에 의한 객체 생성 방식과는 다르게 클래스의 prototype 프로퍼티에 메서드를 추가하지 않아도 기본적으로 프로토타입 메서드가 된다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">class</span> <span class="nx">Person</span> <span class="p">{</span>
    <span class="c1">// 생성자</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// 인스턴스 생성 및 초기화</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="c1">// ⭐️ 클래스 프로토타입 메서드</span>
  <span class="nx">sayHi</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Hi my name is </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="kd">const</span> <span class="nx">me</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Peroson</span><span class="p">(</span><span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">me</span><span class="p">.</span><span class="nx">sayHi</span><span class="p">();</span> <span class="c1">// Hi my name is Choi</span>
</code></pre></div></div>

<p>생성자 함수와 마찬가지로 클래스가 생성한 인스턴스는 프로토타입 체인의 일원이 된다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// me 객체의 프로토타입은 Person.prototype이다.</span>
  <span class="nb">Object</span><span class="p">.</span><span class="nx">getPrototypeOf</span><span class="p">(</span><span class="nx">me</span><span class="p">)</span> <span class="o">===</span> <span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span> <span class="c1">// true</span>
  <span class="nx">me</span> <span class="k">instanceof</span> <span class="nx">Person</span><span class="p">;</span> <span class="c1">// true</span>

  <span class="c1">// Person.prototype의 프로토타입은 Object.prototype이다.</span>
  <span class="nb">Object</span><span class="p">.</span><span class="nx">getPrototypeOf</span><span class="p">(</span><span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">)</span> <span class="o">===</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span> <span class="c1">// true</span>
  <span class="nx">me</span> <span class="k">instanceof</span> <span class="nx">Obejct</span><span class="p">;</span> <span class="c1">// true</span>

  <span class="c1">// me 객체의 constructor는 Person 클래스다.</span>
  <span class="nx">me</span><span class="p">.</span><span class="kd">constructor</span> <span class="o">===</span> <span class="nx">Person</span><span class="p">;</span> <span class="c1">// true</span>
</code></pre></div></div>
<p><img width="465" alt="그림 25-4" src="https://user-images.githubusercontent.com/44577555/169862852-3b6e26ca-8166-4e0d-9af1-6562d85d20c0.png" /></p>

<p>클래스 몸체에서 정의한 메서드는 인스턴스의 프로토타입에 존재하는 프로토타입 메서드가 된다.<br />
인스턴스는 프로토타입 메서드를 상속받아 사용할 수 있다.<br />
프로토타입 체인은 기존의 모든 객체 생성 방식(객체 리터럴, 생성자 함수, Object.create 메서드 등)뿐만아니라 클래스에 의해 생성된 인스턴스에도 동일하게 적용된다.<br />
결국 클래스는 생성자 함수와 같이 인스턴스를 생성하는 생성자 함수라고 볼 수 있다.<br />
클래스는 생성자 함수와 마찬가지로 프로토타입 기반의 객체 생성 매커니즘이다.</p>

<h3 id="2553-정적-메서드">25.5.3 정적 메서드</h3>
<p>정적 메서드는 인스턴스를 생성하지 않아도 호출할수 있는 메서드를 말한다.</p>
<h4 id="생성자-함수-정적-메서드">생성자 함수 정적 메서드</h4>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 생성자 함수</span>
  <span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="c1">// 정적 메서드 </span>
  <span class="nx">Person</span><span class="p">.</span><span class="nx">sayHi</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Hi!</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="c1">// 정적 메서드 호출</span>
  <span class="nx">Person</span><span class="p">.</span><span class="nx">sayHi</span><span class="p">();</span> <span class="c1">// Hi!</span>
</code></pre></div></div>

<h4 id="클래스-정적-메서드">클래스 정적 메서드</h4>
<p>클래스에서는 메서드에 static 키워드를 붙이면 정적 메서드가 된다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">class</span> <span class="nx">Person</span> <span class="p">{</span>
    <span class="c1">// 생성자</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// 인스턴스 생성 및 초기화</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// 정적 메서드</span>
    <span class="kd">static</span> <span class="nx">sayHi</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Hi</span><span class="dl">'</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
</code></pre></div></div>
<p>위 예제의 Person 클래스의 프로토타입 체인<br />
<img width="433" alt="그림25-5" src="https://user-images.githubusercontent.com/44577555/169973407-a8d85ec3-03ad-4d7f-834b-5e65a3445f32.png" />
이처럼 정적 메서드는 클래스에 바인딩된 메서드가 된다. 클래스는 함수 객체로 평가되므로 프로퍼티나/메서드를 소유할 수 있고 클래스 정의가 평가되는 시점에 함수 객체가 되므로 인스턴스와 달리 별다른 생성 과정이 필요 없다. 따라서 정적 메서드는 클래스 정의 이후 인스턴스를 생성하지 않아도 호출할 수 있다.</p>

<p>정적 메서드는 프로토타입 메서드처럼 인스턴스로 호출하지 않고 클래스로 호출한다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 정적 메서드는 클래스로 호출한다.</span>
  <span class="c1">// 정적 메서드는 인스턴스 없이도 호출할 수 있다.</span>
  <span class="nx">Person</span><span class="p">.</span><span class="nx">sayHi</span><span class="p">();</span> <span class="c1">// Hi</span>
</code></pre></div></div>
<p>정적 메서드는 인스턴스로 호출할 수 없다. 정적 메세드가 바인딩된 클래스는 인스턴스의 프로토타입 체인상에 존재하지 않기 때문이다.<br />
다시 말해, 인스턴스의 프로토타입 체인 상에는 클래스가 존재하지 않기 때문에 인스턴스로 클래스의 메서드를 상속받을 수 없다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 인스턴스 생성</span>
  <span class="kd">const</span> <span class="nx">me</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="dl">'</span><span class="s1">Lee</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">me</span><span class="p">.</span><span class="nx">sayHi</span><span class="p">();</span> <span class="c1">// TypeError: me.sayHi is not a function</span>
</code></pre></div></div>

<h3 id="2554-정적-메서드와-프로토타입-메서드의-차이">25.5.4 정적 메서드와 프로토타입 메서드의 차이</h3>
<ol>
  <li>정적 메서드와 프로토타입 메서드는 자신이 속해 있는 프로토타입 체인이 다르다.</li>
  <li>정적 메서드는 클래스로 호출하고 프로토타입 메서드는 인스턴스로 호출한다.</li>
  <li>정적 메서드는 인스턴스 프로퍼티를 참조할 수 없지만 프로토타입 메서드는 인스턴스 프로퍼티를 참조할 수 있다.</li>
</ol>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">class</span> <span class="nx">Square</span> <span class="p">{</span>
    <span class="c1">// 정적 메서드</span>
    <span class="kd">static</span> <span class="nx">area</span><span class="p">(</span><span class="nx">width</span><span class="p">,</span> <span class="nx">height</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">width</span> <span class="o">*</span> <span class="nx">height</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">Square</span><span class="p">.</span><span class="nx">area</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">));</span> <span class="c1">// 100</span>
</code></pre></div></div>
<p>위 예제에서 정적 메서드 area는 인스턴스 프로퍼티를 참조하지 않는다. 만약 인스턴스 프로퍼티를 참조해야 한다면 정적 메서드 대신 프로토타입 메서드를 사용해야 한다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">class</span> <span class="nx">Square</span> <span class="p">{</span>
    <span class="c1">// 인스턴스</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="nx">width</span><span class="p">,</span> <span class="nx">height</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// 인스턴스 프로퍼티 초기화</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="nx">width</span><span class="p">;</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">height</span> <span class="o">=</span> <span class="nx">height</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// 프로토타입 메서드</span>
    <span class="nx">area</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">height</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="kd">const</span> <span class="nx">square</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Square</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">square</span><span class="p">.</span><span class="nx">area</span><span class="p">());</span> <span class="c1">// 100</span>
</code></pre></div></div>
<p>메서드 내부의 this는 메서드를 소유한 객체가 아니라 메서드를 호출한 객체, 즉 메서드 이름 앞의 마침표 연산자 앞에 기술한 객체에 바인딩 된다.
위의 예제의 경우 square 객체로 프로토타입 메서드 area를 호출했기 때문에 area 내부의 this는 square 객체를 가리킨다.<br />
정적 메서드는 클래스로 호출해야 하므로 정적 메서드 내부의 this는 인스턴스가 아닌 클래스를 가리킨다. 즉, 프로토타입 메서드와 정적 메서드 내부의 this 바인딩이 다르다.<br />
따라서 메서드 내부에서 인스턴스 프로퍼티를 참조하려면 this를 사용해야 하며, 이러한 경우 프로토타입 메서드로 정의해야 한다.<br />
표준 빌트인 객체인 Math, Number, JSON, Object, Reflect 등은 다양한 정적 메서드를 가지고 있다. 이들 정적 메서드는 애플리케이션 전역에서 사용할 유틸리티 함수다. 예를들어 전달받은 인수 중에서 가장 큰 수를 반환하는 Math.max는 인스턴스와 상관없이 애플리케이션 전역에서 사용할 유틸리티 함수다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">//</span>
  <span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span> <span class="c1">//  3</span>
  <span class="nb">Number</span><span class="p">.</span><span class="nb">isNaN</span><span class="p">(</span><span class="kc">NaN</span><span class="p">);</span> <span class="c1">// true</span>
  <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span><span class="na">a</span><span class="p">:</span> <span class="mi">1</span><span class="p">});</span> <span class="c1">// "{"a": 1}"</span>
  <span class="nb">Object</span><span class="p">.</span><span class="nx">is</span><span class="p">({},</span> <span class="p">{});</span> <span class="c1">// false</span>
  <span class="nb">Reflect</span><span class="p">.</span><span class="nx">has</span><span class="p">({</span> <span class="na">a</span><span class="p">:</span> <span class="mi">1</span> <span class="p">},</span> <span class="dl">'</span><span class="s1">a</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// true</span>
</code></pre></div></div>
<p>이처럼 클래스 또는 생성자 함수를 하나의 네임스페이스로 사용하여 정적 메서드를 모아 놓으면 이름 충돌 가능성을 줄여 주고 관련 함수들을 구조화할 수 있는 효과가 있다. 이같은 이유로 정적 메서드는 애플리케이션 전역에서 사용할 유틸리티 함수를 전역 함수로 정의하지 않고 메서드로 구조화할 때 유용하다.</p>

<h3 id="2555-클래스에서-정의한-메서드의-특징">25.5.5 클래스에서 정의한 메서드의 특징</h3>
<ol>
  <li>function 키워드를 생략한 메서드 축약 표현을 사용한다.</li>
  <li>객체 리터럴과는 다르게 클래스에서 메서드를 정의할 때는 콤마가 필요 없다.</li>
  <li>암묵적으로 strict mode로 실행된다.</li>
  <li>for …in 문이나 Object.keys 메서드 등으로 열거할 수 없다. 즉, 프로퍼티의 열거 가능 여부를 나타내며, 불리언 값을 갖는 프로퍼티 어트리뷰트[[Enumerable]]의 값이 false다.</li>
  <li>내부 메서드 [[Construct]]를 갖지 않는 non-constructor다. 따라서 new 연산자와함께 호출할 수 없다.</li>
</ol>

<h2 id="256-클래스의-인스턴스-생성-과정">25.6 클래스의 인스턴스 생성 과정</h2>
<p>new 연산자와 함께 클래스를 호출하면 생성자 함수와 마찬가지로 클래스 내부 메서드 [[Construct]]가 호출된다. 클래스는 new 연산자 없이 호출할 수 없다.<br />
생성자 함수의 인스턴스 생성 과정과 유사한 과정을 거쳐 인스턴스가 생성된다.</p>
<ol>
  <li>인스턴스 생성과 this 바인딩<br />
new 연산자와 함께 클래서를 호출하면 constructor의 내부 코드가 실행되기에 앞서 암묵적으로 빈 객체가 생성된다. 이 빈 객체가 바로 클래스가 생성한 인스턴스다. 이때 클래스가 생성한 인스턴스의 프로토타입으로 클래스의 prototype 프로퍼티가 가리키는 객체가 설정된다. 그리고 암묵적으로 생성된 빈객체, 즉 인스턴스는 this에 바인딩된다. 따라서 constructor 내부의 this는 클래스가 생성한 인스턴스를 가리킨다.</li>
  <li>인스턴스 초기화
constructor의 내부 코드가 실행되어 this에 바인딩되어 있는 인스턴스를 초기화한다. 즉, this에 바인딩 되어 있는 인스턴스에 프로퍼티를 추가하고 constructor가 인수로 전달받은 초기값으로 인스턴스의 프로퍼티 값을 초기화한다. 만약 constructor가 생략 되었다면 이 과정도 생략된다.</li>
  <li>인스턴스의 반환
클래스의 모든처리가 끝나면 완성된 인스턴스가 바인딩된 this가 암묵적으로 반환된다.</li>
</ol>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">class</span> <span class="nx">Person</span> <span class="p">{</span>
    <span class="c1">// 생성자</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// 1. 암묵적으로 인스턴스가 생성되고 this에 바인딩된다.</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">);</span> <span class="c1">// Person {}</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">getPrototypeOf</span><span class="p">(</span><span class="k">this</span><span class="p">)</span> <span class="o">===</span> <span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span> <span class="c1">// true</span>

      <span class="c1">// 2. this에 바인딩되어 있는 인스턴스를 초기화한다.</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>

      <span class="c1">// 3. 완선된 인스턴스가 바인딩된 this가 암묵적으로 반환된다.</span>
    <span class="p">}</span>
  <span class="p">}</span>
</code></pre></div></div>

<h2 id="257-프로퍼티">25.7 프로퍼티</h2>
<h3 id="2571-인스턴스-프로퍼티">25.7.1 인스턴스 프로퍼티</h3>
<p>인스턴스 프로퍼니티는 constructor 내부에서 정의해야 한다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">class</span> <span class="nx">Person</span> <span class="p">{</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// 인스턴스 프로퍼티</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span> <span class="c1">// name 프로퍼티는 public하다.</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="kd">const</span> <span class="nx">me</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">me</span><span class="p">);</span> <span class="c1">// Person {name: "Choi"}</span>
  <span class="c1">// name은 public하다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">me</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span> <span class="c1">// Choi</span>
</code></pre></div></div>
<p>생성자 함수에서 생성자 함수가 생성할 인스턴스의 프로퍼티를 정의하는 것과 마찬가지로 constructor 내부에서 this에 인스턴스 프로퍼티를 추가한다. 이로써 클래스가 암묵적으로 생성한 빈 객체, 즉 인스턴스에 프로퍼티가 추가되어 인스턴스가 초기화된다.<br />
constructor 내부에서 this에 추가한 프로퍼티는 언제나 클래스가 생성한 인스턴스의 프로퍼티가 된다.</p>

<h3 id="2572-접근자-프로퍼티">25.7.2 접근자 프로퍼티</h3>
<p>접근자 프로퍼티는 자체적으로는 값을 갖지 않고 다른 데이터 프로퍼티의 값을 읽거나 저장할 때 사용하는 접근자 함수로 구성된 프로퍼티다.</p>
<div style="display:flex; justify-content:space-between;">
<div style="width:49%;">

  ```javascript
    const person = {
      // 데이터 프로퍼티
      firstName: 'Hyeji',
      lastName: 'Choi',

      // fullName은 접근자 함수로 구성된 접근자 프로퍼티다.
      // getter 함수
      get fullName() {
        return `${this.firstName} ${this.lastName}`;
      },
      // setter 함수
      set fullName(name) {
        // 배열 디스트럭처링 할당
        [this.firstName, this.lastName] = name.split(' ');
      }
    };

    // 데이터 프로퍼티를 통한 프로퍼티 값의 참조.
    console.log(`${person.firstName} ${person.lastName}`); // Hyeji Choi

    // 접근자 프로퍼티를 통한 프로퍼티 값의 저장
    // 접근자 프로퍼티 fullName에 값을 저장하면 setter함수가 호출된다.
    person.fullName = `Hihi Choi`;
    console.log(person); // {firstName: 'Hihi', lastName: 'Choi'}

    // 접근자 프로퍼티를 통한 프로퍼티 값의 참조
    // 접근자 프로퍼티 fullName에 접근하면 getter 함수가 호출된다.
    console.log(person.fullName); // Hihi Choi

    // fullName은 접근자 프로퍼티다.
    // 접근자 프로퍼티는 get, set, enumeravle, configurable 프로퍼티 어트리뷰트를 갖는다.
    console.log(Object.getOwnPropertyDescriptor(person, 'fullName')); 
    // {enumerable: true, configurable: true, get: ƒ, set: ƒ}
  ``` 
</div>
<div style="width:49%;">

```javascript
  class Person {
    constructor(firstName, lastName) {
      this.firstName = firstName;
      this.lastName = lastName;
    }
    // fullName은 접근자 함수로 구성된 접근자 프로퍼티다.
    // getter 함수
    get fullName() {
      return `${this.firstName} ${this.lastName}`;
    },
    // setter 함수
    set fullName(name) {
      // 배열 디스트럭처링 할당
      [this.firstName, this.lastName] = name.split(' ');
    }
  }
  
  const me = new Person('Hyeji', 'Choi');

  // 데이터 프로퍼티를 통한 프로퍼티 값의 참조.
  console.log(`${person.firstName} ${person.lastName}`); // Hyeji Choi

  // 접근자 프로퍼티를 통한 프로퍼티 값의 저장
  // 접근자 프로퍼티 fullName에 값을 저장하면 setter함수가 호출된다.
  person.fullName = `Hihi Choi`;
  console.log(person); // {firstName: 'Hihi', lastName: 'Choi'}

  // 접근자 프로퍼티를 통한 프로퍼티 값의 참조
  // 접근자 프로퍼티 fullName에 접근하면 getter 함수가 호출된다.
  console.log(person.fullName); // Hihi Choi

  // fullName은 접근자 프로퍼티다.
  // 접근자 프로퍼티는 get, set, enumeravle, configurable 프로퍼티 어트리뷰트를 갖는다.
  console.log(Object.getOwnPropertyDescriptor(person, 'fullName')); 
  // {enumerable: true, configurable: true, get: ƒ, set: ƒ}
``` 
</div>
</div>

<p>접근자 프로퍼티는 자체적으로 값을 갖지 않고 다른 데이터 프로퍼티의 값을 읽거나 저장할 때 사용하는 접근자 함수, 즉 getter 함수와 setter 함수로 구성되어있다.</p>

<ul>
  <li>getter<br />
<code class="language-plaintext highlighter-rouge">인스턴스 프로퍼티에 접근할 때마다</code> 프로퍼티 값을 조작하거나 별도의 행위가 필요할 때 사용.<br />
반드시 무언가를 반환해야한다.</li>
  <li>setter<br />
<code class="language-plaintext highlighter-rouge">인스턴스 프로퍼티에 값을 할당할 때마다</code> 프로퍼티 값을 조작하거나 별도의 행위가 필요할 때 사용.<br />
할당해야 할 때 사용하므로 반드시 매개변수가 있어야 한다. 단 하나의 값만 할당받기 때문에 단 하나의 매개변수만 선언할 수 있다.</li>
</ul>

<p>클래스의 메서드는 기본적으로 프로토타입 메서드가 된다.</p>

<p><img width="549" alt="image" src="https://user-images.githubusercontent.com/44577555/170073274-3bee1e74-4874-46ee-b9ad-0c24f8da2fbf.png" /></p>

<h3 id="2573-클래스-필드-정의-제안">25.7.3 클래스 필드 정의 제안</h3>
<p>클래스 필드는 클래스 기반 객체지향 언어에서 클래스가 생성할 인스턴스의 프로퍼티를 가리키는 용어다.<br />
자바의 클래스 필드는 마치 클래스 내부에서 변수처럼 사용된다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 자바의 클래스 정의</span>
  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
    <span class="c1">// 1. 클래스 필드 정의</span>
    <span class="c1">// 클래스 필드는 클래스 몸체에 this 없이 tjsdjsgodi gksek.</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">firstName</span> <span class="o">=</span> <span class="s">""</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">lastName</span> <span class="o">=</span> <span class="s">""</span><span class="o">;</span>

    <span class="c1">// 생성자</span>
    <span class="nc">Person</span><span class="o">(</span><span class="nc">String</span> <span class="n">firstName</span><span class="o">,</span> <span class="nc">String</span> <span class="n">lastName</span><span class="o">)</span> <span class="o">{</span>
      <span class="c1">// 3. this는 언제나 클래스가 생성할 인스턴스를 가리킨다.</span>
      <span class="k">this</span><span class="o">.</span><span class="na">firstName</span> <span class="o">=</span> <span class="n">firstName</span><span class="o">;</span>
      <span class="k">this</span><span class="o">.</span><span class="na">lastName</span> <span class="o">=</span> <span class="n">lastName</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getFullName</span><span class="o">()</span> <span class="o">{</span>
      <span class="c1">// 2. 클래스 필드 참조</span>
      <span class="c1">// this 없이도 클래스 필드를 참조할 수 있다.</span>
      <span class="k">return</span> <span class="n">firstName</span> <span class="o">+</span> <span class="s">" "</span> <span class="o">+</span> <span class="n">lastName</span><span class="o">;</span>
    <span class="o">}</span>
  <span class="o">}</span>
</code></pre></div></div>
<h4 id="자바의-클래스-특징">자바의 클래스 특징</h4>
<ol>
  <li>예제의 1과 같이 클래스 필드를 마치 변수처럼 클래스 몸체에 this없이 선언한다.<br />
  자바스크립트 클래스는 인스턴스 프로퍼티를 선언하고 초기화 하려면 반드시 constructor 내부에서 this에 프로퍼티를 추가해야 한다.</li>
  <li>예제의 2과 같이 this를 생략해도 클래스 필드를 참조할 수 있다.<br />
  자바스크립트 클래스에서 인스턴스 프로퍼티를 참조하려면 반드시 this를 사용하여 참조해야 한다.</li>
  <li>예제의 3과 같이 this는 주로 클래스 필드가 생성자 또는 메서드의 매개변수 이름과 동일할 때 클래스 필드임을 명확히 하기위해 사용한다.<br />
  클래스 기반 객체지향 언어의 this는 언제나 클래스가 생성할 인스턴스를 가리킨다.</li>
</ol>

<p>자바스크립트의 클래스 몸체에는 메서드만 선언할 수 있다. 따라서 클래스 몸체에서 자바와 유사하게 클래스 필드를 선언하면 문법에러가 발생한다. 
하지만 최신 브라우저 또는 최신 Node.js에서 실행하면 문법 에러가 발생하지 않고 정상 동작한다.<br />
자바스크립트에서도 인스턴스 프로퍼티를 마치 클래스 기반 객체지향 언어의 클래스 필드처럼 정의할수 있는 새로운 표준 사양인 “Class field declarations”가 2021년 1월 TC39 프로세스의 stage3에 제안되어 있다.<br />
클래스 몸체에서 클래스 필드를 정의할 수 있는 클래스 필드 정의 제안은 아직 ECMAScript의 정식 표준 양으로 승급되지 않았다. 하지만 최신 브라우저(Chrome 72)와 최신 Node.js(버전 12 이상)는 표준 사양으로 승급이 확실시 되는 이 제안을 선제적으로 미리 구현해 놓아서 클래스 필드를 클래스 몸체에 정의할 수 있다. 또는 Babel과 같은 build 시스템을 사용한다면 기능을 사용할 수 있다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">class</span> <span class="nx">Person</span> <span class="p">{</span>
    <span class="c1">// 클래스 필드 정의</span>
    <span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="kd">const</span> <span class="nx">me</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">me</span><span class="p">);</span> <span class="c1">// Person {name: 'Choi'}</span>
</code></pre></div></div>

<ul>
  <li>클래스 몸체에서 클래스 필드를 정의하는 경우 this에 클래스 필드를 바인딩해서는 안 된다. this는 클래스의 constructor와 메서드 내에서만 유효하다.
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">class</span> <span class="nx">Person</span> <span class="p">{</span>
    <span class="c1">// this에 클래스 필드를 바인딩해서는 안 된다.</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">''</span><span class="p">;</span> <span class="c1">// Uncaught SyntaxError: Unexpected token '.'</span>
  <span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>클래스 필드를 참조하는 경우 자바스크립트에서는 this를 반드시 사용해야 한다.
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">class</span> <span class="nx">Person</span> <span class="p">{</span>
    <span class="c1">// 클래스 필드</span>
    <span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span><span class="p">;</span>
      
    <span class="kd">constructor</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name</span><span class="p">);</span> <span class="c1">// ???? 예제와 달리 오류 안나고 정상 작동함.  Person {name: 'Choi'}</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">new</span> <span class="nx">Person</span><span class="p">();</span>
</code></pre></div>    </div>
  </li>
  <li>클래스 필드에 초기값을 할당하지 않으면 undefined를 갖는다.
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">class</span> <span class="nx">Person</span> <span class="p">{</span>
    <span class="c1">// 클래스 필드 초기화 하지 않으면 undefined를 갖는다.</span>
    <span class="nx">name</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="kd">const</span> <span class="nx">me</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">();</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">me</span><span class="p">);</span> <span class="c1">// Person {name: undefined}</span>
</code></pre></div>    </div>
  </li>
  <li>인스턴스를 생성할 때 외부의 초기값으로 클래스 필드를 초기화해야 할 필요가 있다면 constructor에서 클래스 필드를 초기화해야 한다.
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">class</span> <span class="nx">Person</span> <span class="p">{</span>
    <span class="nx">name</span><span class="p">;</span>

    <span class="kd">constructor</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// 클래스 필드 초기화</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
    
  <span class="kd">const</span> <span class="nx">me</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">me</span><span class="p">);</span> <span class="c1">// Person {name: 'Choi'}</span>
</code></pre></div>    </div>
  </li>
  <li>함수는 일급 객체 이므로 함수를 클래스 필드에 할당할 수 있다. 따라서 클래스 필드를 통해 메서드를 정의할 수도 있다.
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">class</span> <span class="nx">Person</span> <span class="p">{</span>
    <span class="c1">// 클래스 필드에 문자열을 할당</span>
    <span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span><span class="p">;</span>

    <span class="c1">// 클래스 필드에 함수 할당</span>
    <span class="nx">getName</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="c1">// 화살표 함수도 가능</span>
    <span class="c1">// getName = () =&gt; this.name;</span>
  <span class="p">}</span>
    
  <span class="kd">const</span> <span class="nx">me</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">();</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">me</span><span class="p">);</span> <span class="c1">// Person {name: 'Choi', getName: ƒ}</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">me</span><span class="p">.</span><span class="nx">getName</span><span class="p">());</span> <span class="c1">// Choi</span>
</code></pre></div>    </div>
    <p>이처럼 클래스 필드에 함수를 할당하는 경우, 이 함수는 프로토타입 메서드가 아닌 인스턴스 메서드가 된다.<br />
모든 클래스 필드는 인스턴스 포로퍼티가 되기 때문이다. 따라서 클래스 필드에 함수를 할당하는 것은 권장하지 않는다.</p>

    <h4 id="클래스-필드-정의-제안으로-인스턴스-프로퍼티-정의하는-방법-두-가지">클래스 필드 정의 제안으로 인스턴스 프로퍼티 정의하는 방법 두 가지</h4>
    <ol>
      <li>외부 초기값으로 클래스 필드를 초기화할 필요가 <code class="language-plaintext highlighter-rouge">있</code>다면 - constructor에서 인스턴스 프로퍼티를 정의하는 기존 방식 사용.</li>
      <li>외부 초기값으로 클래스 필드를 초기화할 필요가 <code class="language-plaintext highlighter-rouge">없</code>다면 - 기존의 constructor에서 인스턴스 프로퍼티를 정의하는 방식과 클래스 필드 정의 제안 모두 사용 가능.</li>
    </ol>
  </li>
</ul>

<h3 id="2574-private-필드-정의-제안">25.7.4 private 필드 정의 제안</h3>
<p>자바스크립트는 캡슐화를 완전하게 지원하지 않는다.<br />
ES6의 클래스도 생성자 함수와 마찬가지로 private, public, protected 키워드와 같은 접근 제한자를 지원하지 않는다.<br />
따라서 인스턴스 프로퍼티는 인스턴스를 통해 클래스 외부에서 언제나 참조할 수 있는 pubilc이다. 클래스 필드 정의 제안을 사용하더라도 클래스 필드는 public하기 때문에 외부에 그대로 노출된다.</p>
<div style="display:flex; justify-content:space-between;">
<div style="width:49%;">

  ```javascript
    class Person {
      constructor(name) {
        // 인스턴스 프로퍼티는 기본적으로 public하다.
        this.name = name; 
      }
    }

    const me = new Person('Choi');
    console.log(me.name); // Choi
  ``` 
</div>
<div style="width:49%;">

```javascript
  class Person {
    // 클래스 필드도 기본적으로 public하다.
    name = 'Choi'; 
  }

  // 인스턴스 생성
  const me = new Person();
  console.log(me.name); // Choi
``` 
</div>
</div>

<p>다행히도 TC39 프로세서의 stage 3에는 private 필드를 정의할 수 있는 새로운 표준 사양이 제안되어 있다. 표준 사양으로 승급이 확실시되는 이 제안도 최신 브라우저와 최신 Node.js에 이미 구현되어 있다.<br />
private 필드의 선두에는 #을 붙여준다. private 필드를 참조할 때도 #을 붙여주어야 한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">class</span> <span class="nx">Person</span> <span class="p">{</span>
    <span class="c1">// private 필드 정의</span>
    <span class="err">#</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">''</span><span class="p">;</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// private 필드 참조</span>
      <span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="kd">const</span> <span class="nx">me</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span><span class="p">);</span>

  <span class="c1">// private 필드 #name은 클래스 외부에서 참조할 수 없다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">me</span><span class="p">.</span><span class="err">#</span><span class="nx">name</span><span class="p">);</span>
  <span class="c1">// Uncaught SyntaxError: Private field '#name' must be declared in an enclosing class</span>
</code></pre></div></div>

<p>public 필드는 어디서든 참조할 수 있지만 private 필드는 클래스 내부에서만 참조할 수 있다.
접근 가능성 | public | private
–|–|–
클래스 내부 | O | O
자식 클래스 내부 | O | X
클래스 인스턴스를 통한 접근 | O | X</p>

<p>이처럼 클래스 외부에서 private 필드에 직접 접근할 수 있는 방법은 없다. 다만 접근자 프로퍼티를 통해 간접적으로 접근하는 방법은 유효하다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">class</span> <span class="nx">Person</span> <span class="p">{</span>
    <span class="c1">// private 필드 정의</span>
    <span class="err">#</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">''</span><span class="p">;</span>

    <span class="kd">constructor</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">//name은 접근자 프로퍼티다.</span>
    <span class="kd">get</span> <span class="nx">name</span><span class="p">()</span> <span class="p">{</span>
      <span class="c1">// private 필드를 참조하여 trim한 다음 반환한다.</span>
      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">name</span><span class="p">.</span><span class="nx">trim</span><span class="p">();</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="kd">const</span> <span class="nx">me</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="dl">'</span><span class="s1"> Choi </span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">me</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span> <span class="c1">// Choi</span>
</code></pre></div></div>
<p>private 필드는 반드시 클래스 몸체에 정의해야 한다. private 필드를 직접 constructor에 정의하면 에러 발생.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">class</span> <span class="nx">Person</span> <span class="p">{</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// private 필드는 클래스 몸체에서 정의해야 한다.</span>
      <span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
      <span class="c1">// Uncaught SyntaxError: Private field '#name' must be declared in an enclosing class</span>
    <span class="p">}</span>
  <span class="p">}</span>
</code></pre></div></div>

<h3 id="2575-static-필드-정의-제안">25.7.5 static 필드 정의 제안</h3>
<p>클래스애는 static 키워드를 사용하여 정적 메서드를 정의 할 수 있다. 하지만 static 키워드를 사용하여 정적 필드를 정의할 수는 없었다.<br />
하지만 static public 필드, static private 필드, static private 메서드를 정의할 수 있는 새로운 표준 사양인 “Static class features”가 TC39 프로세스의 stage 3에 제안되어 있다. 최신 브라우저와 Node.js에는 이미 구현되어 있다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">class</span> <span class="nx">MyMath</span> <span class="p">{</span>
    <span class="c1">// static public 필드 정의</span>
    <span class="kd">static</span> <span class="nx">PI</span> <span class="o">=</span> <span class="mi">22</span> <span class="o">/</span> <span class="mi">7</span><span class="p">;</span>

    <span class="c1">// static private 필드 정의</span>
    <span class="kd">static</span> <span class="err">#</span><span class="nx">num</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>

    <span class="c1">// static 메서드</span>
    <span class="kd">static</span> <span class="nx">increment</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="o">++</span><span class="nx">MyMath</span><span class="p">.</span><span class="err">#</span><span class="nx">num</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">MyMath</span><span class="p">.</span><span class="nx">PI</span><span class="p">);</span> <span class="c1">// 3.142857142857143</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">MyMath</span><span class="p">.</span><span class="nx">increment</span><span class="p">());</span> <span class="c1">// 11</span>
</code></pre></div></div>

<h2 id="258-상속에-의한-클래스-확장">25.8 상속에 의한 클래스 확장</h2>
<h3 id="2581-클래스-상속과-생성자-함수-상속">25.8.1 클래스 상속과 생성자 함수 상속</h3>
<p>상속에 의한 클래스 확장은 프로토타입 기반 상속과는 다른 개념으로 기존 클래스를 상속받아 새로운 클래스를 확장하여 정의하는 것이다.<br />
상속에 의한 클래스 확장은 코드 재사용 관점에서 매우 유용하다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">class</span> <span class="nx">Animal</span> <span class="p">{</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="nx">age</span><span class="p">,</span> <span class="nx">weight</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="nx">age</span><span class="p">;</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">weight</span> <span class="o">=</span> <span class="nx">weight</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="nx">eat</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="dl">'</span><span class="s1">eat</span><span class="dl">'</span><span class="p">;</span> <span class="p">}</span>

    <span class="nx">move</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="dl">'</span><span class="s1">move</span><span class="dl">'</span><span class="p">;</span> <span class="p">}</span>
  <span class="p">}</span>

  <span class="c1">// 상속을 통해 Animal 클래스를 확장한 Bird 클래스</span>
  <span class="kd">class</span> <span class="nx">Bird</span> <span class="kd">extends</span> <span class="nx">Animal</span> <span class="p">{</span>
    <span class="nx">fly</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="dl">'</span><span class="s1">fly</span><span class="dl">'</span><span class="p">;</span> <span class="p">}</span>
  <span class="p">}</span>

  <span class="kd">const</span> <span class="nx">bird</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Bird</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">bird</span><span class="p">);</span> <span class="c1">// Bird {age: 1, weight: 5}</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">bird</span> <span class="k">instanceof</span> <span class="nx">Bird</span><span class="p">);</span> <span class="c1">// true</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">bird</span> <span class="k">instanceof</span> <span class="nx">Animal</span><span class="p">);</span> <span class="c1">// true</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">bird</span><span class="p">.</span><span class="nx">eat</span><span class="p">());</span> <span class="c1">// eat</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">bird</span><span class="p">.</span><span class="nx">move</span><span class="p">());</span> <span class="c1">// move</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">bird</span><span class="p">.</span><span class="nx">fly</span><span class="p">());</span> <span class="c1">// fly</span>
</code></pre></div></div>
<p>상속에 의해 확장된 클래스 Bird를 통해 생성된 인스턴스의 프로토타입 체인은 다음과 같다.
<img width="456" alt="그림 25-9" src="https://user-images.githubusercontent.com/44577555/170215801-467cf091-fcaa-4c34-87e0-8cb56dcb7495.png" /></p>

<p>클래스는 상속을 통해 다른 클래스를 확장할 수 있는 문법인 extends 키워드가 기본적으로 제공된다.<br />
extends 키워드를 사용한 클래스 확장은 간편하고 직관적이다. 반면에 생성자 함수는 클래스와 같이 상속을 통해 다른 생성자 함수를 확장할 수 있는 문법이 제공되지 않는다.</p>

<h3 id="2582-extends-키워드">25.8.2 extends 키워드</h3>
<p>상속을 통해 클래스를 확장하려면 extends 키워드를 사용하여 상속받을 클래스를 정의한다.</p>
<ul>
  <li>상속을 통해 확장된 클래스 -&gt; 서브클래스/파생클래스/자식클래스</li>
  <li>서브클래스에게 상속된 클래스 -&gt; 수퍼클래스/베이스클래스/부모클래스
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 수퍼(베이스/부모) 클래스</span>
<span class="kd">class</span> <span class="nx">Base</span> <span class="p">{}</span>

<span class="c1">// 서브(파생/자식) 클래스</span>
<span class="kd">class</span> <span class="nx">Derived</span> <span class="kd">extends</span> <span class="nx">Base</span> <span class="p">{}</span>
</code></pre></div>    </div>
  </li>
</ul>

<p>extends 키워드의 역할은 수퍼클래스와 서브클래스 간의 상속 관곌를 설정하는 것이다. 클래스도 프로토타입을 통해 상속 관계를 구현한다.</p>

<p><img width="377" alt="그림25-10" src="https://user-images.githubusercontent.com/44577555/170218055-7c74d5ea-fd82-48a2-883e-984fae36d693.png" /></p>

<p>수퍼클래스와 서브클래스는 인스턴스의 프로토타입 체인뿐 아니라 클래스 간의 프로토타입 체인도 생성한다. 이를 통해 프로토타입 메서드, 정적 메서드 모두 상속이 가능하다.</p>

<h3 id="2583-동적-상속">25.8.3 동적 상속</h3>
<p>extends 키워드는 클래스뿐만 아니라 생성자 함수를 상속받아 클래스를 확장할 수도 있다. 단, extends 키워드 앞에는 반드시 클래스가 와야 한다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 생성자 함수</span>
  <span class="kd">function</span> <span class="nx">Base</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">a</span> <span class="o">=</span> <span class="nx">a</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="c1">// 생성자 함수를 상속받는 서브 클래스</span>
  <span class="kd">class</span> <span class="nx">Derived</span> <span class="kd">extends</span> <span class="nx">Base</span> <span class="p">{}</span>

  <span class="kd">const</span> <span class="nx">derived</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Derived</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">derived</span><span class="p">);</span> <span class="c1">// Derived {a: 1}</span>
</code></pre></div></div>

<p>extends 키워드 다음에는 클래스뿐만이 아니라 [[Construct]] 내부 메서드를 갖는 함수 객체로 평가될 수 있는 모든 표현식을 사용할 수 있다. 이를 통해 동적으로 상속받을 대상을 결정할 수 있다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">Base1</span><span class="p">()</span> <span class="p">{}</span>

  <span class="kd">class</span> <span class="nx">Base2</span> <span class="p">{}</span>

  <span class="kd">let</span> <span class="nx">condition</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>

  <span class="c1">// 조건에 따라 동적으로 상속 대상을 결정하는 서브클래스</span>
  <span class="kd">class</span> <span class="nx">Derived</span> <span class="kd">extends</span> <span class="p">(</span><span class="nx">condition</span> <span class="p">?</span> <span class="nx">Base1</span> <span class="p">:</span> <span class="nx">Base2</span><span class="p">)</span> <span class="p">{}</span>

  <span class="kd">const</span> <span class="nx">derived</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Derived</span><span class="p">();</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">derived</span><span class="p">);</span> <span class="c1">// Derived {}</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">derived</span> <span class="k">instanceof</span> <span class="nx">Base1</span><span class="p">);</span> <span class="c1">// true</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">derived</span> <span class="k">instanceof</span> <span class="nx">Base2</span><span class="p">);</span> <span class="c1">// false</span>
</code></pre></div></div>

<h3 id="2584-서브클래스의-construtor">25.8.4 서브클래스의 construtor</h3>
<p>클래스에서 constructor를 생략하면 클래스에 다음과 같이 비어있는 constructor가 암묵적으로 정의된다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">constructor</span><span class="p">()</span> <span class="p">{}</span>
</code></pre></div></div>
<p>서브 클래스에서 constructor를 생략하면 클래스에 다음과 같은 constructor가 암묵적으로 정의된다. args는 new 연산자와 함께 클래스를 호출할 때 전달한 인수의 리스트다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">constructor</span><span class="p">(...</span><span class="nx">args</span><span class="p">)</span> <span class="p">{</span> <span class="k">super</span><span class="p">(...</span><span class="nx">args</span><span class="p">);</span> <span class="p">}</span>  
</code></pre></div></div>
<p>super()는 수퍼클래스의 constructor를 호출하여 인스턴스를 생성한다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 수퍼클래스</span>
  <span class="kd">class</span> <span class="nx">Base</span> <span class="p">{}</span> 
  <span class="cm">/** constructor 생략시 암묵적으로 constructor가 정의된다.
   * class Base {
   *  constructor() {}
   * } 
  */</span>
  <span class="c1">// 서브클래스</span>
  <span class="kd">class</span> <span class="nx">Derived</span> <span class="kd">extends</span> <span class="nx">Base</span> <span class="p">{}</span>
  <span class="cm">/** constructor 생략시 암묵적으로 constructor가 정의된다.
   * class Derived extends Base {
   *  constructor(...args) { super(...args); }  
   * } 
  */</span>
  <span class="kd">const</span> <span class="nx">derived</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Derived</span><span class="p">();</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">derived</span><span class="p">);</span> <span class="c1">// Derived {}</span>
</code></pre></div></div>
<p>위 예제와 같이 수퍼클래스와 서브클래스 모두 constructor를 생략하면 빈 객체가 생성된다. 프로퍼티를 소유하는 인스턴스를 생성하려면 constructor 내부에서 인스턴스에 프로퍼티를 추가해야 한다.</p>

<h3 id="2585-super-키워드">25.8.5 super 키워드</h3>
<p>super 키워드는 함수처럼 호출할 수도 있고 this와 같이 식별자처럼 참조할 수 있는 특수한 키워드다. super는 다음과 같이 동작한다.</p>
<ul>
  <li>super를 호출하면 수퍼클래스의 constructor를 호출한다.</li>
  <li>super를 참조하면 수퍼클래스의 메서드를 호출할 수 있다.</li>
</ul>

<h4 id="super-호출">super 호출</h4>
<p>super를 호출하면 수퍼클래스의 constructor를 호출한다.
new 연산자와 함께 서브클래스를 호출하면서 전달한 인수 중에서 수퍼클래스의 constructor에 전달할 필요가 있는 인수는 서브클래스의 constructor에서 호출하는 super를 통해 전달한다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 수퍼클래스</span>
  <span class="kd">class</span> <span class="nx">Base</span> <span class="p">{</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// 4</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">a</span> <span class="o">=</span> <span class="nx">a</span><span class="p">;</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">b</span> <span class="o">=</span> <span class="nx">b</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="c1">// 서브클래스 </span>
  <span class="kd">class</span> <span class="nx">Derived</span> <span class="kd">extends</span> <span class="nx">Base</span> <span class="p">{</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">c</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// 2</span>
      <span class="k">super</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span> <span class="c1">// 3</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">c</span> <span class="o">=</span> <span class="nx">c</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="kd">const</span> <span class="nx">derived</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Derived</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span> <span class="c1">// 1</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">derived</span><span class="p">);</span> <span class="c1">// Derived {a: 1, b: 2, c: 3}</span>
</code></pre></div></div>
<p>1 -&gt; Derived 클래스를 호출하면서 전달한 인수 1, 2, 3은 Derived 클래스의 constructor에 전달.<br />
2 -&gt; 전달받은 인수 1, 2, 3
3 -&gt; super 호출을 통해 1, 2 전달
4 -&gt; 1, 2 전달받음</p>

<h4 id="super를-호출할-때-주의사항">super를 호출할 때 주의사항</h4>

<ol>
  <li>
    <p>서브 클래스에서 constructor를 생략하지 않는 경우 서브클래스의 constructor에서는 반드시 super를 호출해야 한다.</p>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="kd">class</span> <span class="nx">Base</span> <span class="p">{}</span>

   <span class="kd">class</span> <span class="nx">Derived</span> <span class="kd">extends</span> <span class="nx">Base</span> <span class="p">{</span>
     <span class="kd">constructor</span><span class="p">()</span> <span class="p">{</span>
       <span class="c1">// Uncaught ReferenceError: Must call super constructor in derived class before accessing 'this' or returning from derived constructor</span>
       <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">constructor call</span><span class="dl">'</span><span class="p">);</span>
     <span class="p">}</span>
   <span class="p">}</span>

   <span class="kd">const</span> <span class="nx">derived</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Derived</span><span class="p">();</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>서브 클래스의 constructor에서 super를 호출하기 전에는 this를 참조할 수 없다.</p>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="kd">class</span> <span class="nx">Base</span> <span class="p">{}</span>

   <span class="kd">class</span> <span class="nx">Derived</span> <span class="kd">extends</span> <span class="nx">Base</span> <span class="p">{</span>
     <span class="kd">constructor</span><span class="p">()</span> <span class="p">{</span>
       <span class="c1">// Uncaught ReferenceError: Must call super constructor in derived class before accessing 'this' or returning from derived constructor</span>
       <span class="k">this</span><span class="p">.</span><span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
       <span class="k">super</span><span class="p">();</span>
     <span class="p">}</span>
   <span class="p">}</span>

   <span class="kd">const</span> <span class="nx">derived</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Derived</span><span class="p">();</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>super는 반드시 서브클래스의 constructor에서만 호출한다. 서브클래스가 아닌 클래스의 constructor나 함수에서 super를 호출하면 에러가 발생한다.</p>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="kd">class</span> <span class="nx">Base</span> <span class="p">{</span>
     <span class="kd">constructor</span><span class="p">()</span> <span class="p">{</span>
       <span class="k">super</span><span class="p">();</span> <span class="c1">// SyntaxError: 'super' keyword unexpected here</span>
     <span class="p">}</span>
   <span class="p">}</span>

   <span class="kd">function</span> <span class="nx">Foo</span><span class="p">()</span> <span class="p">{</span>
     <span class="k">super</span><span class="p">();</span> <span class="c1">// SyntaxError: 'super' keyword unexpected here</span>
   <span class="p">}</span>
</code></pre></div>    </div>
  </li>
</ol>

<h4 id="super-참조">super 참조</h4>
<p>매서드 내에서 super를 참조하면 수퍼클래스의 메서드를 호출할 수 있다.</p>

<ol>
  <li>서브클래스의 프로토타입 메서드 내에서 super.sayHi는 수퍼클래스의 프로토타입 메서드 sayHi를 가리킨다.
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="c1">// 수퍼클래스</span>
   <span class="kd">class</span> <span class="nx">Base</span> <span class="p">{</span>
     <span class="kd">constructor</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
       <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
     <span class="p">}</span>

     <span class="nx">sayHi</span><span class="p">()</span> <span class="p">{</span>
       <span class="k">return</span> <span class="s2">`Hi </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span>
     <span class="p">}</span>
   <span class="p">}</span>

   <span class="c1">// 서브클래스</span>
   <span class="kd">class</span> <span class="nx">Derived</span> <span class="kd">extends</span> <span class="nx">Base</span> <span class="p">{</span>
     <span class="nx">sayHi</span><span class="p">()</span> <span class="p">{</span>
       <span class="c1">// super.sayHi는 수퍼클래스의 프로토타입 메서드를 가리킨다.</span>
       <span class="k">return</span> <span class="s2">`</span><span class="p">${</span><span class="k">super</span><span class="p">.</span><span class="nx">sayHi</span><span class="p">()}</span><span class="s2">. how are you doing?`</span><span class="p">;</span>

       <span class="c1">// // 수퍼클래스의 prototype 프로퍼티에 바인딩된 프로토타입 참조하기</span>
       <span class="c1">// const __super = Object.getPrototypeOf(Derived.prototype);</span>
       <span class="c1">// return `${__super.sayHi.call(this)} how are you doing?`;</span>
       <span class="c1">// // Base.prototype.sayHi를 호출할 때 call 매서드를 사용해 this를 전달해야 한다.</span>
     <span class="p">}</span>
   <span class="p">}</span>

   <span class="kd">const</span> <span class="nx">derived</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Derived</span><span class="p">(</span><span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span><span class="p">);</span>
   <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">derived</span><span class="p">.</span><span class="nx">sayHi</span><span class="p">());</span>  <span class="c1">// Hi Choi. how are you doing?</span>
</code></pre></div>    </div>
    <p>super는 자신을 참조하고 있는 메서드가 바인딩되어 있는 객체의 프로토타입을 가리킨다.<br />
 super 참조가 동작하기 위해서는 super를 참조하고 있는 메서드가 바인딩되어 있는 객체의 프로토타입을 찾을 수 있어야 한다. 이를 위해 메서드는 내부 슬롯 [[HomeObject]]를 가지며, 자신을 바인딩하고 있는 객체를 가리킨다.</p>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="cm">/*
   [[HomeObject]]는 메서드 자긴을 바인딩하고 있는 객체를 가리킨다.
   [[HomeObject]]를 통해 메서드 자신을 바인딩하고 있는 객체의 프로토타입을 찾을 수 있다.
   예를들어, Derived 클래스의 sayHi 메서드는 Derived.prototype에 바인딩되어 있다.
   따라서 Derived 클래스의 sayHi 메서드의 [[HomeObject]]는 Derived.prototyped이고
   이를 통해 Derived 클래스의 sayHi 메서드 내부의 super 참조가 Base.prototype으로 결정된다.
   따라서 super.sayHi는 Base.prototype.sayHi를 가리키게 된다.
   */</span>
   <span class="k">super</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">getPrototypeOf</span><span class="p">[[</span><span class="nx">HomeObject</span><span class="p">]]</span>
</code></pre></div>    </div>
    <p>주의할 것은 ES6의 메서드 축약 표현으로 정의된 함수만이 [[HomeObject]]를 갖는다는 것이다. super 참조는 수퍼클래스의 메서드를 참조하기 위해 사용하므로 서브클래스의 메서드에서 사용해야 한다.</p>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="kd">const</span> <span class="nx">base</span> <span class="o">=</span> <span class="p">{</span>
     <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">choi</span><span class="dl">'</span><span class="p">,</span>
     <span class="nx">sayHi</span><span class="p">()</span> <span class="p">{</span>
       <span class="k">return</span> <span class="s2">`Hi </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span>
     <span class="p">}</span>
   <span class="p">};</span>

   <span class="kd">const</span> <span class="nx">derived</span> <span class="o">=</span> <span class="p">{</span>
     <span class="na">__proto__</span><span class="p">:</span> <span class="nx">base</span><span class="p">,</span>
     <span class="c1">// ES6 메서드 축약 표현으로 정의한 메서드다. 따라서 [[HomeObject]]를 갖는다.</span>
     <span class="nx">sayHi</span><span class="p">()</span> <span class="p">{</span>
       <span class="k">return</span> <span class="s2">`</span><span class="p">${</span><span class="k">super</span><span class="p">.</span><span class="nx">sayHi</span><span class="p">()}</span><span class="s2">. how are you doing?`</span><span class="p">;</span>
     <span class="p">}</span>
   <span class="p">};</span>

   <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">derived</span><span class="p">.</span><span class="nx">sayHi</span><span class="p">());</span> <span class="c1">// Hi choi. how are you doing?</span>
</code></pre></div>    </div>
  </li>
  <li>서브 클래스의 정적 메서드 내에서 super.sayHi는 수퍼클래스의 정적 메서드 sayHi를 가리킨다.
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="c1">// 수퍼클래스</span>
   <span class="kd">class</span> <span class="nx">Base</span> <span class="p">{</span>
     <span class="kd">static</span> <span class="nx">sayHi</span><span class="p">()</span> <span class="p">{</span>
       <span class="k">return</span> <span class="s2">`Hi`</span><span class="p">;</span>
     <span class="p">}</span>
   <span class="p">}</span>

   <span class="c1">// 서브클래스</span>
   <span class="kd">class</span> <span class="nx">Derived</span> <span class="kd">extends</span> <span class="nx">Base</span> <span class="p">{</span>
     <span class="kd">static</span> <span class="nx">sayHi</span><span class="p">()</span> <span class="p">{</span>
       <span class="c1">// super.sayHi는 수퍼클래스의 정적 메서드를 가리킨다.</span>
       <span class="k">return</span> <span class="s2">`</span><span class="p">${</span><span class="k">super</span><span class="p">.</span><span class="nx">sayHi</span><span class="p">()}</span><span class="s2">. how are you doing?`</span><span class="p">;</span>
     <span class="p">}</span>
   <span class="p">}</span>
   <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">derived</span><span class="p">.</span><span class="nx">sayHi</span><span class="p">());</span>  <span class="c1">// Hi. how are you doing?   </span>
</code></pre></div>    </div>
    <h3 id="2586-상속-클래스의-인스턴스-생성-과정">25.8.6 상속 클래스의 인스턴스 생성 과정</h3>
    <p>```javascript
  // 수퍼클래스
  class Rectangle {
 constructor(width, height) {
   this.width = width;
   this.height = height;
 }</p>

    <p>getArea() {
   return this.width * this.height;
 }</p>

    <p>toString() {
   return <code class="language-plaintext highlighter-rouge">width = ${this.width}, height = ${this.height}</code>;
 }
  }</p>
  </li>
</ol>

<p>// 서브 클래스
  class ColorRectangle extends Rectangle {
    constructor(width, height, color) {
      super(width, height);
      this.color = color;
    }</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// 메서드 오버라이딩
toString() {
  return super.toString() + `, color = ${this.color}`;
}   }
</code></pre></div></div>

<p>const colorRectangle = new ColorRectangle(2, 4, ‘red’);
  console.log(colorRectangle); // ColorRectangle {width: 2, height: 4, color: ‘red’}
  // 상속을 통해 getArea 메서드를 호출
  console.log(colorRectangle.getArea()); // 8
  // 오버라이딩된 toString 메서드를 호출
  console.log(colorRectangle.toString()); // width = 2, height = 4, color = red</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ColorRectangle 클래스에 의해 생성된 인스턴스의 프로토타입 체인은 다음과 같다.

&lt;img width="376" alt="그림 25-11" src="https://user-images.githubusercontent.com/44577555/170242432-9d49bc6a-b95e-4387-944c-f7fd99f81827.png"&gt;

서브클래스 ColorRectangle이 new 연산자와 함께 호출되면 다음 과정을 통해 인스턴스를 생성한다. 
1. 서브클래스의 super 호출  
  자바스크립트 엔진은 클래스를 평가할 때 수퍼 클래스와 서브클래스를 구분하기 위해 "base" 또는 "derived"를 값으로 갖는 내부 슬롯[[ConstructorKind]]를 갖는다.  
  다른 클래스를 상속받지 않는 클래스는 내부 슬롯 [[ConstructorKind]]의 값이 "base"로 설정되지만 다른 클래스를 상속받는 서브 클래스는 내부 슬롯 [[ConstructorKind]]의 값이 "derived"로 설정된다. 이를 통해 수퍼클래스와 서브클래스는 new 연산자와 함께 호출되었을 때의 동작이 구분된다.  
  다른 클래스를 상속받지 않는 클래스는 new 연산자와 호출되었을 때 암묵적으로 빈 객체, 즉 인스턴스를 생성하고 이를 this에 바인딩한다.  
  하지만 서브클래스는 자신이 직접 인스턴스를 생성하지 않고 수퍼클래스에서 인스턴스 생성을 위임한다. 이것이 바로 서브 클래스의 constructor에서 반드시 super를 호출해야 하는 이유다.  
  서브클래스가 new 연산자와 함께 호출되면 서브클래스 constructor 내부의 super 키워드가 함수처럼 호출된다. super가 호출되면 수퍼클래스의 constructor가 호출된다. 좀 더 정확히 말하자면 수퍼클래스가 평가되어 생성된 함수 객체의 코드가 실행되기 시작한다.  
  만약 서브클래스의 constructor 내부에 super 호출이 없으면 에러가 발생한다.

2. 수퍼클래스의 인스턴스 생성과 this 바인딩
수퍼클래스의 constructor 내부의 코드가 실행되기 이전에 암묵적으로 빈 객체를 생성한다. 이 빈 객체가 바로 클래스가 생성한 인스턴스다. 그리고 암묵적으로 생성된 빈 객체, 즉 인스턴스는 this에 바인딩된다. 따라서 수퍼클래스의 constructor 내부의 this는 생성된 인스턴스를 가리킨다.
new 연산자와 함께 호출된 함수를 가리키는 new.target은 서브클래스를 가리킨다. 따라서 인스턴스는 new.target이 가리키는 서브클래스가 생성한 것으로 처리된다.

    ```javascript
      // 수퍼클래스
      class Rectangle {
        constructor(width, height) {
          // 암묵적으로 빈 객체, 즉 인스턴스가 생성되고 this에 바인딩된다.
          console.log(this); // ColorRectangle {}
          // new 연산자와 함께 호출된 함수, 즉 new.target은 ColorRectangle이다.
          console.log(new.target); // ColorRectangle

          // 생성된 인스턴스의 프로토타입으로 ColorRectangle.prototype이 설정된다.
          console.log(Object.getPrototypeOf(this) === ColorRectangle.prototype); // true
          console.log(this instanceof ColorRectangle); // true
          console.log(this instanceof Rectangle); // true
      ...
    ``` 

3. 수퍼클래스의 인스턴스 초기화
this에 바인딩되어 있는 인스턴스에 프로퍼티를 추가하고 constructor가 인수로 전달받은 초기값으로 인스턴스의 프로퍼티를 초기화 한다.  

    ```javascript
      // 수퍼클래스
      class Rectangle {
        constructor(width, height) {
          // 암묵적으로 빈 객체, 즉 인스턴스가 생성되고 this에 바인딩된다.
          console.log(this); // ColorRectangle {}
          // new 연산자와 함께 호출된 함수, 즉 new.target은 ColorRectangle이다.
          console.log(new.target); // ColorRectangle

          // 생성된 인스턴스의 프로토타입으로 ColorRectangle.prototype이 설정된다.
          console.log(Object.getPrototypeOf(this) === ColorRectangle.prototype); // true
          console.log(this instanceof ColorRectangle); // true
          console.log(this instanceof Rectangle); // true

          // 인스턴스 초기화
          this.width = width;
          this.height = height;

          console.log(this); // ColorRectangle {width: 2, height: 4}
        }
      ...
    ```
 
4. 서브클래스 constructor로의 복귀와 this 바인딩
super의 호출이 종료되고 제어 흐름이 서브클래스 constructor로 돌아온다. 이때 super가 반환한 인스턴스가 this에 바인딩된다. 서브클래스는 별도의 인스턴스를 생성하지 않고 super가 반환한 인스턴스를 this에 바인딩하여 그대로 사용한다.  

    ```javascript
      // 서브 클래스
      class ColorRectangle extends Rectangle {
        constructor(width, height, color) {
          super(width, height);

          // super가 반환한 인스턴스가 this에 바인딩된다.
          console.log(this); // ColorRectangle {width: 2, height: 4}
        }
      ...
    ``` 
    이처럼 super가 호출되지 않으면 인스턴스가 생성되지 않으며, this 바인딩도 할 수 없다. 서브클래스의 constructor에서 super를 호출하기 전에는 this를 참조할 수 없는 이유가 바로 이 때문이다. 따라서 서브클래스 constructor 내부의 인스턴스 초기화는 반드시 super 호출 이후에 처리되어야 한다.

5. 서브클래스의 인스턴스 초기화
  super 호출 이후, 서브클래스의 constructor에 기술되어 있는 인스턴스 초기화가 실행된다. 즉, this에 바인딩되어 있는 인스턴스에 프로퍼티를 추가하고 constructor가 인수로 전달받은 초기값으로 인스턴스의 프로퍼티를 초기화한다.

6. 인스턴스 반환
  클래스의 모든 처리가 끝나면 완성된 인스턴스가 바인딩된 this가 암묵적으로 반환된다.

    ```javascript
      // 서브 클래스
      class ColorRectangle extends Rectangle {
        constructor(width, height, color) {
          super(width, height);

          // super가 반환한 인스턴스가 this에 바인딩된다.
          console.log(this); // ColorRectangle {width: 2, height: 4}

          // 인스턴스 초기화
          this.color = color;
        }
        // 완성된 인스턴스가 바인딩된 this가 암묵적으로 반환된다.
        console.log(this); // ColorRectangle {width: 2, height: 4, color: "red"}
      }
    ```

### 25.8.7 표준 빌트인 생성자 함수 확장
extends 키워드 다음에는 클래스뿐만이 아니라 [[Construct]] 내부 메서드를 갖는 함수 객체로 평가될 수 있는 모든 표현식을 사용하 수 있다.  
String, Number, Array 같은 표준 빌트인 객체도 [[Construct]] 내부 메서드를 갖는 생성자 함수이므로 extends 키워드를 사용하여 확장할 수 있다.
```javascript
  // Array 생성자 함수를 상속받아 확장한 MyArray
  class MyArray extends Array {
    // 중복된 배열 요소를 제거하고 반환한다: [1, 1, 2, 3] =&gt; [1, 2, 3]
    uniq() {
      return this.filter((v, i, self) =&gt; self.indexOf(v) === i);
    }

    // 모든 배열 요소의 평균을 구한다: [1, 2, 3] =&gt; 2
    average() {
      return this.reduce((pre, cur) =&gt; pre + cur, 0) / this.length;
    }
  }

  const myArray = new MyArray(1, 1, 2, 3);
  console.log(myArray); // myArray(4) [1, 1, 2, 3]

  // MyArray.prototype.uniq 호출
  console.log(myArray.uniq()); // MyArray(3) [1, 2, 3]
  // MyArray.prototype.average 호출
  console.log(myArray.average()); // 1.75
</code></pre></div></div>
<p>Array 생성자 함수를 상속받아 확장한 MyArray 클래스가 생성한 인스턴스는 Array.prototype과 MyArray.prototype의 모든 메서드를 사용할 수 있다.
이때 주의할 것은 Array.prototype의 메서드 중에서 map, filter와 같이 새로운 배열을 반환하는 메서드가 MyArray 클래스의 인스턴스를 반환한다는 것이다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myArray</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">v</span> <span class="o">=&gt;</span> <span class="nx">v</span> <span class="o">%</span> <span class="mi">2</span><span class="p">)</span> <span class="k">instanceof</span> <span class="nx">myArray</span><span class="p">);</span> <span class="c1">// true</span>
</code></pre></div></div>]]></content><author><name>Hyejic</name></author><category term="js" /><category term="javascript" /><summary type="html"><![CDATA[모던 자바스크립트 Deep Dive 25장 클래스 내용 정리]]></summary></entry><entry><title type="html">24장 클로저</title><link href="http://localhost:4000/js/modernJS24/" rel="alternate" type="text/html" title="24장 클로저" /><published>2022-05-18T00:00:00+09:00</published><updated>2022-05-18T00:00:00+09:00</updated><id>http://localhost:4000/js/modernJS24</id><content type="html" xml:base="http://localhost:4000/js/modernJS24/"><![CDATA[<p><br /></p>

<h1 id="24장-클로저">24장 클로저</h1>
<p>클로저는 자바스크립트 고유의 개념이 아니다. 함수를 일급 객체로 취급하는 함수형 프로그래밍 언어등에서 사용되는 중요한 특성이다.
MDN에서는 클로저 대해 다음과 같이 정의하고 있다.</p>

<blockquote>
  <p>클로저는 함수와 그 함수가 선언된 렉시컬 환경과의 조합이다.</p>
</blockquote>

<p>정의에서 먼저 이해해야 할 핵심 키워드는 “함수가 선언된 렉시컬 환경”이다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

  <span class="kd">function</span> <span class="nx">outerFunc</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>

    <span class="kd">function</span> <span class="nx">innerFunc</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span> <span class="c1">// 10</span>
    <span class="p">}</span>
    <span class="nx">innerFunc</span><span class="p">();</span>
  <span class="p">}</span>
  <span class="nx">outerFunc</span><span class="p">();</span>
</code></pre></div></div>
<p>중첩 함수 innerFunc의 상위 스코프는 외부함수 outerFunc의 스코프다. 따라서 중첩 함수 innerFunc 내부에서 자신을 포함하고 있는 외부 함수 outerFunc의 x변수에 접근할 수 있다.<br />
만약 innerFunc 함수가 outerFunc 함수의 내부에서 정의된 중첩 함수가 아니라면 innerFunc 함수를 outerFunc 함수의 내부에서 호출한다 하더라도 outerFunc 함수 변수에 접근할 수 없다. 이 같은 현상이 발행하는 이유는 자바스크립트가 렉시컬 스코프를 따르는 프로그래밍 언어이기 때문이다.</p>

<h2 id="241-렉시컬-스코프">24.1 렉시컬 스코프</h2>
<p>자바스크립트 엔진은 함수를 어디서 호출했는지가 아니라 함수를 어디에 정의했는지에 따라 상위 스코프를 결정한다. 이를 렉시컬 스코프(정적 스코프)라 한다.<br />
렉시컬 환경의 <code class="language-plaintext highlighter-rouge">함수의 상위 스코프를 결정한다</code>는 것은 <code class="language-plaintext highlighter-rouge">렉시컬 환경의 외부 렉시컬 환경에 대한 참조에 저장할 참조값을 결정한다</code>는 것과 같다.<br />
다시 말해 렉시컬 환경의 “외부 렉시컬 환경에 대한 참조”에 저장할 참조값, 즉 상위 스코프에 대한 참조는 함수 정의가 평가되는 시점에 함수가 정의된 환경(위치)에 의해 결정된다. 이것이 바로 렉시컬 스코프다.</p>

<h2 id="242-함수-객체의-내부-슬롯environment">24.2 함수 객체의 내부 슬롯[[Environment]]</h2>
<p>렉시컬 스코프가 가능하려면 함수는 자신이 호출되는 환경과는 상관없이 자신이 정의된 환경, 즉 상위 스코프를 기억해야 한다. 이를 위해 함수는 함수 정의가 평가되어 함수 객체를 생성항 때 자신의 내부 슬롯[[Environmnet]]에 자신이 정의된 환경, 즉 상위 스코프의 참조를 저장한다.<br />
(그림 24-1)<br />
함수 객체의 내부 슬롯 [[Environment]]에 저장된 현재 실행중인 실행 컨텍스트의 렉시컬 환경의 참조가 바로 상위 스코프다. 또한 자신이 호출되었을 때 생성될 함수 렉시컬 환경의 “외부 렉시컬 환경에 대한 참조”에 저장될 참조 값이다. 함수 객체는 내부 슬롯 [[Environment]]에 저장한 렉시컬 환경의 참조, 즉 상위 스코프를 자신이 존재하는 한 기억한다.<br />
함수 코드를 평가할 때 함수 렉시컬 환경의 구성 요소인 외부 렉시컬 환경에 대한 참조에는 함수 객체의 내부 슬롯[[Environment]]에 저장된 렉시컬 환경의 참조가 할당된다.(그림에서 2, 3) 즉, 함수 객체의 내부 슬롯[[Environment]]에 저장된 렉시컬 환경의 참조는 바로 함수의 상위 스코프를 의미한다.</p>

<h2 id="243-클로저와-렉시컬-환경">24.3 클로저와 렉시컬 환경</h2>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

  <span class="c1">// ①</span>
  <span class="kd">function</span> <span class="nx">outer</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">inner</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span> <span class="p">};</span> <span class="c1">// ②</span>
    <span class="k">return</span> <span class="nx">inner</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="c1">// outer 함수를 호출하면 중첩 함수 inner를 반환한다.</span>
  <span class="c1">// 그리고 outer 함수의 실행 컨텍스트는 실행 컨텍스트 스택에서 팝되어 제거된다.</span>
  <span class="kd">const</span> <span class="nx">innerFunc</span> <span class="o">=</span> <span class="nx">outer</span><span class="p">();</span>
  <span class="nx">innerFunc</span><span class="p">();</span> <span class="c1">// 10</span>
</code></pre></div></div>]]></content><author><name>Hyejic</name></author><category term="js" /><category term="javascript" /><summary type="html"><![CDATA[모던 자바스크립트 Deep Dive 24장 클로저 내용 정리]]></summary></entry><entry><title type="html">22장 this</title><link href="http://localhost:4000/js/modernJS22/" rel="alternate" type="text/html" title="22장 this" /><published>2022-05-17T00:00:00+09:00</published><updated>2022-05-17T00:00:00+09:00</updated><id>http://localhost:4000/js/modernJS22</id><content type="html" xml:base="http://localhost:4000/js/modernJS22/"><![CDATA[<p><br /></p>

<h1 id="22장-this">22장 this</h1>

<h2 id="221-this-키워드">22.1 this 키워드</h2>
<p>동작을 나타내는 메서드는 자신이 속한 객체의 상태, 즉 프로퍼티를 참조하고 변경할 수 있어야 한다. 이떄 메서드가 자신이 속한 객체의 프로퍼티를 참조하려면 먼저 자신이 속한 객체를 가리키는 식별자를 참조할 수 있어야 한다.<br />
자신이 속한 객체 또는 자신이 생성할 인스턴스를 카리키는 특수한 식별자가 필요하다. 이를 위해 자바스크립트는 this라는 특수한 식별자를 제공한다.
<code class="language-plaintext highlighter-rouge">this는 자신이 속한 객체 또는 자신이 생성한 인스턴스를 가리키는 자기 참조 변수다. this를 통해 자신이 속한 객체 또는 자신이 생성할 인스턴스의 프로퍼티나 메서드를 참조할 수 있다.</code><br />
this 바인딩은 함수 호출 방식에 의해 동적으로 결정된다.</p>
<blockquote>
  <p><code class="language-plaintext highlighter-rouge">this 바인딩</code> 바인딩이한 식별자와 값을 연결하는 과정을 의미한다. 예를 들어, 변수 선언은 변수 이름과 확보된 메모리 공간의 주소를 바인딩하는 것이다. this 바인딩은 this와 this가 가리킬 객체를 바인딩하는 것이다.</p>
</blockquote>

<h3 id="객체-리터럴-this">객체 리터럴 this</h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">circle</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">radius</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span>
    <span class="nx">getDiameter</span><span class="p">()</span> <span class="p">{</span>
      <span class="c1">// this는 메서드를 호출한 객체를 가리킨다.</span>
      <span class="k">return</span> <span class="mi">2</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">};</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">circle</span><span class="p">.</span><span class="nx">getDiameter</span><span class="p">());</span> <span class="c1">// 10</span>
</code></pre></div></div>
<p>위 예제처럼 객체 리터럴 내부에서의 this는 메서드를 호출한 객체, 즉 circle을 가리킨다.</p>

<h3 id="생성자함수-this">생성자함수 this</h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">Circle</span><span class="p">(</span><span class="nx">radius</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// this는 생성자 함수가 생성할 인스턴스를 가리킨다.</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">radius</span> <span class="o">=</span> <span class="nx">radius</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="nx">Circle</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getDiameter</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="mi">2</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="p">;</span>
  <span class="p">};</span>

  <span class="c1">// 인스턴스 생성</span>
  <span class="kd">const</span> <span class="nx">circle</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Circle</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">circle</span><span class="p">.</span><span class="nx">getDiameter</span><span class="p">());</span> <span class="c1">// 10</span>
</code></pre></div></div>
<p>위 예제처럼 생성자 함수 내부에서의 this는 함수가 생성할 인스턴스를 가리킨다.</p>

<h3 id="자바스크립트에서의-this">자바스크립트에서의 this</h3>
<p>함수가 호출되는 방식에 따라 this에 바인딩될 값, 즉 this 바인딩이 동적으로 결정된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// this는 어디서든지 참조 가능하다.</span>
  <span class="c1">// 전역에서 this는 전역 객체 window를 가리킨다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">);</span> <span class="c1">// window</span>

  <span class="kd">function</span> <span class="nx">square</span><span class="p">(</span><span class="nx">number</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 일반 함수 내부에서 this는 전역 객체 window를 가리킨다.</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">);</span> <span class="c1">// window</span>
    <span class="k">return</span> <span class="nx">number</span> <span class="o">*</span> <span class="nx">number</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="nx">square</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>

  <span class="kd">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Lee</span><span class="dl">'</span><span class="p">,</span>
    <span class="nx">getName</span><span class="p">()</span> <span class="p">{</span>
      <span class="c1">// 메서드 내부에서 this는 메서드를 호출한 객체를 가리킨다.</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">);</span> <span class="c1">// {name: 'Lee', getName: f}</span>
      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">getName</span><span class="p">());</span> <span class="c1">// Lee</span>
  
  <span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
    <span class="c1">// 생성자 함수 내부에서 this는 생성자 함수가 생성할 인스턴스를 가리킨다.</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">);</span> <span class="c1">// Person {name: "Lee"}</span>
  <span class="p">}</span>

  <span class="kd">const</span> <span class="nx">me</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="dl">'</span><span class="s1">Lee</span><span class="dl">'</span><span class="p">);</span>
</code></pre></div></div>

<h2 id="222-함수-호출-방식과-this-바인딩">22.2 함수 호출 방식과 this 바인딩</h2>
<p>this 바인딩은 함수 호출 방식, 즉 함수가 어떻게 호출되었는지에 따라 동적으로 결정된다.</p>

<h3 id="2221-일반-함수-호출">22.2.1 일반 함수 호출</h3>
<p>기본적으로 this에는 전역 객체가 바인딩된다.<br />
일반 함수로 호출하면 함수 내부의 this에는 전역 객체가 바인딩된다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`foo is this: </span><span class="p">${</span><span class="k">this</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span> <span class="c1">// window</span>
    <span class="kd">function</span> <span class="nx">bar</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`bar is this: </span><span class="p">${</span><span class="k">this</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span> <span class="c1">// window</span>
    <span class="p">}</span>
    <span class="nx">bar</span><span class="p">();</span>
  <span class="p">}</span>
  <span class="nx">foo</span><span class="p">();</span>
</code></pre></div></div>
<p>어떠한 함수라도 모든 함수(중첩 함수, 콜백 함수)는 일반 함수로 호출되면 내부의 this에는 전역 객체가 바인딩된다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">value</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

  <span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">value</span><span class="p">:</span> <span class="mi">100</span><span class="p">,</span>
    <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`foo is this: </span><span class="p">${</span><span class="k">this</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span> <span class="c1">// {value: 100. foo: f}</span>
      <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`callback is this: </span><span class="p">${</span><span class="k">this</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span> <span class="c1">// window</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`callback is this.value: </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span> <span class="c1">// 1</span>
      <span class="p">},</span> <span class="mi">100</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">};</span>

  <span class="nx">obj</span><span class="p">.</span><span class="nx">foo</span><span class="p">();</span>
</code></pre></div></div>

<h4 id="매서드-내부의-중첩-함수나-콜백-함수의-this-바인딩을-메서드의-this-바인딩과-일치하는-방법">매서드 내부의 중첩 함수나 콜백 함수의 this 바인딩을 메서드의 this 바인딩과 일치하는 방법</h4>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">value</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

  <span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">value</span><span class="p">:</span> <span class="mi">100</span><span class="p">,</span>
    <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
      <span class="c1">// this 바인딩(obj)을 변수 that에 할당한다.</span>
      <span class="kd">const</span> <span class="nx">that</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
      <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">that</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span> <span class="c1">// 100</span>
      <span class="p">},</span> <span class="mi">100</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">};</span>

  <span class="nx">obj</span><span class="p">.</span><span class="nx">foo</span><span class="p">();</span>
</code></pre></div></div>
<p>위 예제와 같은 방법 이외에도 this를 명시적으로 바인딩할 수 있는 Function.prototype.apply, Function.prototype.call, Function.prototype.bind 메서드를 제공한다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">value</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

  <span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">value</span><span class="p">:</span> <span class="mi">100</span><span class="p">,</span>
    <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
      <span class="c1">// 콜백 함수에 명시적으로 this를 바인딩</span>
      <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span> <span class="c1">// 100</span>
      <span class="p">}.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">),</span> <span class="mi">100</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">};</span>

  <span class="nx">obj</span><span class="p">.</span><span class="nx">foo</span><span class="p">();</span>
</code></pre></div></div>
<p>또는 화살표 함수를 사용해서 this 바인딩을 할 수 있다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">value</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

  <span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">value</span><span class="p">:</span> <span class="mi">100</span><span class="p">,</span>
    <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
      <span class="c1">// 화삻표 함수 내부의 this는 상위 스코프의 this를 가리킨다.</span>
      <span class="nx">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span> <span class="c1">// 100</span>
      <span class="p">},</span> <span class="mi">100</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">};</span>

  <span class="nx">obj</span><span class="p">.</span><span class="nx">foo</span><span class="p">();</span>
</code></pre></div></div>

<h3 id="2222-메서드-호출">22.2.2 메서드 호출</h3>
<p>매서드 내부의 this에는 메서드를 호출한 객체, 즉 메서드를 호출할 때 메서드 이름 앞의 마침표(.) 연산자 앞에 기술한 객체가 바인딩 된다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Lee</span><span class="dl">'</span><span class="p">,</span>
    <span class="nx">getName</span><span class="p">()</span> <span class="p">{</span>
      <span class="c1">// 메서드 내부의 this는 메서드를 호출한 객체에 바인딩된다.</span>
      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">};</span>

  <span class="c1">// 메서드 getName을 호출한 객체는 person이다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">getName</span><span class="p">());</span> <span class="c1">// Lee</span>
</code></pre></div></div>
<p>위 예제의 person객체의 getName 프로퍼티가 가리키는 함수 객체는 person 객체에 포함된 것이 아니라 <code class="language-plaintext highlighter-rouge">독립적으로 존재하는 별도의 객체</code>다. getName 프로퍼티가 함수 객체를 가리키고 있을 뿐이다.<br />
(그림 22-1)<br />
프로토타입 메서드 내부에서 사용된 this도 일반 메서드와 마찬가지로 해당 메서드를 호출한 객체에 바인딩된다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getName</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
  <span class="p">};</span>

  <span class="kd">const</span> <span class="nx">me</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="dl">'</span><span class="s1">Lee</span><span class="dl">'</span><span class="p">);</span>

  <span class="c1">// getName 메서드를 호출한 객체는 me다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">me</span><span class="p">.</span><span class="nx">getName</span><span class="p">());</span> <span class="c1">// Lee  1</span>

  <span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Kim</span><span class="dl">'</span><span class="p">;</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getName</span><span class="p">());</span> <span class="c1">// Kim   2</span>
</code></pre></div></div>
<p>1의 경우 getName 메서드 내부의 this는 me를 가리키며 this.name은 ‘Lee’다.
2의 경우 Person.prototype도 객체이므로 직접 메서드 호출이 가능하다. getName 메서드 내부의 this는 Person.prototype을 가리키며 this.name은 ‘Kim’이다.<br />
(그림 22-3)</p>

<h3 id="2223-생성자-함수-호출">22.2.3 생성자 함수 호출</h3>
<p>생성자 함수 내부의 this에는 생성자 함수가 생성할 인스턴스가 바인딩된다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">Circle</span><span class="p">(</span><span class="nx">radius</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">radius</span> <span class="o">=</span> <span class="nx">radius</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">getDiameter</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="mi">2</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="p">;</span>
    <span class="p">};</span>
  <span class="p">}</span>

  <span class="kd">const</span> <span class="nx">circle1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Circle</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">circle2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Circle</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
  
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">circle1</span><span class="p">.</span><span class="nx">getDiameter</span><span class="p">());</span> <span class="c1">// 10</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">circle2</span><span class="p">.</span><span class="nx">getDiameter</span><span class="p">());</span> <span class="c1">// 20</span>

  <span class="c1">// new 연산자 없이 호출하면 생성자 함수로 동작하지 않는다. 일반 함수 호출</span>
  <span class="kd">const</span> <span class="nx">circle3</span> <span class="o">=</span> <span class="nx">Circle</span><span class="p">(</span><span class="mi">15</span><span class="p">);</span>

  <span class="c1">// 일반 함수로 호출된 Circle에는 반환문이 없으므로 암묵적으로 undefined가 반환</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">circle3</span><span class="p">);</span> <span class="c1">// undefined</span>

  <span class="c1">// 일반 함수로 호출된 Circle 내부의 this는 전역 객체를 가리킨다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">radius</span><span class="p">);</span> <span class="c1">// 15</span>
</code></pre></div></div>

<h3 id="2224-functionprototypeapplycallbind-메서드에-의한-간접-호출">22.2.4 Function.prototype.apply/call/bind 메서드에 의한 간접 호출</h3>
<p>apply, call, bind 메서드는 Function.prototype의 메서드다. 즉, 이들 메서드는 모든 함수가 상속받아 사용할 수 있다.</p>

<h4 id="functionprototypeapplyfunctionprototypecall">Function.prototype.apply/Function.prototype.call</h4>
<p>this로 사용할 객체과 인수 리스트를 인수로 전달받아 함수를 호출한다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="cm">/**
   * apply 사용법
   * 주어진 this 바인딩과 인수 리스트 배열을 사용하여 함수를 호출한다.
   * @param thisArg - this로 사용할 객체
   * @param argsArray - 함수에게 전달할 인수 리스트의 배열 또는 유사 배열 객체
   * @returns 호출된 함수의 반환값
  */</span>
  <span class="c1">// Function.prototype.apply(thisArg[, argsArray])</span>
  <span class="nb">Function</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">thisArg</span><span class="p">,</span> <span class="p">[</span><span class="nx">argsArray</span><span class="p">])</span>
  
  <span class="cm">/**
   * call 사용법
   * 주어진 this 바인딩과 ,로 구분된 인수 리스트를 사용하여 함수를 호출한다.
   * @param thisArg - this로 사용할 객체
   * @param arg1, arg2, ... - 함수에게 전달할 인수 리스트
   * @returns 호출된 함수의 반환값
  */</span>
  <span class="c1">// Function.prototype.call(thisArg[, arg1[, arg2[, ...]]])</span>
  <span class="nb">Function</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">thisArg</span><span class="p">,</span> <span class="nx">arg1</span><span class="p">,</span> <span class="nx">arg2</span><span class="p">,</span> <span class="p">...)</span>
</code></pre></div></div>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">getThisBinding</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arguments</span><span class="p">);</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="c1">// this로 사용할 객체</span>
  <span class="kd">const</span> <span class="nx">thisArg</span> <span class="o">=</span> <span class="p">{</span> <span class="na">a</span><span class="p">:</span> <span class="mi">1</span> <span class="p">};</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">getThisBinding</span><span class="p">());</span> <span class="c1">// window</span>

  <span class="c1">// getThisBinding 함수를 호출하면서 인수로 전달한 객체를 getThisBinding 함수의 this에 바인딩한다.</span>
  <span class="c1">// apply 메서드는 호출할 함수의 인수를 배열로 묶어 전달한다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">getThisBinding</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">thisArg</span><span class="p">,[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]));</span> 
  <span class="c1">// Arguments(3) [1, 2, 3, callee: ƒ, Symbol(Symbol.iterator): ƒ]</span>
  <span class="c1">//{ a: 1 }</span>

  <span class="c1">// call 메서드는 호출할 함수의 인수를 쉼표로 구분한 리스트 형식으로 전달한다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">getThisBinding</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">thisArg</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">));</span> 
  <span class="c1">// Arguments(3) [1, 2, 3, callee: ƒ, Symbol(Symbol.iterator): ƒ]</span>
  <span class="c1">//{ a: 1 }</span>
</code></pre></div></div>
<p>apply와 call 메서드의 본질적인 기능은 함수를 호출하는 것이다. 인수를 전달하는 방식만 다를 뿐 동일하게 동작한다.</p>

<h4 id="functionprototypebind">Function.prototype.bind</h4>
<p>apply, call 메서드와 달리 함수를 호출하지 않는다. 다만 첫 번째 인수로 전달한 값으로 this 바인딩이 교체된 함수를 새롭게 생성해 반환한다.
bind 메서드는 메서드의 this와 메서드 내부의 중첩 함수 또는 콜백 함수의 this가 불일치하는 문제를 해결하기 위해 유용하게 사용된다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">getThisBinding</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="c1">// this로 사용할 객체</span>
  <span class="kd">const</span> <span class="nx">thisArg</span> <span class="o">=</span> <span class="p">{</span> <span class="na">a</span><span class="p">:</span> <span class="mi">1</span> <span class="p">};</span>

  <span class="c1">// bind 메서드는 첫 번쨰 인수로 전달한 thisArg로 this 바인딩이 교체된</span>
  <span class="c1">// getThisBinding 함수를 새롭게 생성해 반환한다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">getThisBinding</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">thisArg</span><span class="p">));</span> <span class="c1">// getThisBinding</span>
  <span class="c1">// bind 메서드는 함수를 호출하지는 않으므로 명시적으로 호출해야 한다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">getThisBinding</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">thisArg</span><span class="p">()));</span> <span class="c1">//{ a: 1 }</span>

  <span class="c1">// 콜백 함수의 this가 불일치하는 문제를 해결 </span>
  <span class="kd">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span><span class="p">,</span>
    <span class="nx">foo</span><span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// bind 메서드로 callback 함수 내부의 this 바인딩을 전달</span>
      <span class="nx">setTimeout</span><span class="p">(</span><span class="nx">callback</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">),</span> <span class="mi">100</span><span class="p">);</span> 
    <span class="p">}</span>
  <span class="p">}</span>

<span class="nx">person</span><span class="p">.</span><span class="nx">foo</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`my name is </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="s2">.`</span><span class="p">);</span> <span class="c1">// my name is Choi.</span>
<span class="p">});</span>
</code></pre></div></div>

<h2 id="this-바인딩-동적-결정-정리">this 바인딩 동적 결정 정리</h2>
<p>함수 호출 방식 | this 바인딩
–|–
일반 함수 호출 | 전역 객체
메서드 호출 | 메서드를 호출한 객체
생성자 함수 호출 | 생성자 함수가 생성할 인스턴스
Function.prototype.apply/call/bind 메서드에 의한 간접 호출 | Function.prototype.apply/call/bind 메서드의 첫번째 인수로 전달한 객체</p>]]></content><author><name>Hyejic</name></author><category term="js" /><category term="javascript" /><summary type="html"><![CDATA[모던 자바스크립트 Deep Dive 22장 this 내용 정리]]></summary></entry><entry><title type="html">23장 실행 컨텍스트</title><link href="http://localhost:4000/js/modernJS23/" rel="alternate" type="text/html" title="23장 실행 컨텍스트" /><published>2022-05-17T00:00:00+09:00</published><updated>2022-05-17T00:00:00+09:00</updated><id>http://localhost:4000/js/modernJS23</id><content type="html" xml:base="http://localhost:4000/js/modernJS23/"><![CDATA[<p><br /></p>

<h1 id="23장-실행-컨텍스트">23장 실행 컨텍스트</h1>
<p>실행 컨텍스트는 자바스크립트의 동작 원리를 담고 있는 핵심 개념이다.</p>

<h2 id="231-소스코드의-타입">23.1 소스코드의 타입</h2>
<p>ECMAScript 사양은 소스코드를 4가지 타입으로 구분한다. 소스코드 타입에 따라 실행 컨텍스트를 생성하는 과정과 관리 내용이 다르다.</p>
<ul>
  <li>전역 코드<br />
전역 변수를 관리하기 위해 최상위 스코프인 전역 스코프를 생성해야한다. var 키워드로 선언된 전역 변수와 함수 선언문으로 정의된 전역 함수를 전역 객체의 프로퍼티와 메서드로 바인딩하고 참조하기 위해 전역 객체와 연결되어야 한다. 이를 위해 <code class="language-plaintext highlighter-rouge">전역 코드가 평가되면 전역 실행 컨텍스트가 생성</code>된다.</li>
  <li>함수 코드<br />
지역 스코프를 생성하고 지역변수, 매개변수, arguments 객체를 관리해야 한다. 그리고 생성한 지역 스코프를 전역 스코프에서 시작하는 스코프 체인의 일원으로 연결해야 한다. 이를 위해 <code class="language-plaintext highlighter-rouge">함수 코드가 평가되면 함수 실행 컨텍스트</code>가 생성된다.</li>
  <li>eval 코드 <br />
strict mode에서 자신만의 독자적인 스코프를 생성한다. 이를 위해 <code class="language-plaintext highlighter-rouge">eval 코드가 평가되면 eval 실행 컨텍스트가 생성</code>된다.</li>
  <li>모듈 코드<br />
모듈별로 독립적인 모듈 스코프를 생성한다. 이를 위해 <code class="language-plaintext highlighter-rouge">모듈 코드가 평가되면 모듈 실행 컨텍스트가 생성</code>된다.</li>
</ul>

<h2 id="232-소스코드의-평가와-실행">23.2 소스코드의 평가와 실행</h2>
<p>자바스크립트 엔진은 소스코드를 2개의 과정, 즉 <code class="language-plaintext highlighter-rouge">소스코드 평가</code>와 <code class="language-plaintext highlighter-rouge">소스코드의 실행</code> 과정으로 나누어 처리한다.</p>
<ul>
  <li>소스코드 평가<br />
실행 컨텍스트 생성하고 변수나 함수 식별자를 키로 실행 컨텍스트가 관리하는 스코프에 등록</li>
  <li>소스코드의 실행<br />
런타임 시작<br />
변수나 함수의 참조를 실행 컨텍스트가 관리하는 스코프에서 검색하여 취득<br />
변수 값의 변경 등 소스코드의 실행 결과는 다시 실행컨텍스트가 관리하는 스코프에 등록된다</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">x</span><span class="p">;</span>
  <span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</code></pre></div></div>
<p>위 예제 설명</p>
<ol>
  <li>소스코드 평가<br />
  변수 선언문 var x; 실행. 변수 식별자 x는 실행 컨텍스트가 관리하는 스코프에 등록되고 undefined로 초기화된다.</li>
  <li>소스코드 실행<br />
  변수 할당문 x = 1; 실행. x변수가 소스코드 평가 과정에서 선언문이 실행되어진 변수라면 값을 할당하고 할당 결과를 실행 컨텍스트에 등록하여 관리한다.</li>
</ol>

<h2 id="233-실행-컨텍스트의-역할">23.3 실행 컨텍스트의 역할</h2>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 전역 변수 선언</span>
  <span class="kd">const</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="kd">const</span> <span class="nx">y</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>

  <span class="c1">// 함수 정의</span>
  <span class="kd">function</span> <span class="nx">foo</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 지역 변수 선언</span>
    <span class="kd">const</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">y</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>

    <span class="c1">// 메서드 호출</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span> <span class="o">+</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span><span class="p">);</span> <span class="c1">// 130</span>
  <span class="p">}</span>

  <span class="c1">// 함수 호출</span>
  <span class="nx">foo</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>

  <span class="c1">// 메서드 호출</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span><span class="p">);</span> <span class="c1">// 3</span>
</code></pre></div></div>
<p>위 예제 설명</p>
<ol>
  <li>전역 코드 평가<br />
  전역 코드의 변수 선언문과 함수 선언문이 먼저 실행되고, 그 결과 생성된 전역 변수와 전역 함수가 실행 컨첵스트가 관리하는 전역 스코프에 등록된다.<br />
  var 키워드로 선언된 전역 변수와 함수 선언문으로 정의된 전역 함수는 전역 객체의 프로퍼티와 메서드가 된다.</li>
  <li>전역 코드 실행<br />
  런타임이 시작되어 전역 코드가 순차적으로 실행되기 시작한다.<br />
  이때 전역 변수에 값이 할당되고 함수가 호출. 함수가 호출되면 전역 코드의 실행을 중단하고 함수 내부로 진입한다.</li>
  <li>함수 코드 평가<br />
  함수 내부 문들을 실행하기에 앞서 함수 코드 평가 과정을 거치며 함수 코드를 실행하기 위한 준비를 한다.<br />
  이때 매개변수와 지역 변수 선언문이 먼저 실행되고, 그 결과 생성된 매개변수와 지역 변수가 실행 컨텍스트가 관하리는 지역 스코프에 등록된다. 또한 aguments 객체가 생성되어 지역 스코프에 등록되고 this 바인딩도 결정된다.</li>
  <li>함수 코드 실행<br />
  함수 코드 평가 후 함수 코드 런타임 시작. 이때 매개변수와 지역 변수에 값이 할당되고, console.log 메서드가 호출된다.<br />
  console을 스코프 체인을 통해 검색 -&gt; log 프로퍼티를 console 객체의 프로토타입 체인을 통해 검색 -&gt; console.log 메서드에 인수로 전달된 표현식 a + x + y가 평가 -&gt;  console.log 메서드의 실행이 종료되면 함수코드에서 빠져나가 함수 호출 이전으로 되돌아간다.<br />
  이처럼 코드가 실행되려면 다음과 같이 스코프, 식별자, 코드 실행 순서 등의 관리가 필요하다.<br />
  —<br />
  1. 선언에 의해 생성된 모든 식별자를 스코프를 구분하여 등록하고 상태 변화를 지속적으로 관리할 수 있어야 한다.<br />
  2. 스코프는 중첩 관계에 의해 스코프 체인을 형성해야 한다. 즉, 스코프 체인을 통해 상외 스코프로 이동하며 식별자를 검색할 수 있어야 한다.<br />
  3. 현재 실행 중인 코드의 실행 순서를 변결할 수 있어야 하며 다시 되돌아갈 수도 있어야 한다.<br />
  —</li>
</ol>

<p>이 모든 것을 관리하는 것이 바로 실행 컨텍스트다. 실행 컨텍스트는 소스코드를 실행하는 데 필요한 환경을 제공하고 코드의 실행 결과를 실제로 관리하는 영역이다.<br />
실행 컨텍스트는 식별자를 등록하고 관리하는 스코프와 코드 실행 순서 관리를 구현한 내부 매커니즘으로, 모든 코드는 실행 컨텍스트를 통해 실행되고 관리된다.
식별자와 스코프는 <code class="language-plaintext highlighter-rouge">실행 컨텍스트의 렉시컬 환경</code>으로 관리하고 코드 실행 순서는 <code class="language-plaintext highlighter-rouge">실행 컨텍스트 스택</code>으로 관리한다.</p>

<h2 id="234-실행-컨텍스트-스택">23.4 실행 컨텍스트 스택</h2>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

  <span class="kd">function</span> <span class="nx">foo</span> <span class="p">()</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">y</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>

    <span class="kd">function</span> <span class="nx">bar</span> <span class="p">()</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">z</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span> <span class="o">+</span> <span class="nx">z</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="nx">bar</span><span class="p">();</span>
  <span class="p">}</span>
  <span class="nx">foo</span><span class="p">();</span> <span class="c1">// 6</span>
</code></pre></div></div>
<p>위 예제는 전역 코드와 함수 코드로 이루어져있다. 전역 코드를 평가하여 전역 실행 컨텍스트를 생성하고 함수가 호출되면 함수 코드를 평가하여 함수 실행 컨텍스트를 생성한다. 이때 생성된 실행 컨텍스트는 스택 자료구조로 관히된다. 이를 실행 컨텍스트 스택이라고 부른다.<br />
(그림 23-5)</p>
<ol>
  <li>전역 코드의 평가와 실행<br />
  전역 변수 x와 전역 함수 foo는 전역 실행 컨텍스트에 등록된다. 이후 전역 코드가 실행되기 시작하여 전역 변수 x에 값이 할당되고 전역 함수 foo가 호출된다.</li>
  <li>foo 함수 코드의 평가와 실행<br />
  전역 함수 foo가 호출되면 코드의 제어권이 foo 함수 내부로 이동한다. foo 함수 내부의 함수 코드를 평가하여 foo 함수의 실행 컨텍스트를 생성하고 실행 컨텍스트 스택에 푸시한다.<br />
  foo 함수의 지역 변수 y와 중첩 함수 bar가 foo 함수 실행 컨텍스트에 등록된다.<br />
  이후 foo함수 코드 실행. 지역 변수 y에 값이 할당되고 중첩 함수 bar가 호출.</li>
  <li>bar 함수 코드의 평가와 실행<br />
  코드의 제어권이 bar 함수 내부로 이동한다. bar 함수 내부의 코드를 평가하여 bar 함수 실행 컨텍스트를 생성하고 실행 컨텍스트에 푸시한다.<br />
  bar 함수의 지역 변수 z가 bar 함수 실행 컨텍스트에 등록된다.<br />
  이후 bar 함수 코드 실행. 지역 변수 z에 값이 할당되고 console.log 메서드를 호출한 이후 bar 함수 종료.</li>
  <li>foo 함수 코드로 복귀<br />
  bar 함수 종료 후 foo 함수로 코드 제어권이 이동하고, 이때 bar 함수 실행 컨텍스트를 실행 컨텍스트에서 팝하여 제거.<br />
  foo 함수는 더이상 실행 할 코드가 없으므로 종료.</li>
  <li>전역 코드로 복귀<br />
  foo 함수가 종료되면 코드의 제어권은 다시 전역 코드로 이동. 이때 foo 함수 실행 컨텍스트를 실행 컨텍스트에서 팝하여 제거.</li>
</ol>

<p>이처럼 실행 컨텍스트 스택은 코드의 실행 순서를 관리한다. 실행 컨텍스트 스택의 최상위에 존재하는 실행 컨텍스트는 언제나 현재 실행중인 코드의 실행 컨텍스트다. 따라서 최상위에 존재하는 실행 컨텍스트를 실행 중인 실행 컨텍스트라 부른다.</p>

<h2 id="235-렉시컬-환경">23.5 렉시컬 환경</h2>
<p>렉시컬 환경은 실행 컨텍스트를 구성하는 컴포넌트다. 실행 컨텍스트 스택이 코드의 실행순서를 관리 했다면 렉시컬 환경은 스코프와 식별자를 관리한다.<br />
렉시컬 환경은 스코프를 구분하여 식별자를 등록하고 관리하는 저장소 역할을 하는 렉시컬 스코프의 실체다.
렉시컬 환경은 다음과 같이 두개의 컴포넌트로 구성된다.<br />
(그림 23-8)</p>
<ol>
  <li>환경 레코드(Enviroment Record)<br />
  스코프에 포함된 식별자를 등록하고 등록된 식별자에 바인딩된 값을 관리하는 저장고. 환경 레코드는 소스코드의 타입에 따라 솬리하는 내용에 차이가 있다.</li>
  <li>외부 렉시컬 환경에 대한 참조(Outer Lexical Enviroment Reference)<br />
  외부 렉시컬 환경에 대한 참조는 상위 스코프를 가리킨다. 해당 실행 컨텍스트를 생성한 소스코드를 포함하는 상위 코드의 렉시컬 환경을 말한다. 외부 렉시컬 환경에 대한 참조를 통해 단방향 링크드 리스트인 스코프 체인을 구현한다.</li>
</ol>

<h2 id="236-실행-컨텍스트의-생성과-식별자-검색-과정">23.6 실행 컨텍스트의 생성과 식별자 검색 과정</h2>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="kd">const</span> <span class="nx">y</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>

  <span class="kd">function</span> <span class="nx">foo</span> <span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">y</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
    
    <span class="kd">function</span> <span class="nx">bar</span> <span class="p">(</span><span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">z</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span> <span class="o">+</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span> <span class="o">+</span> <span class="nx">z</span><span class="p">);</span> 
    <span class="p">}</span>
    <span class="nx">bar</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="nx">foo</span><span class="p">(</span><span class="mi">20</span><span class="p">);</span> <span class="c1">// 42</span>
</code></pre></div></div>
<p>예제의 실행 컨텍스트의 생성과 식별자 검색 과정을 알아보자</p>

<h3 id="2361-전역-객체-생성">23.6.1 전역 객체 생성</h3>
<p>전역 객체는 전역 코드가 평가되기 이전에 생성된다.<br />
전역 객체에는 빌트인 전역 프로퍼티와 빌트인 전역 함수, 그리고 표준 빌트인 객체가 추가되며 동작 환경에 따라 클라이언트 사이드 Web API또는 특정 환경을 위한 호스트 객체를 포함한다.
전역 객체도 Object.prototype을 상속받는다. 전역 객체도 프로토타입 체인의 일원이다.</p>

<h3 id="2362-전역-코드-평가">23.6.2 전역 코드 평가</h3>

<p>전역 코드 평가 순서</p>
<ol>
  <li>전역 실행 컨텍스트 생성</li>
  <li>전역 렉시컬 환경 생성<br />
2.1 전역 환경 레코드 생성<br />
      2.1.1 객체 환경 레코드 생성<br />
      2.1.2 선언적 환경 레코드 생성<br />
2.2 this 바인딩<br />
2.3 외부 렉시컬 환경에 대한 참조 결정</li>
</ol>

<h4 id="전역-실행-컨텍스트-생성">전역 실행 컨텍스트 생성</h4>
<p>먼저 비어있는 실행 컨텍스트를 생성하여 실행 컨텍스트 스택에 푸시한다. 이떄 전역 실행 컨텍스트는 실행 중인 실행 컨텍스트가 된다.</p>

<h4 id="전역-렉시컬-환경-생성">전역 렉시컬 환경 생성</h4>
<p>전역 렉시컬 환경을 생성하고 전역 실행 컨텍스트에 바인딩한다. 렉시컬 환경은 환경 레코드와 외부 렉시컬 환경에 대한 참조로 구성된다.</p>

<h4 id="전역-환경-레코드-생성">전역 환경 레코드 생성</h4>
<p>전역 환경 레코드는 전역 변수를 관리하는 전역 스코프, 전역 객체의 빌트인 전역 프로퍼티와 빌트인 전역 함수, 표준 빌트인 객체를 제공한다.<br />
기존의 var 키워드로 선언한 전역 변수와 let, const 키워드로 선언한 전역 변수를 구분하여 관리하기 위해 전역 스코프 역할을 하는 전역 환경 레코드는 객체 환경 레코드와 선언적 환경 레코드로 구성되어 있다.</p>
<ul>
  <li>객체 환경 레코드 - var 전역변수, 함수 선언문으로 정의한 전역 함수, 빌트인 전역 프로퍼티, 빌트인 전역 함수, 표준 빌트인 객체 관리</li>
  <li>선언적 환경 레코드 - let, const 전역 변수 관리</li>
</ul>

<h4 id="객체-환경-레코드-생성">객체 환경 레코드 생성</h4>
<p>객체 환경 레코드는 BindingObject라고 부르는 객체와 연결된다. BindingObject는 전역 객체 생성에서 생성된 전역 객체다.<br />
전역 코드 평가 과정에서 var 키워드로 선언한 전역 변수와 함수 선언문으로 정의된 전역 함수는 전역 환경 레코드의 객체 환경 레코드에 연결된 BindingObject를 통해 전역 객체의 프로퍼티와 메서드가 된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1">// 전역 변수 x와 전역 함수 foo는 객체 환경 레코드를 통해 </span>
    <span class="c1">// 객체 환경 레코드의 BindingObject에 바인딩되어 있는 전역 객체의 프로퍼티와 메서드가 된다. </span>
    <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">y</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>

    <span class="kd">function</span> <span class="nx">foo</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">...</span>
</code></pre></div></div>
<p>var 키워드로 선언한 변수는 선언단계와 초기화 단계가 동시에 진행된다. 따라서 var 키워드로 선언한 변수는 코드 실행 단계에서 변수 선언문 이전에도 참조할 수 있다. 단, 변수 선언문 이전에 참조한 변수의 값은 언제나 undefined다.<br />
  함수 선언문으로 정의한 함수는 함수 선언문 이전에 호출할 수 있다.</p>

<h4 id="선언적-환경-레코드-생성">선언적 환경 레코드 생성</h4>
<p>let, const 키워드로 선언한 전역 변수는 선언적 환경 레코드에 등록되고 관리된다.  let, const 키워드로 선언한 전역 변수는 전역 걕체의 프로퍼티가 되지 않고 개념적인 블록 내에 존재하게 된다. 여기서 개념적인 블록이 바로 전역 환경 레코드의 선언적 환경 레코드다.<br />
window.y와 같이 전역 객체의 프로퍼티로서 참조할 수 없다. const 키워드로 선언한 변수는 “선언 단계”와 “초기화 단계”가 분리되어 진행 되기 때문에 일시적 사각지대에 빠지게 된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kd">let</span> <span class="nx">foo</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// 전역 변수</span>

    <span class="p">{</span>
      <span class="c1">// let const 키워드로 선언한 변수도 호이스팅이 발생하기 때문에 참조 에러가 발생한다.</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span> <span class="c1">// ReferenceError: Cannot access 'foo' before initialization (일시적 사각지대)</span>
      <span class="kd">let</span> <span class="nx">foo</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="c1">// 지역 변수</span>
    <span class="p">}</span>
</code></pre></div></div>

<h4 id="this-바인딩">this 바인딩</h4>
<p>전역 환경 레코드의 [[GlobalThisValue]] 내부 슬롯에 this가 바인딩 된다. 전역 코드에서 this를 참조하면 전역 환경 레코드의 [[GlobalThisValue]] 내부 슬록에 바인딩되어 있는 객체가 반환된다. this 바인딩은 전역 환경 레코드와 함수 환경 레코드에만 존재한다.</p>

<h4 id="외부-렉시컬-환경에-대한-참조-결정">외부 렉시컬 환경에 대한 참조 결정</h4>
<p>외부 렉시컬 환경에 대한 참조는 현재 평가 중인 소스코드를 포함하는 외부 소스코드의 렉시컬 환경, 즉 상위 스코프를 가리킨다.<br />
전역 코드를 포함하는 소스코드는 없으므로 전역 렉시컬 환경의 외부 렉시컬 환경에 대한 참조에 null이 할당된다. 이는 전역 렉시컬 환경이 스코프 체인의 종점에 존재함을 의미한다.<br />
(그림 23-15)</p>

<h3 id="2363-전역-코드-실행">23.6.3 전역 코드 실행</h3>
<p>전역 코드가 순차적으로 실행. 변수 할당문이 실행되어 변수 x, y에 값이 할당된다. foo함수도 호출.<br />
동일한 이름의 식별자가 다른 스코프에 여러 개 존재할 수도 있다. 따라서 어느 스코프의 실별자를 참조하면 되는지 결정할 필요가 있다. 이를 식별자 결정이라 한다.<br />
식별자 결정을 위해 식별자를 검색할 때는 실행 중인 실행 컨텍스트에서 식별자를 검색한다. 만약 실행중이 실행 컨텍스트의 렉시컬 환경에서 식별자를 검색할 수 없으면 상위 스코프로 이동하여 식별자를 검색한다.<br />
실행 컨텍스트는 소스코드를 실행하기 위해 필요한 환경을 제공하고 코드의 실행 결과를 실제로 관리하는 영역이다.</p>

<h3 id="2364-foo-함수-코드-평가">23.6.4 foo 함수 코드 평가</h3>
<p>foo 함수가 호출되면 전역 코드의 실행을 일시중단하고 foo 함수 내부로 코드의 제어권이 이동한다. 그리고 코드를 평가한다.</p>
<ol>
  <li>함수 실행 컨텍스트 생성</li>
  <li>함수 렉시컬 환경 생성<br />
2.1 함수 환경 레코드 생성<br />
2.2 this 바인딩<br />
2.3 외부 렉시컬 환경에 대한 참조 결정</li>
</ol>

<p>(그림 23-17)</p>

<h4 id="함수-실행-컨텍스트-생성">함수 실행 컨텍스트 생성</h4>
<p>foo 함수 실행 컨텍스트 생성. 실행 컨텍스트는 함수 렉시컬 환경이 완성된 다음 실행 컨텍스트 스택에 푸시. 이때 foo 함수 실행 컨텍스트는 실행 컨텍스트 스택의 최상위, 즉 실행 중인 실행 컨텍스트가 된다.</p>

<h4 id="함수-렉시컬-환경-생성">함수 렉시컬 환경 생성</h4>
<p>foo 함수 렉시컬 환경을 생성하고 foo 함수 실행 컨텍스트에 바인딩.</p>

<h4 id="함수-환경-레코드-생성">함수 환경 레코드 생성</h4>
<p>함수 렉시컬 환경을 구성하는 컴포넌트 중 하나인 함수 환결 레코드는 매개변수, arguments 객체, 함수 내부에서 선언한 지역 변수와 중첩 함수를 등록하고 관리한다.</p>

<h4 id="this-바인딩-1">this 바인딩</h4>
<p>함수 환경 레코드의 [[ThisValue]] 내부 슬롯에 this가 바인딩.<br />
foo 함수는 일반함수로 호출되어 this는 전역 객체를 가리킨다. 따라서 함수 환경 레코드의 [[ThisValue]] 내부 슬롯에는 전역 객체가 바인딩돤다.</p>

<h4 id="외부-렉시컬-환경에-대한-참조-결정-1">외부 렉시컬 환경에 대한 참조 결정</h4>
<p>foo 함수는 전역 코드에 정의된 전역 함수다. 따라서 전역 코드 평가 시점에 평가된다. 이 시점의 실행중인 실행 컨텍스트는 전역 실행 컨텍스트고 외부 렉시컬 환경에 대한 참조에는 전역 렉시컬 환경의 참조가 할당된다.<br />
자바스크립트 엔진은 함수 정의를 평가하여 함수 객체를 생성할 때 함수의 상위 스코프를 함수 객체의 내부 슬롯 [[Environment]]에 저장한다. 즉, 함수 객체의 내부 슬롯 [[Environment]]가 바로 렉시컬 스코프를 구현하는 매커니즘이다.</p>

<h3 id="2365-foo-함수-코드-실행">23.6.5 foo 함수 코드 실행</h3>
<p>이제 런타인이 시작되어 foo 함수의 소스코드가 실행된다. 매개변수에 인수가 할당되고, 변수 할당문이 실행되어 지역 변수 x, y에 값이 할당된다. 그리고 bar 함수가 호출된다. 이떄 식별자 결정을 위해 실행 중인 실행 컨텍스트의 렉시컬 환경에서 식별자를 검색하기 시작한다. 만약 실행 중인 실행 컨텍스트의 렉시컬 환경에서 식별자를 검색할 수 없으면 외부 렉시컬 환경에 대한 참조가 가리키는 렉시컬 환경으로 이동하여 검색.</p>

<h3 id="2366-bar-함수-코드-평가">23.6.6 bar 함수 코드 평가</h3>
<p>bar 함수가 호출되면 bar 함수 내부로 코드의 제어권이 이동되고 bar 함수의 코드를 평가한다. 생성된 bar 함수 실행 컨텍스트와 렉시컬 환경은 다음과 같다.<br />
(그림 23-23)</p>

<h3 id="2367-bar-함수-코드-실행">23.6.7 bar 함수 코드 실행</h3>
<p>런타임 시작 -&gt; bar 함수의 소스코드 실행 -&gt; 매개변수에 인수 할당 -&gt; 변수 할당문이 실행되어 z에 값 저장 -&gt; console.log 실행</p>
<ol>
  <li>
    <p>console 식별자 검색<br />
console 식별자를 스코프 체인에서 검색한다. console 식별자는 객체 환경 레코드의 BindingObject를 통해 전역 객쳉에서 찾을 수 있다.
따라서 console 식별자를 찾아 스코프 체인 상의 상위 스코프, 즉 외부 렉시컬 환경에 대한 참고가 가리키는 상위 렉시컬 환경으로 이동하여 검색하기를 반복하고 전역 렉시컬 환경에 도달했을 때 마침내 검색할 수 있다.</p>
  </li>
  <li>
    <p>log 메서드 검색<br />
console 객체의 프로토타입 체인을 통해 메서드를 검색한다. log 메서드는 상속된 프로퍼티가 아니라 console 객체가 직접 소유하는 프로퍼티다.</p>
  </li>
  <li>
    <p>표현식 a + b + x + y + z의 평가<br />
a, b, x, y, z 식별자를 검색한다. 식별자는 스코프체인, 즉 현재 실행중인 실행 컨텍스트의 렉시컬 환경에서 시작하여 외부 렉시컬환경에 대한 참조로 이어지는 렉시컬 환경의 연속에서 검색한다.</p>
  </li>
  <li>
    <p>console.log 메서드 호출
표현식 a + b + x + y + z의 평가되어 생성한 값 42를 console.log 메서드에 전달하여 호출한다.</p>
  </li>
</ol>

<h3 id="2368-bar-함수-코드-실행-종료">23.6.8 bar 함수 코드 실행 종료</h3>
<p>console.log 메서드가 호출되고 종료하면 더는 실행할 코드가 없으므로 bar 함수 코드의 실행이 종료되고 bar 함수의 실행 컨텍스트가 팝되어 제거된다. 실행 컨텍스트 스택에서 bar 함수 실행 컨텍스트가 제거 되었다고해서 렉시컬 환경까지 즉시 소멸하는 것은 아니다. 독립적인 객체이기 때문에 누군가에 의해 참조되지 않을 때 비로소 가비지 컬렉터에 의해 메모리 공간의 확보가 해제되어 소멸된다.</p>

<h3 id="2369-foo-함수-코드-실행-종료">23.6.9 foo 함수 코드 실행 종료</h3>
<p>foo 함수 코드의 실행이 종료되면 이때 실행 컨텍스트 스택에서 foo 함수의 실행 컨텍스트가 팝되어 제거되고 전역 실행 컨텍스트가 실행중인 컨텍스트가 된다.</p>

<h3 id="23610-전역-코드-실행-종료">23.6.10 전역 코드 실행 종료</h3>
<p>foo 함수가 종료되면 더이상 실행할 전역 코드가 없으므로 코드의 실행이 종료되고 전역 실행 컨텍스트도 팝되어 실행 컨텍스트에는 아무것도 남아있지 않게 된다.</p>

<h2 id="237-실행-컨텍스트와-블록-레벨-스코프">23.7 실행 컨텍스트와 블록 레벨 스코프</h2>
<p>let, const 키워드로 선언한 변수는 모든 코드 블록을 지역 스코프로 인정하는 블록 레벨 스코프를 따른다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">let</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

  <span class="k">if</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span> <span class="c1">// 10</span>
  <span class="p">}</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span> <span class="c1">// 1</span>
</code></pre></div></div>
<p>if 문의 코드블록이 실행되면 if문의 코드 블로을 위한 블록 레벨 스코프를 생성해야 한다. 이를 위해 선언적 환경 레코드를 갖는 렉시컬 환경을 새롭게 생성하여 기존의 전역 렉시컬 환경을 교체한다.<br />
if 문 코드 불록의 실행이 종료되면 if 문의 코드 블록이 실행되기 이전의 렉시컬 환경으로 되돌린다. 이는 if문 뿐만 아니라 보든 블록문에 적용된다.<br />
(그림 23-28/29)<br />
for 문은 코드 블록이 반복해서 실행될 때마다 코드 블록을 위한 새로운 렉시컬 환경을 생성한다.</p>]]></content><author><name>Hyejic</name></author><category term="js" /><category term="javascript" /><summary type="html"><![CDATA[모던 자바스크립트 Deep Dive 23장 실행 컨텍스트 내용 정리]]></summary></entry><entry><title type="html">19장 프로토 타입</title><link href="http://localhost:4000/js/modernJS19/" rel="alternate" type="text/html" title="19장 프로토 타입" /><published>2022-05-09T00:00:00+09:00</published><updated>2022-05-09T00:00:00+09:00</updated><id>http://localhost:4000/js/modernJS19</id><content type="html" xml:base="http://localhost:4000/js/modernJS19/"><![CDATA[<p><br /></p>

<h1 id="19장-프로토타입">19장 프로토타입</h1>
<p>자바스크립트는 클래스 기반 객체지향 프로그래밍 언어보다 효율적이며 더 강력한 객체지향 프로그래밍 능력을 지니고 있는 프로토타입 기반의 객체지향 프로그래밍 언어다. 자바스크립트는 객체 기반의 프로그래밍 언어이며 자바스크립트를 이루고 있는 거의 “모든 것”이 객체다.</p>

<h2 id="191-객체지향-프로그래밍">19.1 객체지향 프로그래밍</h2>
<p>객체의 집합으로 프로그램을 표현하려는 프로그래밍 패러다임을 말한다.<br />
객체지향 프로그래밍은 실세계의 실체를 인식하는 철학적 사고를 프로그래밍에 접목하려는 시도에서 시작한다. 실체는 특징이나 성질을 나타내는 <code class="language-plaintext highlighter-rouge">속성</code>을 가지고 있고, 이를 통해 인식하거나 구별할 수 있다. 다양한 속성 중에서 프로그램에 필요한 속성만 간추려 내어 표현하는 것을 <code class="language-plaintext highlighter-rouge">추상화</code>라 한다.<br />
객체지향 프로그래밍은 객체의 상태를 나타내는 데이터와 상태 데이터를 조작할 수 있는 동작을 하나의 논리적인 단위로 묶어 생각한다. 따라서 객체는 상태 데이터와 동작을 하나의 논리적인 단위로 묶은 복합적인 자료구조라고 할 수 있다. 이 때 객체의 상태 데이터를 프로퍼트, 동작을 메서드라 부른다.</p>

<h2 id="192-상속과-프로토타입">19.2 상속과 프로토타입</h2>
<p>상속은 객체지향 프로그래밍의 핵심 개념으로, 어떤 객체의 프로퍼티 또는 메서드를 다른 객체가 상속받아 그대로 사용할 수 있는 것을 말한다.
자바스크립트는 프로토타입을 기반으로 상속을 구현한다. 예제에서 상속을 통해 불필요한 중복을 제거해 보자.</p>

<h3 id="중복-인스턴스">중복 인스턴스</h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 생성자 함수</span>
  <span class="kd">function</span> <span class="nx">Circle</span><span class="p">(</span><span class="nx">radius</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">radius</span> <span class="o">=</span> <span class="nx">radius</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">getArea</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">radius</span> <span class="o">**</span> <span class="mi">2</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">};</span>

  <span class="kd">const</span> <span class="nx">circle1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Circle</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">circle2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Circle</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>

  <span class="c1">// Circle 생성자 함수는 인스턴스를 생성할 때마다 동일한 동작을 하는 getArea 메서드를 중복 생성하고 모든 인스턴스가 중복 소유한다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">circle1</span><span class="p">.</span><span class="nx">getArea</span> <span class="o">===</span> <span class="nx">circle2</span><span class="p">.</span><span class="nx">getArea</span><span class="p">);</span> <span class="c1">// false</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">circle1</span><span class="p">.</span><span class="nx">getArea</span><span class="p">());</span> <span class="c1">// 3.141592653589793</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">circle2</span><span class="p">.</span><span class="nx">getArea</span><span class="p">());</span> <span class="c1">// 12.566370614359172</span>
</code></pre></div></div>
<h3 id="상속을-통한-중복-인스턴스-방지">상속을 통한 중복 인스턴스 방지</h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 생성자 함수</span>
  <span class="kd">function</span> <span class="nx">Circle</span><span class="p">(</span><span class="nx">radius</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">radius</span> <span class="o">=</span> <span class="nx">radius</span><span class="p">;</span>
  <span class="p">};</span>

  <span class="c1">// Circle 생성자 함수가 생성한 모든 인스턴스가 gerArea 메서드를 공유해서 사용할 수 있도록 프로토타입에 추가</span>
  <span class="nx">Circle</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getArea</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">radius</span> <span class="o">**</span> <span class="mi">2</span><span class="p">;</span>
  <span class="p">};</span>

  <span class="c1">// 인스턴스 생성</span>
  <span class="kd">const</span> <span class="nx">circle1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Circle</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">circle2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Circle</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>

  <span class="c1">// Circle 생성자 함수가 생성한 모든 인스턴스는 부모 객체의 역할을 하는 프로토타입 Circle.prototype으로부터 getArea 메서드를 상속받는다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">circle1</span><span class="p">.</span><span class="nx">getArea</span> <span class="o">===</span> <span class="nx">circle2</span><span class="p">.</span><span class="nx">getArea</span><span class="p">);</span> <span class="c1">// true</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">circle1</span><span class="p">.</span><span class="nx">getArea</span><span class="p">());</span> <span class="c1">// 3.141592653589793</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">circle2</span><span class="p">.</span><span class="nx">getArea</span><span class="p">());</span> <span class="c1">// 12.566370614359172</span>
</code></pre></div></div>
<p>상속은 코드의 재사용이란 관점에서 매우 유용하다.</p>

<h2 id="193-프로토타입-객체">19.3 프로토타입 객체</h2>
<p>프로토타입 객체란 객체지향 프로그래밍의 근간을 이루는 객체 간 상속을 구현하기 위해 사용된다.<br />
모든 객체는 [[Prototype]]이라는 내부 슬롯을 가지며, 이 내부 슬록의 값은 프로토타입의 참조다. 객체가 생성될때 객체 생성 방식에 따라 프로토타입이 결정되고 [[Prototype]]에 저장된다.<br />
(그림 19-3)</p>

<p>[[Prototype]] 내부 슬롯에는 직접 접근할 수 없지만, 위 그림처럼 __proto__ 접근자 프로퍼티를 통해 자신의 프로토타입, 즉 자신의 [[Prototype]] 내부 슬록이 가리키는 프로토타입에 간접적으로 접근할 수 있다. 그리고 프로토타입은 자신의 constructor 프로퍼티를 통해 생성자 함수에 접근할 수 있고, 생성자 함수는 자신의 prototype 프로퍼티를 통해 프로토타입에 접근할 수 있다.</p>

<h3 id="1931-__proto__-접근자-프로퍼티">19.3.1 __proto__ 접근자 프로퍼티</h3>
<p>__proto__ 접근자 프로퍼티를 통해 자신의 프로토타입, 즉 자신의 [[Prototype]] 내부 슬록이 가리키는 프로토타입에 간접적으로 접근할 수 있다.
(그림 19-4)</p>

<h4 id="__proto__는-접근자-프로퍼티다">__proto__는 접근자 프로퍼티다.</h4>
<p>접근자 프로퍼티는 자체적으로는 값을 갖지 않고 다른 데이터 프로퍼티의 값을 읽거나 저장할 때 사용하는 접근자 함수, 즉 [[Get]], [[Set]] 프로퍼티 어트리뷰트로 구성된 프로퍼티다. <br />
__proto__ 접근자 프로퍼티를 통해 프로토타입에 접근하면 getter 함수인 [[Get]]이 호출된다. <br />
__proto__ 접근자 프로퍼티를 통해 새로운 프로토타입을 할당하면 setter 함수인 [[Set]]이 호출된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{};</span>
  <span class="kd">const</span> <span class="nx">parent</span> <span class="o">=</span> <span class="p">{</span> <span class="na">x</span><span class="p">:</span> <span class="mi">1</span> <span class="p">};</span>

  <span class="c1">// getter 함수인 get __proto__가 호출되어 obj 객체의 프로토타입을 취득</span>
  <span class="nx">obj</span><span class="p">.</span><span class="nx">__proto__</span><span class="p">;</span> 

  <span class="c1">// setter 함수인 set __proto__가 호출되어 obj 객체의 프로토타입을 교체</span>
  <span class="nx">obj</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">=</span> <span class="nx">parent</span><span class="p">;</span> 

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span> <span class="c1">// 1</span>
</code></pre></div></div>

<h4 id="__proto__-접근자-프로퍼티는-상속을-통해-사용된다">__proto__ 접근자 프로퍼티는 상속을 통해 사용된다.</h4>
<p>모든 객체는 상속을 통해 Object.prototype.__proto__ 접근자 프로퍼티를 사용할 수 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Choi</span><span class="dl">"</span> <span class="p">};</span>

  <span class="c1">// person 객체는 __proto__ 프로퍼티를 소유하지 않는다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="dl">'</span><span class="s1">__proto__</span><span class="dl">'</span><span class="p">));</span> <span class="c1">// false</span>

  <span class="c1">// __proto__ 프로퍼티는 모든 객체의 프로토타입 객체인 Object.prototype의 접근자 프로퍼티다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">getOwnPropertyDescriptor</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span> <span class="dl">'</span><span class="s1">__proto__</span><span class="dl">'</span><span class="p">));</span>
  <span class="c1">// {enumerable: false, configurable: true, get: ƒ, set: ƒ}</span>

  <span class="c1">// 모든 객체는 Object.prototype의 접근자 프로퍼티 __proto__를 상속받아 사용할 수 있다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">({}.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span> <span class="c1">// true</span>
</code></pre></div></div>

<h4 id="__proto__-접근자-프로퍼티를-통해-프로토타입에-접근하는-이유">__proto__ 접근자 프로퍼티를 통해 프로토타입에 접근하는 이유</h4>
<p>프로토타입에 접근하기 위해 접근자 프로퍼티를 사용하는 이유는 상호 참조에 의해 프로토타입 체인이 생성되는 것을 방지하기 위해서다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">parent</span> <span class="o">=</span> <span class="p">{};</span>
  <span class="kd">const</span> <span class="nx">child</span> <span class="o">=</span> <span class="p">{};</span>

  <span class="nx">child</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">=</span> <span class="nx">parent</span><span class="p">;</span>
  <span class="nx">parent</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">=</span> <span class="nx">child</span><span class="p">;</span>
  <span class="c1">// TypeError: Cyclic __proto__ value</span>
</code></pre></div></div>
<p>위 예제에서 에러가 발생하지 않고 정상적으로 처리되었을 경우에는 서로가 자신의 프로토타입이 되는 비정상적인 프로토타입 체인이 만들어지기 때문에 __proto__ 접근자 프로퍼티는 에러를 발생시킨다.<br />
프로토타입 체인은 단방향 링크드 리스트로 구현되어야 한다. 만약 순환 참조(서로가 자신의 프로토타입이 되는)하는 프로토타입 체인이 만들어지면 프로토타입 체인 종점이 존재하지 않아서 무한 루프에 빠진다. 따라서 아무런 체크 없이 무조건적으로 프로토타입을 교체할 수 없도록 __proto__ 접근자 프로퍼티를 통해 프로토타입에 접근하고 교체하도록 구현되어있다.</p>

<h4 id="__proto__-접근자-프로퍼티를-코드-내에서-직접-사용하는-것은-권장하지-않는다">__proto__ 접근자 프로퍼티를 코드 내에서 직접 사용하는 것은 권장하지 않는다.</h4>
<p>모든 객체가 __proto__ 접근자 프로퍼티를 사용할 수 있는 것은 아니기 때문에 권장하지 않는다. -&gt; 직접 상속(Object.prototype을 상속받지 않는 객체)<br />
프로토타입의 참조를 취득하고 싶은 경우에는 Object.getPrototypeOf 메서드 사용.<br />
프로토타입을 교체하고 싶은 경우에는 Object.setPrototypeOf 메서드를 사용.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{};</span>
  <span class="kd">const</span> <span class="nx">parent</span> <span class="o">=</span> <span class="p">{</span> <span class="na">x</span><span class="p">:</span> <span class="mi">1</span> <span class="p">};</span>

  <span class="nb">Object</span><span class="p">.</span><span class="nx">getPrototypeOf</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span> <span class="c1">// obj.__proto__</span>

  <span class="nb">Object</span><span class="p">.</span><span class="nx">setPrototypeOf</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span> <span class="nx">parent</span><span class="p">);</span> <span class="c1">// obj.__proto__ = parent;</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span> <span class="c1">// 1</span>
</code></pre></div></div>
<p>Object.getPrototypeOf 메서드와 Object.setPrototypeOf 메서드는 get Object.prototype.__proto__ 와 set Object.prototype.__proto__ 의 처리 내용과 정확히 일치한다.</p>

<h3 id="1932-함수-객체의-prototype-프로퍼티">19.3.2 함수 객체의 prototype 프로퍼티</h3>
<p>함수 객체만이 소유하는 prototype 프로퍼티는 생성자 함수가 생성할 인스턴스의 프로토타입을 가리킨다. 따라서 생성자 함수로서 호출할 수 없는 non-constructor인 화살표 함수와 ES6 메서드 축약 표현으로 정의한 메서드는 prototype 프로퍼티를 소유하지 않으며 프로토타입도 생성하지 않는다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 함수 객체는 prototype 프로퍼티를 소유</span>
  <span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{}).</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="dl">'</span><span class="s1">prototype</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// -&gt; true</span>

  <span class="c1">// 일반 객체는 prototype 프로퍼티를 소유하지 않는다.</span>
  <span class="p">({}).</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="dl">'</span><span class="s1">prototype</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// -&gt; false</span>

  <span class="c1">// 화살표함수는 non-constructor</span>
  <span class="kd">const</span> <span class="nx">Person</span> <span class="o">=</span> <span class="nx">name</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
  <span class="p">};</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">Person</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="dl">'</span><span class="s1">prototype</span><span class="dl">'</span><span class="p">));</span> <span class="c1">// false</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span> <span class="c1">// undefined</span>
</code></pre></div></div>
<p>모든 객체가 가지고 있는 __proto__ 접근자 프로퍼티와 함수 객체만이 가지고 있는 prototype 프로퍼티는 경국 동일한 프로토타입을 가리킨다. 하지만 이들 프로퍼티를 사용하는 주체가 다르다.</p>

<table>
  <thead>
    <tr>
      <th>구분</th>
      <th>소유</th>
      <th>값</th>
      <th>사용 주체</th>
      <th>사용 목적</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>__proto__ 접근자 프로퍼티</td>
      <td>모든 객체</td>
      <td>프로토타입의 참조</td>
      <td>모든 객체</td>
      <td>객체가 자신의 프로토타입에 접근 또는 교체하기 위해 사용</td>
    </tr>
    <tr>
      <td>prototype 프로퍼티</td>
      <td>constructor</td>
      <td>프로토타입의 참조</td>
      <td>생성자 함수</td>
      <td>생성자 함수가 자신이 생성할 객체(인스턴스)의 프로토타입을 할당하기 위해 사용</td>
    </tr>
  </tbody>
</table>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 생성자 함수 </span>
  <span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="kd">const</span> <span class="nx">me</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Preson</span><span class="p">(</span><span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span><span class="p">);</span>

  <span class="c1">// 결국 Person.prototype과 me.__proto__ 는 동일한 프로토타입을 가리킨다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">===</span> <span class="nx">me</span><span class="p">.</span><span class="nx">__proto__</span><span class="p">);</span> <span class="c1">// true</span>
</code></pre></div></div>

<h3 id="1933-프로토타입의-constructor-프로퍼티와-생성자-함수">19.3.3 프로토타입의 constructor 프로퍼티와 생성자 함수</h3>
<p>모든 프로토타입은 constructor 프로퍼티를 갖는다. 이 constructor 프로퍼티는 perototype 프로퍼티로 자신을 참조하고 있는 생성자 함수를 가리킨다.<br />
이 연결은 함수 객체가 생성될 때 이뤄진다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 생성자 함수 </span>
  <span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="kd">const</span> <span class="nx">me</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Preson</span><span class="p">(</span><span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span><span class="p">);</span>

  <span class="c1">// me 객체의 생성자 함수는 Person이다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">me</span><span class="p">.</span><span class="kd">constructor</span> <span class="o">===</span> <span class="nx">Person</span><span class="p">);</span> <span class="c1">// true</span>
</code></pre></div></div>
<p>(그림 19-8)</p>

<p>위 예제에서 Person 생성자 함수는 me 객체를 생성했다. 이때 me 객체는 프로토타입의 constructor 프로퍼티를 통해서 생성자 함수와 연결된다. me 객체에는 constructor 프로퍼티가 없지만 me 객체의 프로토타입인 Person.prototype에는 constructor 프로퍼티가 있다. 따라서 me 객체는 프로토타입인 Person.prototype의 constructor 프로퍼티를 상속 받아 사용할 수 있다.</p>

<h2 id="194-리터럴-표기법에-의해-생성된-객체의-생성자-함수와-프로토타입">19.4 리터럴 표기법에 의해 생성된 객체의 생성자 함수와 프로토타입</h2>
<p>생성자 함수에 의해 생성된 인스턴스는 프로토타입의 constructor 프로퍼티에 의해 생성자 함수와 연결된다. 이때 constructor 프로퍼티가 가리키는 생성자 함수는 인스턴스를 생성한 생성자 함수다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// obj 객체를 생성한 생성자 함수는 Object이다.</span>
  <span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">();</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="kd">constructor</span> <span class="o">===</span> <span class="nb">Object</span><span class="p">);</span> <span class="c1">// true</span>
</code></pre></div></div>
<p>리터럴 표기법에 의해 생성된 객체도 물론 프로토타입이 존재한다. 하지만 리터럴 표기법에 의해 생성된 객체의 경우 프로토타입의 constructor 프로퍼티가 가리키는 생성자 함수가 반드시 객체를 생성한 생성자 함수라고 단정할 수는 없다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// obj 객체는 Object 생성자 함수로 생성한 객체가 아니라 객체 리터럴로 생성했다.</span>
  <span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{};</span>
  <span class="c1">// 하지만 obj 객체의 생성자 함수는 Object 생성자 함수다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="kd">constructor</span> <span class="o">===</span> <span class="nb">Object</span><span class="p">);</span> <span class="c1">// true</span>
</code></pre></div></div>
<p>객체 리터럴에 의해 생성된 객체이지만 obj객체는 Object 생성자 함수와 constructor 프로퍼티로 연결되어있다.</p>

<p>ECMAScript에 따르면 Object 생성자 함수는 Object 생성자 함수에 인수를 전달하지 않거나 undefined 또는 null을 인수로 전달하면서 호출하면 내부적으로는 추상 연산 OrdinaryObjectCreate를 호출하여 Object.prototype을 프로토타입으로 갖는 빈 객체를 생성한다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 인수가 전달되지 않았을떄 추상 연산 OrdinaryObjectCreate를 호출하여 빈객체 생성</span>
  <span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">();</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span> <span class="c1">// {}</span>

  <span class="c1">// 인수가 전달된 경우 인수를 객체로 반환</span>
  <span class="nx">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">(</span><span class="mi">123</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span> <span class="c1">// Number {123}</span>
</code></pre></div></div>
<p>이처럼 Object 생성자 함수 호출과 객체 리터럴의 평가는 빈 객체를 생성하는 점에서 동일하나 세부 내용은 다르다. 따라서 객체 리터럴에 의해 생성된 객체는 Object 생성자 함수가 생성한 객체가 아니다.<br />
함수 객체의 경우 함수 선언문과 함수 표현식을 평가하여 함수 객체를 생성한 것은 Function 생성자 함수가 아니다. 하지만 constructor 프로퍼티를 통해 확인해보면 foo 함수의 생성자 함수는 Function 생성자 함수다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 함수 선언문으로 생성</span>
  <span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{}</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">.</span><span class="kd">constructor</span> <span class="o">===</span> <span class="nb">Function</span><span class="p">);</span> <span class="c1">// true</span>
</code></pre></div></div>
<p>리터럴 표기법에 의해 생성된 객체도 가상적인 생성자 함수를 갖는다. 프로토타입은 생성자 함수와 더불어 생성되며 prototype, constructor 프로퍼티에 의해 연결되어 있기 때문이다.<br />
프로토타입과 생성자 함수는 단독으로 존재할 수 없고 언제나 쌍으로 존재한다.</p>

<h4 id="리터럴-표기법에-의해-생성된-객체의-생성자-함수와-프로토타입">리터럴 표기법에 의해 생성된 객체의 생성자 함수와 프로토타입</h4>
<p>리터럴 표기법 | 생성자 함수 | 프로토타입
–|–|–
객체 리터럴 | Object | Object.prototype
함수 리터럴 | Function | Function.prototype
배열 리터럴 | Array | Array.prototype
정규 표현식 리터럴 | RegExp | RegExp.prototype</p>

<h2 id="195-프로토타입의-생성-시점">19.5 프로토타입의 생성 시점</h2>
<p>프로토타입은 생성자 함수가 생성되는 시점에 더불어 생성된다. 프로토타입과 생성자 함수는 단독으로 존재할 수 없고 언제나 쌍으로 존재하기 때문이다.
생성자 함수는 사용자 정의 생성자 함수와 빌트인 생성자 함수로 구분할 수 있다.</p>

<h3 id="1951-사용자-정의-생성자-함수와-프로토타입-생성-시점">19.5.1 사용자 정의 생성자 함수와 프로토타입 생성 시점</h3>
<p>내부 메서드 [[Constructor]]를 갖는 함수 객체, 즉 일반 함수(함수 선언문, 함수 표현식)로 정의한 함수 객체는 new 연산자와 함께 생성자 함수로서 호출할 수 있다. constructor는 함수 정의가 평가되어 함수 객체를 생성하는 시점에 프로토타입도 더불어 생성된다.
non-constructor(화살표함수, ES6 메서드 축약표현)는 프로토타입이 생성되지 않는다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// Person 생성자 함수는 호이스팅되어 런타임 이전에 실행된다. 이때 프로토타입도 더불어 생성</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span> <span class="c1">// {constructor: f}</span>

  <span class="c1">// 생성자 함수</span>
  <span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
  <span class="p">}</span>
</code></pre></div></div>

<p>이처럼 빌트인 생성자 함수가 아닌 사용자 정의 생성자 함수는 자신이 평가되어 함수 객체로 생성되는 시점에 프로토타입도 더불어 생성되며, 생성된 프로토타입의 프로토타입은 언제나 Object.prototype이다.</p>

<h3 id="1952-빌트인-생성자-함수와-프로토타입-생성-시점">19.5.2 빌트인 생성자 함수와 프로토타입 생성 시점</h3>
<p>빌트인 생성자 함수 - Object, String, Number, Function, Array, RegExp, Date, Promise 등…
모든 빌트인 생성자 함수는 전역 객체가 생성되는 시점에 생성된다. 생성된 프로토타입은 빌트인 생성자 함수의 prototype 프로퍼티에 바인딩된다.<br />
(그림 19-13)<br />
객체가 생성되기 이전에 생성자 함수와 프로토타입은 이미 객체화되어 존재한다. 이후 생성자 함수 또는 리터럴 표기법으로 객체를 생성하면 프로토타입은 생성된 객체의 [[Prototype]] 내부 슬록에 할당된다.</p>

<h2 id="196-객체-생성-방식과-프로토타입의-결정">19.6 객체 생성 방식과 프로토타입의 결정</h2>
<p><code class="language-plaintext highlighter-rouge">객체 생성 방식</code></p>
<ul>
  <li>객체 리터럴</li>
  <li>Object 생성자 함수</li>
  <li>생성자 함수</li>
  <li>Object.create 메서드</li>
  <li>클래스(ES6)</li>
</ul>

<p>각 방식마다 세부적인 객체 생성 방식의 차이는 있으나 추상 연산 OrdinaryObjectCreate에 의해 생성된다는 공통점이 있다. 프로토타입은 추상 연산 OrdinaryObjectCreate에 전달되는 인수에 의해 결정되고 이 인수는 객체가 생성되는 시점에 객체 생성 방식에 의해 결정된다.</p>

<h3 id="1961-객체-리터럴에-의해-생성된-객체의-프로토타입">19.6.1 객체 리터럴에 의해 생성된 객체의 프로토타입</h3>
<p>객체 리터럴에 의해 생성되는 객체의 프로토타입은 Object.prototype이다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 객체 리터럴이 평가되면 추상 연산 OrdinaryObjectCreate에 의해 </span>
  <span class="c1">// Object 생성자 함수와 Object.prototype과 생성된 객체 사이에 연결이 만들어진다.</span>
  <span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="na">x</span><span class="p">:</span> <span class="mi">1</span> <span class="p">};</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="kd">constructor</span> <span class="o">===</span> <span class="nb">Object</span><span class="p">);</span> <span class="c1">//true</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="dl">'</span><span class="s1">x</span><span class="dl">'</span><span class="p">));</span> <span class="c1">// true</span>
</code></pre></div></div>
<p>obj 객체는 Object.prototype을 프로토타입으로 갖게되며 Object.prototype을 상속받는다.<br />
obj 객체는 constructor 프로퍼티와 hasOwnProperty 메서드 등을 소유하고 있지 않지만 Object.prototype 객체를 상속 받았기 때문에 자유롭게 사용할 수 있다.</p>

<p>(그림 19-14)</p>

<h3 id="1962-object-생성자-함수에-의해-생성된-객체의-프로토타입">19.6.2 Object 생성자 함수에 의해 생성된 객체의 프로토타입</h3>
<p>Object 생성자 함수를 인수 없이 호출하면 빈 객체 생성된다.<br />
객체 리터럴에 의해 생성된 객체와 동일한 구조를 갖는다.
Object 생성자 함수를 호출하면 추상 연상 OrdinaryObjectCreate가 호출되고 전달되는 프로토타입은 Object.prototype이다. Object 생성자 함수에 의해 생성되는 객체의 프로토타입은 Object.prototype이다.</p>
<ul>
  <li>객체 리터럴과 Object 생성자 함수에 의한 객체 생성 방식의 차이<br />
객체 리터럴 방식은 객체 리터럴 내부에 프로퍼티를 추가. Object 생성자 함수는 빈 객체 생성 후 프로퍼티 추가.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">;</span>
  <span class="nx">obj</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

  <span class="c1">// // Object 생성자 함수에 의해 생성된 obj 객체는 Object.prototype을 상속받는다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="kd">constructor</span> <span class="o">===</span> <span class="nb">Object</span><span class="p">);</span> <span class="c1">//true</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="dl">'</span><span class="s1">x</span><span class="dl">'</span><span class="p">));</span> <span class="c1">// true</span>
</code></pre></div></div>
<p>(그림 19-15)</p>

<h3 id="1963-생성자-함수에-의해-생성된-객체의-프로토타입">19.6.3 생성자 함수에 의해 생성된 객체의 프로토타입</h3>
<p>new 연산자와 함께 생성자 함수를 호출하여 인스턴스를 생성하면 다른 객체 생성 방식돠 마찬가지로 추상 연산 OrdinaryObjectCreate가 호출된다.<br />
생성자 함수에 의해 생성되는 객체의 프로토타입은 생성자 함수의 prototype 프로퍼티에 바인딩되어 있는 객체다.<br />
사용자 정의 생성자 함수 Person과 더불어 생성된 프로토타입 Person.prototype의 프로퍼티는 constructor뿐이다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="c1">// 프로토타입 메서드 추가로 하위 객체가 상속 받을 수 있도록 구현</span>
  <span class="c1">// 일반 객체와 같이 프로토타입도 추가, 삭제가 가능하고 이렇게 추가, 삭제된 프로퍼티는 프로토타입 체인에 즉각 반영된다.</span>
  <span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">sayHello</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Hi my name is </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="kd">const</span> <span class="nx">me</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">you</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="dl">'</span><span class="s1">Kim</span><span class="dl">'</span><span class="p">);</span>

  <span class="nx">me</span><span class="p">.</span><span class="nx">sayHello</span><span class="p">();</span> <span class="c1">// Hi my name is Choi</span>
  <span class="nx">you</span><span class="p">.</span><span class="nx">sayHello</span><span class="p">();</span> <span class="c1">// Hi my name is Kim</span>
</code></pre></div></div>

<p>(그림 19-17)<br />
Person 생성자 함수를 통해 생성된 모든 객체는 프로토타입에 추가된 sayHello 메서드를 상속받아 자신의 메서드처럼 사용할 수 있다.</p>

<h2 id="197-프로토타입-체인">19.7 프로토타입 체인</h2>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="c1">// 프로토타입 메서드</span>
  <span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">sayHello</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Hi my name is </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="kd">const</span> <span class="nx">me</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span><span class="p">);</span>

  <span class="c1">// hasOwnProperty는 Obejct.prototype의 메서드다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">me</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="dl">'</span><span class="s1">name</span><span class="dl">'</span><span class="p">));</span> <span class="c1">// true</span>
</code></pre></div></div>
<p>위 예제에서 Person 생성자 함수에 의해 생성된 me 객체는 Object.prototype의 메서드인 hasOwnProperty를 호출할 수 있다. 이것은 Person.prototype 뿐만 아니라 Object.prototype도 상속받았다는 의미이다.</p>

<p>자바스크립트는 객테의 프로퍼티(메서드 포함)에 접근하려고 할 때 해당 객체에 접근하려는 프로퍼티가 없다면 [[Prototype]] 내부 슬록의 참조를 따라 자신의 부모 역할을 하는 프로토타입의 프로퍼티를 순차적으로 검색한다. 이름 프로토타입 체인이라 한다. 프로토타입 체인은 자바스크립트가 객체지향 프로그래밍의 상속을 구현하는 매커니즘이다.</p>

<p>(그림 19-18)</p>

<p>me.hasOwnProperty(‘name’)과 같이 메서드를 호출하면 자바스크립트는 다음과 같은 과정을 거쳐 메서드를 검색한다.</p>
<ol>
  <li>hasOwnProperty 메서드를 호출한 me 객체에서 hasOwnProperty 메서드를 검색.<br />
me 객체에는 hasOwnProperty 메서드가 없으므로 [[Prototype]] 내부 슬롯에 바인딩 되어있는 프로토타입으로 이동하여 hasOwnProperty 메서드를 검색한다.</li>
  <li>Person.prototype에도 hasOwnProperty 메서드가 없으므로 체인을 따라 [[Prototype]] 내부 슬롯에 바인딩 되어있는 프로토타입으로 이동하여 hasOwnProperty 메서드를 검색한다.</li>
  <li>Object.prototype에는 hasOwnProperty 메서드가 존재하므로 Object.prototype.hasOwnProperty 메서드를 호출한다. 이때 Object.prototype.hasOwnProperty 메서드의 this에는 me 객체가 바인딩 된다.
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">me</span><span class="p">,</span><span class="dl">'</span><span class="s1">name</span><span class="dl">'</span><span class="p">);</span> <span class="c1">//true</span>
</code></pre></div>    </div>
    <blockquote>
      <p>call 메서드는 this로 사용할 객체를 전달하면서 함수를 호출한다.</p>
    </blockquote>
  </li>
</ol>

<p>프로토타입 체인의 최상위에 위치하는 객체는 언제나 Object.prototype이다. 따라서 모든 객체는 Object.prototype을 상속받는다. <code class="language-plaintext highlighter-rouge">Object.prototype을 프로토타입 체인의 종점</code>이라 한다.<br />
프로토타입 체인은 상속과 프로퍼티 검색을 위한 메커니즘이라고 할 수 있다. 반면에 스코프 체인은 식별자 검색을 위한 메커니즘이라고 할 수 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nx">me</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="dl">'</span><span class="s1">name</span><span class="dl">'</span><span class="p">);</span> 
</code></pre></div></div>
<p>위 예제의 경우, 먼저 식별자 체인에서 me 식별자를 검색한다. me 식별자는 전역에서 선언되었으므로 전역 스코프에서 검색된다. me 식별자 검색 후 me 객체의 프로토타입 체인에서 hasOwnProperty 메서드를 검색한다. 이처럼 <code class="language-plaintext highlighter-rouge">스코프 체인과 프로토타입 체인은 별도로 동작하는 것이 아니라 서로 협력하여 식별자와 프로퍼티를 검색하는 데 사용</code>된다.</p>

<h2 id="198-오버라이딩과-프로퍼티-섀도잉">19.8 오버라이딩과 프로퍼티 섀도잉</h2>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">Person</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// 생성자 함수</span>
    <span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// 프로토타입 메서드 추가</span>
    <span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">sayHello</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Hi! my name is </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
    <span class="p">};</span>

    <span class="c1">// 생성자 함수를 반환</span>
    <span class="k">return</span> <span class="nx">Person</span><span class="p">;</span>
  <span class="p">}());</span>

  <span class="kd">const</span> <span class="nx">me</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span><span class="p">);</span>

  <span class="c1">// 인스턴스 메서드 추가</span>
  <span class="nx">me</span><span class="p">.</span><span class="nx">sayHello</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Hey! my name is </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
  <span class="p">};</span>

  <span class="c1">// 인스턴스 메서드가 호출. 프로토타입 메서드는 인스턴스 메서드에 의해 가려진다. (프로퍼티 섀도잉)</span>
  <span class="nx">me</span><span class="p">.</span><span class="nx">sayHello</span><span class="p">();</span> <span class="c1">//Hey! my name is Choi</span>

  <span class="c1">// 인스턴스 메서드 삭제</span>
  <span class="k">delete</span> <span class="nx">me</span><span class="p">.</span><span class="nx">sayHello</span><span class="p">;</span>

  <span class="c1">// 프로퍼티 메서드 sayHello 출력</span>
  <span class="nx">me</span><span class="p">.</span><span class="nx">sayHello</span><span class="p">();</span> <span class="c1">// Hi! my name is Choi</span>

  <span class="c1">// 프로퍼티 메서드 sayHello 삭제 -&gt; 삭제되지 않는다.</span>
  <span class="k">delete</span> <span class="nx">me</span><span class="p">.</span><span class="nx">sayHello</span><span class="p">;</span>

  <span class="nx">me</span><span class="p">.</span><span class="nx">sayHello</span><span class="p">();</span> <span class="c1">// Hi! my name is Choi</span>

  <span class="c1">// 프로토타입 메서드의 변경 및 삭제는 프로토타입에 직접 접근해야 한다.</span>
  <span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">sayHello</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Hello! my name is </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="nx">me</span><span class="p">.</span><span class="nx">sayHello</span><span class="p">();</span> <span class="c1">// Hello! my name is Choi</span>

  <span class="k">delete</span> <span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">sayHello</span><span class="p">;</span>

  <span class="nx">me</span><span class="p">.</span><span class="nx">sayHello</span><span class="p">();</span> <span class="c1">// TypeError: me.sayHello is not a function</span>
</code></pre></div></div>
<p>(그림 19-19)<br />
프로토타입이 소유한 프로퍼티를 프로토타입 프로퍼티, 인스턴스가 소유한 프로퍼티를 인스턴스 프로퍼티라고 부른다.<br />
프로토타입 프로퍼티와 같은 이름의 프로퍼티를 인스턴스에 추가하면 체인을 따라 프로토타입 프로퍼티를 검색하여 프로토타입 프로퍼티를 덮어쓰는 것이 아니라 인스턴스 프로퍼티로 추가한다. 이때 인스턴스 메서드 sayHello는 프로토타입 메서드 sayHello를 오버라이딩했고 프로토타입 메서드 sayHello는 가려진다. 이처럼 상속 관계에 의해 프로퍼티가 가려지는 현상을 프로퍼티 섀도잉이라 한다.
프로토타입 메서드는 하위 객체를 통해 프로토타입을 변경 및 삭제하는 것은 불가능하다. 하위 객체를 통한 프로토타입의 get 엑세스 허용 set 엑세스 금지. 프로토타입에 직접 접근해야 한다.</p>

<h2 id="199-프로토타입의-교체">19.9 프로토타입의 교체</h2>
<p>프로토타입은 생성자 함수 또는 인스턴스에 의해 교체할 수 있다.</p>

<h3 id="1991-생성자-함수에-의한-프로토타입의-교체">19.9.1 생성자 함수에 의한 프로토타입의 교체</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kd">const</span> <span class="nx">Person</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// 생성자 함수</span>
    <span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// 생성자 함수의 prototype 프로퍼티를 통해 프로토타입을 교체</span>
    <span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="p">{</span>
      <span class="c1">// 💡 constructor 프로퍼티와 생성자 함수 간의 연결</span>
      <span class="c1">// constructor: Person,</span>
      <span class="nx">sayHello</span> <span class="p">()</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Hi! my name is </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
      <span class="p">}</span>
    <span class="p">};</span>

    <span class="k">return</span> <span class="nx">Person</span><span class="p">;</span>
  <span class="p">}());</span>

  <span class="kd">const</span> <span class="nx">me</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span><span class="p">);</span>

  <span class="c1">// 프로토타입을 교체하면 constructor 프로퍼티와 생성자 함수 간의 연결이 파괴된다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">me</span><span class="p">.</span><span class="kd">constructor</span> <span class="o">===</span> <span class="nx">Person</span><span class="p">)</span> <span class="c1">// false / 💡 constructor 함수 간 연결 후 -&gt; true</span>
  <span class="c1">// 프로토타입 체인을 따라 Object.prototype의 constructor 프로퍼티가 검색된다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">me</span><span class="p">.</span><span class="kd">constructor</span> <span class="o">===</span> <span class="nb">Object</span><span class="p">)</span> <span class="c1">// true / 💡 constructor 함수 간 연결 후 -&gt; false</span>
</code></pre></div></div>
<p>Person.prototype에 객체 리터럴을 할당했다. 이것은 Person 생성자 함수가 생성할 객체의 포로토타입을 객체 리터럴로 교체한 것이다.<br />
(그림 19-20)<br />
객체 리터럴에는 constructor 프로퍼티가 없다. 따라서 me 객체의 생성자 함수를 검색하면 Person이 아닌 Object가 나온다. 생성자 함수간의 연결 파괴.<br />
연결을 되살리려면 프로토타입으로 교체한 객체 리터럴에 constructor 프로퍼티를 추가.</p>

<h3 id="1992-인스턴스에-의한-프로토타입의-교체">19.9.2 인스턴스에 의한 프로토타입의 교체</h3>
<p>생성자 함수에 의한 프로토타입의 교체와 마찬가지로 constructor 프로퍼티와 생성자 함수 간의 연결이 파괴된다.<br />
별차이가 없어보이지만 미묘한 차이가 있다. 인스턴스에 의한 프로토타입의 교체는 Person 생성자 함수가 교체된 프로토타입에 연결이 되지 않는다.<br />
(그림 19-22)</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="kd">const</span> <span class="nx">me</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span><span class="p">);</span>
  
  <span class="c1">// 프로토타입으로 교체할 객체 </span>
  <span class="kd">const</span> <span class="nx">parent</span> <span class="o">=</span> <span class="p">{</span>
    <span class="c1">// 💡 constructor 프로퍼티와 생성자 함수 간의 연결</span>
    <span class="na">constructer</span><span class="p">:</span> <span class="nx">Person</span><span class="p">,</span>
    <span class="nx">sayHello</span> <span class="p">()</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Hi! my name is </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">};</span>

  <span class="c1">// 💡 생성자 함수의 prototype 프로퍼티와 프로토타입 간의 연결을 설정</span>
  <span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nx">parent</span><span class="p">;</span>

  <span class="c1">// me 객체의 프로토타입을 parent 객체로 교체</span>
  <span class="nb">Object</span><span class="p">.</span><span class="nx">setPrototypeOf</span><span class="p">(</span><span class="nx">me</span><span class="p">,</span> <span class="nx">parent</span><span class="p">);</span>
  <span class="c1">// 위 코드는 아래의 코드와 동일하게 동작</span>
  <span class="c1">// me.__proto__ = parent;</span>

  <span class="nx">me</span><span class="p">.</span><span class="nx">sayHello</span><span class="p">();</span> <span class="c1">// Hi! my name is Choi</span>

  <span class="c1">// 프로토타입을 교체하면 constructor 프로퍼티와 생성자 함수 간의 연결이 파괴된다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">me</span><span class="p">.</span><span class="kd">constructor</span> <span class="o">===</span> <span class="nx">Person</span><span class="p">)</span> <span class="c1">// false / 💡 constructor 함수 간 연결 후 -&gt; true</span>
  <span class="c1">// 프로토타입 체인을 따라 Object.prototype의 constructor 프로퍼티가 검색된다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">me</span><span class="p">.</span><span class="kd">constructor</span> <span class="o">===</span> <span class="nb">Object</span><span class="p">)</span> <span class="c1">// true / 💡 constructor 함수 간 연결 후 -&gt; false</span>

  <span class="c1">// 💡 생성자 함수의 prototype 프로퍼티가 교체된 프로토타입을 가리킨다.</span>
  <span class="c1">// console.log(Person.prototype === Object.getPrototypeOf(me)); // true</span>
</code></pre></div></div>
<p>연결을 되살리려면 프로토타입으로 교체한 객체 리터럴에 constructor 프로퍼티를 추가하고 함수의 prototype 프로퍼티를 재설정 해야한다.
이처럼 프로토타입 교체를 통해 객체 간의 상속 관계를 동적으로 변경하는 것은 꽤나 번거롭다. 따라서 프로토타입은 직접 교체하지 않는 것이 좋다.</p>

<h2 id="1910-instanceof-연산자">19.10 instanceof 연산자</h2>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nx">객체</span> <span class="k">instanceof</span> <span class="nx">생성자</span> <span class="nx">함수</span>
</code></pre></div></div>
<p>우변의 생성자 함수의 prototype에 바인딩되 객체가 좌변의 객체의 프로토타입 체인 상에 존재하면 true로 평가되고, 그렇지 않은 경우에는 false로 평가된다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="kd">const</span> <span class="nx">me</span> <span class="o">=</span> <span class="nx">mew</span> <span class="nx">Person</span><span class="p">(</span><span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span><span class="p">);</span>

  <span class="c1">// 프로토타입으로 교체할 객체</span>
  <span class="kd">const</span> <span class="nx">parent</span> <span class="o">=</span> <span class="p">{};</span>

  <span class="c1">// 프로토타입의 교체</span>
  <span class="nb">Object</span><span class="p">.</span><span class="nx">setPrototypeOf</span><span class="p">(</span><span class="nx">me</span><span class="p">,</span> <span class="nx">parent</span><span class="p">);</span>

  <span class="c1">//Person 생성자 함수와 parent 객체는 연결되어 있지 않다. -&gt; 프로토타입 교체 때문</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">===</span> <span class="nx">parent</span><span class="p">);</span> <span class="c1">// false</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">parent</span><span class="p">.</span><span class="kd">constructor</span> <span class="o">===</span> <span class="nx">Person</span><span class="p">);</span> <span class="c1">// false</span>

  <span class="c1">// parent 객체를 Person 생성자 함수와 prototype 프로퍼티에 바인딩한다.</span>
  <span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nx">parent</span><span class="p">;</span>

  <span class="c1">// Person.prototype이 me 객체의 프로토타입 체인 상에 존재하므로 true로 평가된다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">me</span> <span class="k">instanceof</span> <span class="nx">Person</span><span class="p">);</span> <span class="c1">// true</span>

  <span class="c1">// Object.prototype이 me 객체의 프로토타입 체인 상에 존재하므로 true로 평가된다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">me</span> <span class="k">instanceof</span> <span class="nb">Object</span><span class="p">);</span> <span class="c1">// true</span>
</code></pre></div></div>
<p>instanceof 연산자는 프로토타입의 constructor 프로퍼티가 가리키는 생성자 함수를 찾는 것이 아니라 <code class="language-plaintext highlighter-rouge">생성자 함수의 prototype에 바인딩된 객체가 프로토타입 체인 상에 존재하는지 확인</code>한다.
(그림 19-23)</p>

<h2 id="1911-직접-상속">19.11 직접 상속</h2>
<h3 id="19111-objectcreate에-의한-직접-상속">19.11.1 Object.create에 의한 직접 상속</h3>
<p>Object.create 메서드는 명시적으로 프로토타입을 지정하여 새로운 객체를 생성한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="cm">/**
   * 지정된 프로토타입 및 프로퍼티를 갖는 새로운 객체를 생성하여 반환한다.
   * @param {object} prototype - 생성할 객체의 프로토타입으로 지정할 객체
   * @param {object} [propertiesObject] - 생성할 객체의 프로퍼티를 갖는 객체
   * @return {object} 지정된 프로토타입 및 프로퍼티를 갖는 새로운 객체
  */</span>
  <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">prototype</span><span class="p">[,</span> <span class="nx">propertiesObject</span><span class="p">])</span>
</code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 프로토타입이 null인 샛체를 생성한다. 생성된 객체는 프로토타입 체인의 종점에 위치한다.</span>
  <span class="c1">// obj -&gt; null</span>
  <span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">getPrototypeOf</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="o">===</span> <span class="kc">null</span><span class="p">);</span> <span class="c1">// true</span>
  <span class="c1">// Object.prototype을 상속받지 못한다.</span>
  <span class="c1">// console.log(obj.toString()); // TypeError: obj.toString is not a function</span>

  <span class="c1">// obj -&gt; Object.prototype -&gt; null</span>
  <span class="c1">// obj = {};와 동일하다</span>
  <span class="nx">obj</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">getPrototypeOf</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="o">===</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">)</span> <span class="c1">// ture</span>

  <span class="c1">// obj -&gt; Object.prototype -&gt; null</span>
  <span class="c1">// obj = { x: 1 };와 동일하다</span>
  <span class="nx">obj</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">x</span><span class="p">:</span> <span class="p">{</span><span class="na">value</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span> <span class="na">writable</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="na">enumerable</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="na">configurable</span><span class="p">:</span> <span class="kc">true</span> <span class="p">}</span>
  <span class="p">});</span>
  <span class="c1">// 위 코드는 아래와 동일하다.</span>
  <span class="c1">// obj = Object.create(Object.prototype);</span>
  <span class="c1">// obj.x = 1;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span> <span class="c1">// 1</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">getPrototypeOf</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="o">===</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span> <span class="c1">// true</span>

  <span class="kd">const</span> <span class="nx">myProto</span> <span class="o">=</span> <span class="p">{</span> <span class="na">x</span><span class="p">:</span> <span class="mi">10</span> <span class="p">};</span> 
  
  <span class="c1">// 임의의 객체를 직접 상속받는다.</span>
  <span class="c1">// obj -&gt; myProto -&gt; Object.prototype -&gt; null</span>
  <span class="nx">obj</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">myProto</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">getPrototype</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="o">===</span> <span class="nx">myProto</span><span class="p">);</span> <span class="c1">// true</span>

  <span class="c1">// 생성자 함수</span>
  <span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="c1">// obj -&gt; Person.prototype -&gt; Object.prototype -&gt; null</span>
  <span class="c1">// obj = new Person('Choi')와 동일하다</span>
  <span class="nx">obj</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span>
  <span class="nx">obj</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span> <span class="c1">// Choi</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">getPrototypeOf</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="o">===</span> <span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span> <span class="c1">//true</span>
</code></pre></div></div>
<p>위 예제처럼 object.create 메서드는 첫 번째 매개변수에 전달한 객체의 프로토타입 체인에 속하는 객체를 생성한다. 즉, 객체를 생성하면 직접적으로 상속을 구현하는 것이다.
Object.create 메서드의 장점</p>
<ul>
  <li>new 연산자가 없이도 객체를 생성할 수 있다.</li>
  <li>프로토타입을 지정하면서 객체를 생성할 수 있다.</li>
  <li>객체 리터럴에 의해 생성된 객체도 상속받을 수 있다.</li>
</ul>

<p>ESLint에서는 Object.prototype의 빌트인 메서드를 객체가 직접 호출하는 것을 권장하지 않는다. 이유는 프로토타입 체인의 종점에 위치하는 객체를 생성할수 있기 때문이다. 프로토타입 체인의 종점에 위치하는 객체는 Object.prototype의 빌트인 메서드를 사용할 수 없다. 따라서 Object.prototype의 빌트인 메서드는 간접적으로 호출하는 것이 좋다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 프로토타입이 null인 객체, 즉 프로토타입 체인의 종점에 위치하는 객체를 생성한다.</span>
  <span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>
  <span class="nx">obj</span><span class="p">.</span><span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">getPrototypeOf</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="o">===</span> <span class="kc">null</span><span class="p">);</span> <span class="c1">// true</span>

  <span class="c1">//obj는 Object.prototype의 빌트인 메서드를 사용할 수 없다.</span>
  <span class="c1">// console.log(obj.hasOwnProperty('a'));</span>
  <span class="c1">// TypeError: obj.hasOwnProperty is not a function</span>

  <span class="c1">// Object.prototype의 빌트인 메서드 간접 호출</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="dl">'</span><span class="s1">a</span><span class="dl">'</span><span class="p">));</span> <span class="c1">// true</span>
</code></pre></div></div>

<h3 id="19112-객체-리터럴-내부에서-__proto__에-의한-직접-상속">19.11.2 객체 리터럴 내부에서 __proto__에 의한 직접 상속</h3>
<p>ES6에서는 객체 리터럴 내부에서 __proto__ 접근자 프로퍼티를 사용하여 직접 상속을 구현할 수 있다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">myProto</span> <span class="o">=</span> <span class="p">{</span> <span class="na">x</span><span class="p">:</span> <span class="mi">10</span> <span class="p">};</span>
  <span class="c1">// 객체 리터럴에 의해 객체를 생성하면서 프로토타입을 지정하여 직접 상속받을 수 있다.</span>
  <span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">y</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span>
    <span class="c1">// 객체를 직접 상속받는다.</span>
    <span class="c1">// obj -&gt; mwProto -&gt; Object.prototype -&gt; null</span>
    <span class="na">__proto__</span><span class="p">:</span> <span class="nx">myProto</span>
  <span class="p">};</span>
  <span class="cm">/*
  위 코드는 아래와 동일하다.
  const obj = Object.create(myProto, {
    y: {value: 20, writable: ture, enumerable: true, configuable: true}
  });
  */</span>

 <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span> <span class="c1">// 10 20</span>
 <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">getPrototypeOf</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="o">===</span> <span class="nx">myProto</span><span class="p">);</span> <span class="c1">// ture</span>
</code></pre></div></div>

<h2 id="1912-정적-프로퍼티메서드">19.12 정적 프로퍼티/메서드</h2>
<p>정적 프로퍼티/메서드는 생성자 함수로 인스턴스를 생성하지 않아도 참조/호출할 수 있는 프로퍼티/메서드를 말한다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 생성자 함수</span>
  <span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="c1">// 프로토타입 메서드</span>
  <span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">sayHello</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Hi! My name is </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
  <span class="p">}</span>
  
  <span class="c1">// 정적 프로퍼티</span>
  <span class="nx">Person</span><span class="p">.</span><span class="nx">staticProp</span> <span class="o">=</span> <span class="s2">`static prop`</span> <span class="p">;</span>

  <span class="c1">// 정적 메서드</span>
  <span class="nx">Person</span><span class="p">.</span><span class="nx">staticMethod</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`staticMethod`</span><span class="p">);</span>
  <span class="p">};</span>

  <span class="kd">const</span> <span class="nx">me</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span><span class="p">);</span>

  <span class="c1">// 생성자 함수에 추가한 정적 프로퍼티/메서드는 생성자 함수로 참조/호출한다.</span>
  <span class="nx">Person</span><span class="p">.</span><span class="nx">staticMethod</span><span class="p">();</span> <span class="c1">// staticMethod</span>

  <span class="c1">// 정적 프로퍼티/메서드는 생성자 함수가 생성한 인스턴스로 참조/호출할 수 없다.</span>
  <span class="c1">// 인스턴스로 참조/호출할 수 있는 프로퍼티/메서드는 프로토타입 체인 상에 존재해야 한다.</span>
  <span class="nx">me</span><span class="p">.</span><span class="nx">staticMethod</span><span class="p">();</span> <span class="c1">// TypeError: me.staticMethod is not a function</span>
</code></pre></div></div>

<p>(그림 19-24)<br />
정적 프로퍼티/메서드는 인스턴스의 프로토타입 체인에 속한 객체의 프로퍼티/메서드가 아니므로 인스턴스로 접근할 수 없다.<br />
Object.create는 Object 생성자 함수의 정적 메서드이기 때문에 인스턴스, 즉 Object 생성자 함수가 생성한 객체로 호출할 수 없다.
반면에 Object.prototype.hasOwnProperty 메서드는 Object.prototype의 메서드로 모든 객체의 프로토타입 체인의 종점이기 때문에 모든 객체가 호출할 수 있다.</p>

<p>만약 인스턴스/프로토타입 메서드 내에서 this를 사용하지 않는다면 그 메서드는 정적 메서드로 변경할 수 있다. 메서드 내에서 인스턴스를 참조할 필요가 없다면 정적 메서드로 변경하여도 동작한다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">Foo</span><span class="p">()</span> <span class="p">{}</span>
  
  <span class="c1">// 프로토타입 메서드</span>
  <span class="c1">// this를 참조하지 않는 프로토타입 메서드는 정적 메서드로 변경하여도 동일한 효과를 얻을 수 있다.</span>
  <span class="nx">Foo</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">x</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">};</span>

  <span class="kd">const</span> <span class="nx">foo</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Foo</span><span class="p">();</span>
  <span class="c1">// 프로토타입 메서드를 호출하려면 인스턴스를 생성해야 한다.</span>
  <span class="nx">foo</span><span class="p">.</span><span class="nx">x</span><span class="p">();</span> <span class="c1">// x</span>

  <span class="c1">// 정적 메서드</span>
  <span class="nx">Foo</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">x</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="c1">// 정적 메서드는 인스턴스를 생성하지 않아도 호출할 수 있다.</span>
  <span class="nx">Foo</span><span class="p">.</span><span class="nx">x</span><span class="p">();</span> <span class="c1">// x</span>
</code></pre></div></div>

<p>MDN 문서를 참고하면 다음과 같이 표기법만드로도 정적 프로퍼티/메서드와 프로토타입 프로퍼티/메서드를 구별할 수 있다.<br />
(그림 19-25)<br />
참고로 프로토타입 프로퍼티/메서드를 표기할떄 prototype을 #으로 표기하는 경우도 있다. -&gt; Object#isPrototypeOf</p>

<h2 id="1913-프로퍼티-존재-확인">19.13 프로퍼티 존재 확인</h2>
<h3 id="19131-in-연산자">19.13.1 in 연산자</h3>
<p>in 연산자는 객체 내에 특정 프로퍼티가 존재하는지 여부를 확인한다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="cm">/**
   * key: 프로퍼티 키를 나타내는 문자열
   * object: 객체로 평가되는 표현식
  */</span>
  <span class="nx">key</span> <span class="k">in</span> <span class="nx">object</span>
</code></pre></div></div>
<p>in 연산자 대신 ES6에서 도입된 Reflect.has 메서드를 사용할 수도 있다.</p>
<h3 id="objectprototypehasownproperty-메서드">Object.prototype.hasOwnProperty 메서드</h3>]]></content><author><name>Hyejic</name></author><category term="js" /><category term="javascript" /><summary type="html"><![CDATA[모던 자바스크립트 Deep Dive 19장 프로토 타입 내용 정리]]></summary></entry><entry><title type="html">18장 함수와 일급 객체</title><link href="http://localhost:4000/js/modernJS18/" rel="alternate" type="text/html" title="18장 함수와 일급 객체" /><published>2022-05-08T00:00:00+09:00</published><updated>2022-05-08T00:00:00+09:00</updated><id>http://localhost:4000/js/modernJS18</id><content type="html" xml:base="http://localhost:4000/js/modernJS18/"><![CDATA[<p><br /></p>

<h1 id="18장-함수와-일급-객체">18장 함수와 일급 객체</h1>
<h2 id="181-일급-객체">18.1 일급 객체</h2>
<p>다음과 같은 조건을 만족하는 객체를 일급 객체라 한다.</p>
<ol>
  <li>무명의 리터럴로 생성할 수 있다. 즉 런타임에 생성이 가능</li>
  <li>변수나 자료구조에 저장할 수 있다.</li>
  <li>함수의 매개변수에 전달할 수 있다.</li>
  <li>함수의 반환값으로 사용할 수 있다.</li>
</ol>]]></content><author><name>Hyejic</name></author><category term="js" /><category term="javascript" /><summary type="html"><![CDATA[모던 자바스크립트 Deep Dive 18장 함수와 일급 객체 내용 정리]]></summary></entry><entry><title type="html">17장 생성자 함수에 의한 객체 생성</title><link href="http://localhost:4000/js/modernJS17/" rel="alternate" type="text/html" title="17장 생성자 함수에 의한 객체 생성" /><published>2022-05-04T00:00:00+09:00</published><updated>2022-05-04T00:00:00+09:00</updated><id>http://localhost:4000/js/modernJS17</id><content type="html" xml:base="http://localhost:4000/js/modernJS17/"><![CDATA[<p><br /></p>

<h1 id="17장-생성자-함수에-의한-객체-생성">17장 생성자 함수에 의한 객체 생성</h1>

<h2 id="171-object-생성자-함수">17.1 Object 생성자 함수</h2>
<p>new 연산자와 함께 Object 생성자 함수를 호출하면 빈 객체를 생성하여 반환한다. 생성자 함수에 의해 생성된 객체를 인스턴스라 한다.
객체를 생성하는 방법은 객체 리터럴을 사용하는 것이 더 간편하다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 빈 객체의 생성</span>
  <span class="kd">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">();</span>
  <span class="nx">person</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span> <span class="c1">// {name: "Choi"}</span>
</code></pre></div></div>
<p>자바스크립트는 Object 생성자 함수 이외에도 String, Number, Boolean, Function, Array, Date, RegExp, Promise 등의 빌트인 생성자 함수를 제공한다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">strObj</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">String</span><span class="p">(</span><span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">strObj</span><span class="p">);</span> <span class="c1">// object</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">strObj</span><span class="p">);</span> <span class="c1">// String{"Choi"}</span>

  <span class="kd">const</span> <span class="nx">numObj</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Number</span><span class="p">(</span><span class="mi">123</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">numObj</span><span class="p">);</span> <span class="c1">// object</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">numObj</span><span class="p">);</span> <span class="c1">// Number{123}</span>

  <span class="kd">const</span> <span class="nx">boolObj</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Boolean</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">boolObj</span><span class="p">);</span> <span class="c1">// object</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">boolObj</span><span class="p">);</span> <span class="c1">// Boolean{true}</span>

  <span class="kd">const</span> <span class="nx">func</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Function</span><span class="p">(</span><span class="dl">'</span><span class="s1">x</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">return x * x</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">func</span><span class="p">);</span> <span class="c1">// function</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">dir</span><span class="p">(</span><span class="nx">func</span><span class="p">);</span> <span class="c1">// f anonymous(x)</span>

  <span class="kd">const</span> <span class="nx">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">arr</span><span class="p">);</span> <span class="c1">// object</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr</span><span class="p">);</span> <span class="c1">// [1, 2, 3]</span>

  <span class="c1">// RegExp 객체(정규표현식) 생성</span>
  <span class="kd">const</span> <span class="nx">regExp</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">RegExp</span><span class="p">(</span><span class="sr">/ab+c/i</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">regExp</span><span class="p">);</span> <span class="c1">// object</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">regExp</span><span class="p">);</span> <span class="c1">// /ab+c/i</span>

  <span class="kd">const</span> <span class="nx">date</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">();</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">date</span><span class="p">);</span> <span class="c1">// object</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">date</span><span class="p">);</span> <span class="c1">// Wed May 04 2022 14:46:45 GMT+0900 (한국 표준시)</span>
</code></pre></div></div>

<h3 id="172-생성자-함수">17.2 생성자 함수</h3>
<h3 id="1721-객체-리터럴에-의한-객체-생성-방식의-문제점">17.2.1 객체 리터럴에 의한 객체 생성 방식의 문제점</h3>
<p>객체 리터럴에 의한 객체 생성 방식은 단 하나의 객체만 생성한다. 동일한 프로퍼티를 갖는 객체를 여러개 생성해야 하는 경우 매번 같은 프로퍼티를 기술해야 하기 떄문에 비효율적이다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">circle1</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">radius</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span>
    <span class="nx">getDiameter</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="mi">2</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">};</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">circle1</span><span class="p">.</span><span class="nx">getDiameter</span><span class="p">());</span> <span class="c1">// 10</span>

  <span class="kd">const</span> <span class="nx">circle2</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">radius</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span>
    <span class="nx">getDiameter</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="mi">2</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">};</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">circle2</span><span class="p">.</span><span class="nx">getDiameter</span><span class="p">());</span> <span class="c1">// 20</span>
</code></pre></div></div>
<p>위 예제에서 원을 표현한 객체인 circle1 객체와 circle2 객체는 객체 고유의 상태 데이터인 radius는 값이 다르지만, 프로퍼티 구조와 getDiameter 메서드가 동일하다. 이렇게 동일한 내용의 메서드를 가진 객체를 여러개 생성하여 사용하는것은 비효율적이다.</p>

<h3 id="1722-생성자-함수에-의한-객체-생성-방식의-장점">17.2.2 생성자 함수에 의한 객체 생성 방식의 장점</h3>
<p>프로퍼티 구조가 동일한 객체 여러 개를 간편하게 생성할 수 있다. 일반 함수와 동일한 방법으로 생성자 함수를 정의하고 <code class="language-plaintext highlighter-rouge">new 연산자와 함께 호출하면 해당 함수는 생성자 함수로 동작</code>한다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">Circle</span><span class="p">(</span><span class="nx">radius</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">radius</span> <span class="o">=</span> <span class="nx">radius</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">getDimeter</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="mi">2</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="p">;</span>
    <span class="p">};</span>
  <span class="p">}</span>
  <span class="c1">// 인스턴스 생성</span>
  <span class="kd">const</span> <span class="nx">circle1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Circle</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">circle2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Circle</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">circle1</span><span class="p">);</span> <span class="c1">// Circle {radius: 5, getDimeter: ƒ}</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">circle2</span><span class="p">);</span> <span class="c1">// Circle {radius: 10, getDimeter: ƒ}</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">circle1</span><span class="p">.</span><span class="nx">getDimeter</span><span class="p">());</span> <span class="c1">// 10</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">circle2</span><span class="p">.</span><span class="nx">getDimeter</span><span class="p">());</span> <span class="c1">// 20</span>


  <span class="kd">const</span> <span class="nx">circle3</span> <span class="o">=</span> <span class="nx">Circle</span><span class="p">(</span><span class="mi">30</span><span class="p">);</span> <span class="c1">// new 연사자와 함께 호출하지 않으면 일반 함수로 동작한다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">circle3</span><span class="p">);</span> <span class="c1">// undefined</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">radius</span><span class="p">);</span> <span class="c1">// 30</span>
</code></pre></div></div>

<h3 id="1723-생성자-함수의-인스턴스-생성-과정">17.2.3 생성자 함수의 인스턴스 생성 과정</h3>
<p>생성자 함수의 역할은 프로퍼티 구조가 동일한 인스터스를 생성하기 위한 템플릿으로서 동작하여 인스턴스를 생성하는 것과 생성된 인스턴스를 초기화(인스턴스 프로퍼티 추가 및 초기값 할당)하는 것이다. 자바스크립트 엔진은 다음과 같은 과정을 거쳐 암묵적인 처리를 통해 인스턴스를 생성하고 반환한다.</p>

<h4 id="1-인스턴스-생성과-this-바인딩">1. 인스턴스 생성과 this 바인딩</h4>
<p>암묵적으로 빈 객체 생성. 이 빈 객체가 생성자 함수가 생성한 인스턴스다. 그리고 인스턴스는 this에 바인딩 된다. 이 처리는 런타임 이전에 실행된다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">Circle</span><span class="p">(</span><span class="nx">radius</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 1. 암묵적 인스턴스 생성과 this 바인딩</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">);</span> <span class="c1">// Circle {}</span>

    <span class="k">this</span><span class="p">.</span><span class="nx">radius</span> <span class="o">=</span> <span class="nx">radius</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">getDimeter</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="mi">2</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="p">;</span>
    <span class="p">};</span>
  <span class="p">}</span>

  <span class="kd">const</span> <span class="nx">circle</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Circle</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span> 
</code></pre></div></div>

<h4 id="2-인스턴스-초기화">2. 인스턴스 초기화</h4>
<p>this에 바인딩되어 있는 인스턴스에 프로퍼티나 메서드를 추가하고 생성자 함수가 인수로 전달받은 초기값을 인스턴스 프로퍼티에 할당하여 초기화 하거나 고정값을 할당한다. 이 처리는 개발자가 기술.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">Circle</span><span class="p">(</span><span class="nx">radius</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 1. 암묵적 인스턴스 생성과 this 바인딩</span>

    <span class="c1">// 2. this에 바인딩 되어 있는 인스턴스를 초기화</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">radius</span> <span class="o">=</span> <span class="nx">radius</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">getDimeter</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="mi">2</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="p">;</span>
    <span class="p">};</span>
  <span class="p">}</span>

  <span class="kd">const</span> <span class="nx">circle</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Circle</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span> 
</code></pre></div></div>

<h4 id="3-인스턴스-반환">3. 인스턴스 반환</h4>
<p>생성자 함수 내부의 모든 처리가 끝나면 완성된 인스턴스가 바인딩된 this가 암묵적으로 반환된다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">Circle</span><span class="p">(</span><span class="nx">radius</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 1. 암묵적 인스턴스 생성과 this 바인딩</span>

    <span class="c1">// 2. this에 바인딩 되어 있는 인스턴스를 초기화</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">radius</span> <span class="o">=</span> <span class="nx">radius</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">getDimeter</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="mi">2</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="p">;</span>
    <span class="p">};</span>

    <span class="c1">// 3. 완성된 인스턴스가 바인딩된 this가 암묵적으로 반환</span>
    <span class="c1">// return {} // 명시적으로 객체를 반환하면 this 반환이 무시된다.</span>
  <span class="p">}</span>

  <span class="c1">// 인스턴스 생성. Circle 생성자 함수는 암묵적으로 this를 반환</span>
  <span class="kd">const</span> <span class="nx">circle</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Circle</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span> 
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">circle</span><span class="p">);</span> <span class="c1">// Circle {radius: 5, getDimeter: ƒ}</span>
</code></pre></div></div>
<p>생성자 함수 내부에서 명시적으로 다른 값을 반환하는 것은 생성자 함수의 기본 동작을 훼손한다. 따라서 return 문을 반드시 생략해야 한다.</p>

<h3 id="1724-내부-메서드call과-construct">17.2.4 내부 메서드[[call]]과 [[Construct]]</h3>
<p>함수는 객체이지만 일반 객체과는 다르다. 일반 객체는 호출할 수 없지만 함수는 호출할 수 있다. 따라서 함수는 내부 슬롯과 내부 메서드는 물론, 함수로서 동작하기 위해 함수 각체만을 위한 [[Ebvironment]], [[FormalParameters]] 등의 내부 슬롯과 [[Call]], [[Construct]] 같은 내부 메서드를 추가로 가지고있다. 일반 함수로서 호출되면 함수 객체의 내부 메서드 [[Call]]이 호출되고, new 연산와 함께 생성자 함수로서 호출하면 [[Construct]]가 호출된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{}</span>

  <span class="nx">foo</span><span class="p">();</span> <span class="c1">// 일반 함수로서 호출되면 [[Call]]이 호출</span>

  <span class="k">new</span> <span class="nx">foo</span><span class="p">();</span> <span class="c1">// 생성자 함수로서 호출하면 [[Construct]]가 호출</span>
</code></pre></div></div>

<p>[[Call]]울 갖는 함수 객체를 callable<br />
[[Construct]]를 갖는 함수 객체를 constructor<br />
[[Construct]]를 갖지 않는 함수 객체를 non-constructor<br />
callable - 호출할 수 있는 객체, 즉 함수<br />
constructor - 생성자 함수로서 호출할 수 있는 함수<br />
constructor - 생성자 함수로서 호출할 수 없는 함수<br />
함수 객체는 반드시 callable이면서 constructor이거나 callable이면서 non-constructor다. 즉 모든 함수 객체는 호출할 수 있지만 모든 함수 객체를 생성자 함수로서 호출할 수 있는 것은 아니다.</p>

<p>(그림 17-1)</p>

<h3 id="1725-constructor와-non-constructor의-구분">17.2.5 constructor와 non-constructor의 구분</h3>
<p>자바스크립트 엔진은 함수 정의를 평가하여 함수 객체를 생성할 때 함수 정의 방식에 따라 함수를 constructor와 non-constructor로 구분한다.</p>
<ul>
  <li>constructor : 함수 선언문, 함수 표현식, 클래스(클래스도 함수다)</li>
  <li>non-constructor : 메서드(ES6의 축약 표현), 화살표 함수</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 일반 함수 정의 : 함수 선언문, 함수 표현식</span>
  <span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{}</span>
  <span class="kd">const</span> <span class="nx">bar</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{};</span>
  <span class="c1">// 프로퍼티 x의 값으로 할단된 것은 일반 함수로 정의된 함수다. 이는 메서드로 인정하지 않는다.</span>
  <span class="kd">const</span> <span class="nx">baz</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">x</span><span class="p">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{}</span>
  <span class="p">}</span>
  <span class="c1">// 일반함수로 정의된 함수만이 constructor다.</span>
  <span class="k">new</span> <span class="nx">foo</span><span class="p">();</span> <span class="c1">// -&gt; foo {}</span>
  <span class="k">new</span> <span class="nx">bar</span><span class="p">();</span> <span class="c1">// -&gt; bar {}</span>
  <span class="k">new</span> <span class="nx">baz</span><span class="p">.</span><span class="nx">x</span><span class="p">();</span> <span class="c1">// -&gt; x {}</span>

  <span class="c1">// 화살표 함수 정의</span>
  <span class="kd">const</span> <span class="nx">arrow</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{};</span>
  <span class="k">new</span> <span class="nx">arrow</span><span class="p">();</span> <span class="c1">// TypeError: arrow is not a constructor</span>

  <span class="c1">// 메서드 정의: ES6의 메서드 축약 표현만 메서드로 인정한다.</span>
  <span class="c1">//  function x() {</span>
  <span class="c1">//   console.log</span>
  <span class="c1">// }</span>
  <span class="c1">// const obj = {x}</span>
  <span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">x</span><span class="p">()</span> <span class="p">{}</span>
  <span class="p">}</span>
  <span class="k">new</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">x</span><span class="p">();</span> <span class="c1">// TypeError: obj.x is not a constructor</span>
</code></pre></div></div>
<p>함수 정의 방식에 따라 constructor와 non-constructor를 구분한다.</p>

<h3 id="1726-new-연산자">17.2.6 new 연산자</h3>
<p>new 연산자와 함께 함수를 호출하면 해당 함수는 생서자 함수로 동작한다. new 연산자와 함께 호출하는 함수는 constructor이어야 한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 생성자 함수로서 정의하지 않는 일반 함수</span>
  <span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="c1">// 생성자 함수로서 정의하지 않은 일반 함수를 new 연산자와 함께 호출</span>
  <span class="kd">let</span> <span class="nx">inst</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">add</span><span class="p">();</span>

  <span class="c1">// 함수가 객체를 반환하지 않았으므로 반환문이 무시된다. 따라서 빈 객체가 생성되어 반환된다.</span>
  <span class="nx">consloe</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">inst</span><span class="p">);</span> <span class="c1">// {}</span>

  <span class="c1">// 객체를 반환하는 일반 함수</span>
  <span class="kd">function</span> <span class="nx">createUser</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">role</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">{</span><span class="nx">name</span><span class="p">,</span> <span class="nx">role</span><span class="p">};</span>
  <span class="p">}</span>

  <span class="c1">// 일반함수를 new 연산자와 함께 호출</span>
  <span class="nx">inst</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">createUser</span><span class="p">(</span><span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">admin</span><span class="dl">'</span><span class="p">);</span>
  <span class="c1">// 함수가 생성한 객체를 반환한다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">inst</span><span class="p">);</span> <span class="c1">// {name: "Choi", role: "admin"}</span>
</code></pre></div></div>

<p>new 연산자 없이 함수를 호출하면 일반 함수로 호출된다. -&gt; [[Call]]이 호출</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">Circle</span><span class="p">(</span><span class="nx">radius</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">radius</span> <span class="o">=</span> <span class="nx">radius</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">getDimeter</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="mi">2</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="p">;</span>
    <span class="p">};</span>
  <span class="p">}</span>

  <span class="c1">// new 연산자 없이 생성자 함수 호출 -&gt; 일반 함수 호출</span>
  <span class="kd">const</span> <span class="nx">circle</span> <span class="o">=</span> <span class="nx">Circle</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span> 
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">circle</span><span class="p">);</span> <span class="c1">// undefined</span>

  <span class="c1">// 일반 함수의 this는 전역 객체 window를 가리킨다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">radius</span><span class="p">);</span> <span class="c1">// 5</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">getDimeter</span><span class="p">());</span> <span class="c1">//10</span>

  <span class="nx">circle</span><span class="p">.</span><span class="nx">getDimeter</span><span class="p">();</span> <span class="c1">//  TypeError: Cannot read properties of undefined</span>
</code></pre></div></div>
<p>위 에제에서 radius 프로퍼티와 getDiameter 메서드는 전역객체의 프로퍼티와 메서드가 된다.<br />
일반 함수와 생성자 함수에 특별한 형식적 차이가 없으므로 생성자 함수는 일반적으로 첫 문자를 대문자로 기술하는 파스칼 케이스로 명명하여 일반 함수과 구별할 수 있도록 해야한다.</p>

<h3 id="1727-newtarget">17.2.7 new.target</h3>
<p>ES6는 new.target을 지원<br />
new.target은 this와 유사하게 construtor인 모든 함수 내부에서 암묵적인 지역 변수와 같이 사용되며 메타 프로퍼티라고 부른다.
함수 내부에서 new.target을 사용하면 new 연산자와 함께 생성자 함수로서 호출되었는지 확인할 수 있다.<br />
new 연산자와 함께 생성자 함수로서 호출되면 함수 내부의 new.target은 함수 자신을 가리킨다. new 연산자 없이 일반 함수로서 호출된 함수 내부의 new.target은 undefined다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">Circle</span><span class="p">(</span><span class="nx">radius</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">new</span><span class="p">.</span><span class="nx">target</span><span class="p">){</span>
      <span class="k">return</span> <span class="k">new</span> <span class="nx">Circle</span><span class="p">(</span><span class="nx">radius</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">radius</span> <span class="o">=</span> <span class="nx">radius</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">getDimeter</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="mi">2</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="p">;</span>
    <span class="p">};</span>
  <span class="p">}</span>

  <span class="c1">// new 연산자 없이 생성자 함수 호출해도 new.target을 통해 생성자 함수로서 호출</span>
  <span class="kd">const</span> <span class="nx">circle</span> <span class="o">=</span> <span class="nx">Circle</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span> 
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">circle</span><span class="p">.</span><span class="nx">getDimeter</span><span class="p">());</span> 
</code></pre></div></div>

<p>빌트인 생성자 함수(Object, String, Number, Boolean, Function, Array, Date, RegExp, Promise 등)는 new 연산자와 함께 호출되었는지를 확인한 후 적절한 값을 반환한다.<br />
Object, function 생성자 함수는 new 연산자가 없거나 있는경우 모두 동일하게 동작.<br />
String, Number, Boolean 생성자 함수는 new 연산자 없이 호출하면 문자열, 숫자, 불리언 값을 반환. -&gt; 데이터 타입 변환 가능</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">();</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span> <span class="c1">// {}</span>

  <span class="nx">obj</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">();</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span> <span class="c1">// {}</span>

  <span class="kd">let</span> <span class="nx">func</span> <span class="o">=</span> <span class="k">new</span> <span class="kd">function</span><span class="p">(</span><span class="dl">'</span><span class="s1">x</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">return x * x</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">func</span><span class="p">);</span> <span class="c1">// f anonymous(x) {return x * x}</span>

  <span class="nx">func</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="dl">'</span><span class="s1">x</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">return x * x</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">func</span><span class="p">);</span> <span class="c1">// f anonymous(x) {return x * x}</span>

  <span class="kd">const</span> <span class="nx">str</span> <span class="o">=</span> <span class="nb">String</span><span class="p">(</span><span class="mi">123</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">str</span><span class="p">,</span> <span class="k">typeof</span> <span class="nx">str</span><span class="p">);</span> <span class="c1">// 123 string</span>

  <span class="kd">const</span> <span class="nx">num</span> <span class="o">=</span> <span class="nb">Number</span><span class="p">(</span><span class="dl">'</span><span class="s1">123</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">num</span><span class="p">,</span> <span class="k">typeof</span> <span class="nx">num</span><span class="p">);</span> <span class="c1">// 123 number</span>

  <span class="kd">const</span> <span class="nx">bool</span><span class="p">;</span> <span class="o">=</span> <span class="nb">Boolean</span><span class="p">(</span><span class="dl">'</span><span class="s1">true</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">bool</span><span class="p">;,</span> <span class="k">typeof</span> <span class="nx">bool</span><span class="p">;);</span> <span class="c1">// true boolean</span>
</code></pre></div></div>

<h4 id="️-this">⭐️ this</h4>
<p><code class="language-plaintext highlighter-rouge">this</code>는 객체 자신의 프로퍼티나 메서드를 참조하기 위한 자기 참조 변수다. this 바인딩은 함수 호출 방식에 따라 동적으로 결정된다.</p>

<table>
  <thead>
    <tr>
      <th>함수 호출 방식</th>
      <th>this가 가리키는 값 (this 바인딩)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>일반 함수로서 호출</td>
      <td>전역 객체</td>
    </tr>
    <tr>
      <td>메서드로서 호출</td>
      <td>메서드를 호출한 객체(마침표 앞의 객체)</td>
    </tr>
    <tr>
      <td>생성자 함수로서 호출</td>
      <td>생성자 함수가 (미래에) 생성할 인스터스</td>
    </tr>
  </tbody>
</table>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="c1">// 일반 함수 -&gt; 전역 객체</span>
  <span class="nx">foo</span><span class="p">();</span> <span class="c1">// window</span>

  <span class="c1">// 메서드 -&gt; 메서드를 호출한 객체</span>
  <span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="nx">foo</span><span class="p">};</span> <span class="c1">// ES6 프로퍼티 축약 표현</span>
  <span class="nx">obj</span><span class="p">.</span><span class="nx">foo</span><span class="p">();</span> <span class="c1">// obj</span>

  <span class="c1">// 생성자 함수 -&gt; 생성될 인스턴스</span>
  <span class="kd">const</span> <span class="nx">inst</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">foo</span><span class="p">();</span> <span class="c1">// inst</span>

</code></pre></div></div>]]></content><author><name>Hyejic</name></author><category term="js" /><category term="javascript" /><summary type="html"><![CDATA[모던 자바스크립트 Deep Dive 17장 생성자 함수에 의한 객체 생성 내용 정리]]></summary></entry><entry><title type="html">16장 프로퍼티 어트리뷰트</title><link href="http://localhost:4000/js/modernJS16/" rel="alternate" type="text/html" title="16장 프로퍼티 어트리뷰트" /><published>2022-05-02T00:00:00+09:00</published><updated>2022-05-02T00:00:00+09:00</updated><id>http://localhost:4000/js/modernJS16</id><content type="html" xml:base="http://localhost:4000/js/modernJS16/"><![CDATA[<p><br /></p>

<h1 id="16장-프로퍼티-어트리뷰트">16장 프로퍼티 어트리뷰트</h1>

<h2 id="161-내부-슬롯과-내부-메서드">16.1 내부 슬롯과 내부 메서드</h2>
<p>내부 슬롯과 매부 메서드는 자바스크립트 엔진의 구현 알고리즘을 설명하기 위해 ECMAScript 사양에서 사용하는 의사 프로퍼티와 의사 메서드다.<br />
모든 객체는 [[Prototype]]이라는 내부 슬롯을 갖는다. 내부 슬롯은 자바스크립트 엔진의 내부 로직이므로 원칙적으로 직접 접근할 수 없지만 [[Prototype]] 내부 슬록의 경우, <strong>proto</strong> 를 통해 간접적으로 접근 할 수 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">o</span> <span class="o">=</span> <span class="p">{};</span>
  <span class="nx">o</span><span class="p">.[[</span><span class="nx">Prototype</span><span class="p">]]</span> <span class="c1">// SyntaxError: Unexpected token'['</span>
  <span class="nx">o</span><span class="p">.</span><span class="nx">__proto__</span> <span class="c1">// Object.prototype</span>
</code></pre></div></div>

<h3 id="162-프로퍼티-어트리뷰트와-프로퍼티-디스크립터-객체">16.2 프로퍼티 어트리뷰트와 프로퍼티 디스크립터 객체</h3>
<p>자바스크립트 엔진은 프로퍼티를 생성할 때 프로퍼티의 상태를 나타내는 프로퍼티 어트리뷰트를 기본값으로 자동 정의한다.<br />
프로퍼티 어트리뷰트 -&gt; [[Value]], [[Writable]], [[Enumerable]], [[Configurable]]<br />
프로퍼티 어트리뷰트는 내부 슬롯이기 때문에 직접 접근이 불가능하고 Object.getOwnPropertyDescriptor 메서드를 사용하여 간접적으로 접근 가능. 존재하지 않는 프로퍼티는 undefined 반환.<br />
<code class="language-plaintext highlighter-rouge">Object.getOwnPropertyDescriptor</code> 메서드를 호출할 때 매개변수 전달. 첫번째 객체의 참조, 두번째 프로퍼티 키(문자열)<br />
<code class="language-plaintext highlighter-rouge">Object.getOwnPropertyDescriptors</code> 모든 프로퍼티의 프로퍼티 어트리뷰트 정보 제공.(ES8에서 도입)</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span>
  <span class="p">};</span>
  <span class="c1">// 매개변수 전달. 첫번째 객체의 참조, 두번째 프로퍼티 키(문자열)</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">getOwnPropertyDescriptor</span><span class="p">(</span><span class="nx">person</span><span class="p">,</span> <span class="dl">'</span><span class="s1">name</span><span class="dl">'</span><span class="p">));</span> 
  <span class="c1">// {value: 'Choi', writable: true, enumerable: true, configurable: true}</span>

  <span class="c1">// 존재하지 않는 프로퍼티</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">getOwnPropertyDescriptor</span><span class="p">(</span><span class="nx">person</span><span class="p">,</span> <span class="dl">'</span><span class="s1">age</span><span class="dl">'</span><span class="p">));</span> 
  <span class="c1">// undefined</span>

  <span class="nx">person</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="mi">30</span><span class="p">;</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">getOwnPropertyDescriptors</span><span class="p">(</span><span class="nx">person</span><span class="p">));</span> 
  <span class="c1">// age: {value: 30, writable: true, enumerable: true, configurable: true}</span>
  <span class="c1">// name: {value: 'Choi', writable: true, enumerable: true, configurable: true}</span>

</code></pre></div></div>

<h2 id="163-데이터-프로퍼티와-접근자-프로퍼티">16.3 데이터 프로퍼티와 접근자 프로퍼티</h2>
<ul>
  <li>데이터 프로퍼티<br />
키와 값으로 구성된 일반적인 프로퍼티다. 지금까지 살펴본 모든 프로퍼티는 데이터 프로퍼티다.</li>
  <li>접근자 프로퍼티<br />
자체적으로는 값을 갖지 않고 다른 데이터 프로퍼티의 값을 읽거나 저장할 때 호출되는 접근자 함수로 구성된 프로퍼티다.</li>
</ul>

<h3 id="1631-데이터-프로퍼티">16.3.1 데이터 프로퍼티</h3>
<p>자바스크립트 엔진이 프로퍼티를 생성할 때 기본 값으로 자동 정의된다.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">프로퍼티<br />어트리뷰트</th>
      <th style="text-align: center">프로퍼티 디스크립터<br />객체의 프로퍼티</th>
      <th style="text-align: left">설명</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">[[Value]]</td>
      <td style="text-align: center">value</td>
      <td style="text-align: left">- 프로퍼티 키를 통해 <code class="language-plaintext highlighter-rouge">프로퍼티 값에 접근하면 반환</code>되는 값이다.<br /> - 프로퍼티 키를 통해 프로퍼티 값을 변경하면 [[Value]]에 값을 재할당한다. 이때 프로퍼티가 없으면 프로퍼티를 동적 생성하고 생성된 프로퍼티의 [[Value]]에 값을 저장한다.</td>
    </tr>
    <tr>
      <td style="text-align: center">[[Writable]]</td>
      <td style="text-align: center">writable</td>
      <td style="text-align: left">- 프로퍼티 <code class="language-plaintext highlighter-rouge">값의 변경 기능 여부</code>를 나타내며 불리언 값을 갖는다. <br /> [[Writable]]의 값이 false인 경우 해당 프로퍼티의 [[Value]]의 값을 변경할 수 없는 읽기 전용 프로퍼티가 된다.</td>
    </tr>
    <tr>
      <td style="text-align: center">[[Enumerable]]</td>
      <td style="text-align: center">enumerable</td>
      <td style="text-align: left">- 프로퍼티의 <code class="language-plaintext highlighter-rouge">열거 가능 여부</code>를 나타내며 불리언 값을 갖는다. <br /> - [[Enumerable]]의 값이 false인 경우 해당 프로퍼티는 for…in 문이나 Object.keys 메서드 등으로 열거할 수 없다.</td>
    </tr>
    <tr>
      <td style="text-align: center">[[Configurable]]</td>
      <td style="text-align: center">configurable</td>
      <td style="text-align: left">- 프로퍼티의 <code class="language-plaintext highlighter-rouge">재정의 기능 여부</code>를 나타내며 불리언 값을 갖는다. <br /> - [[Configurable]]의 값이 false인 경우 해당 프로퍼티의 삭제, 프로퍼티 어트리뷰트 값이 변경이 금지된다. 단, [[Writable]]이 true인 경우 [[Value]]의 변경과 [[Writable]]을 false로 변경하는 것은 허용된다.</td>
    </tr>
  </tbody>
</table>

<h3 id="1632-접근자-프로퍼티">16.3.2 접근자 프로퍼티</h3>
<p>저채적으로 값을 갖지 않고 다른 데이터 프로퍼티의 값을 읽거나 저장할 때 사용하는 접근자 함수로 구성된 프로퍼티다.<br />
접근자 함수는 getter/setter 함수라고도 부른다.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">프로퍼티<br />어트리뷰트</th>
      <th style="text-align: center">프로퍼티 디스크립터<br />객체의 프로퍼티</th>
      <th style="text-align: left">설명</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">[[Get]]</td>
      <td style="text-align: center">get</td>
      <td style="text-align: left">- 접근자 프로퍼티를 통해 데이터 프로퍼티의 <code class="language-plaintext highlighter-rouge">값을 읽을 때</code> 호출되는 접근자 함수다. 즉, 접근자 프로퍼티 키로 프로퍼티 값에 접근하면 프로퍼티 어트리뷰트 [[Get]]의 값, 즉 getter 함수가 호출되고 그 결과가 프로퍼티 값으로 반환된다.</td>
    </tr>
    <tr>
      <td style="text-align: center">[[Set]]</td>
      <td style="text-align: center">set</td>
      <td style="text-align: left">- 접근자 프로퍼티를 총해 데이터 프로퍼티의 <code class="language-plaintext highlighter-rouge">값을 저장할 때</code> 호출되는 접근다 함수다. 즉, 접근자 프로퍼티 값을 저장하면 프로퍼티 어트리뷰트 [[Set]]의 값, 즉 setter 함수가 호출되고 그 결과가 프로퍼티 값으로 저장된다.</td>
    </tr>
    <tr>
      <td style="text-align: center">[[Enumerable]]</td>
      <td style="text-align: center">enumerable</td>
      <td style="text-align: left">- 프로퍼티의 <code class="language-plaintext highlighter-rouge">열거 가능 여부</code>를 나타내며 불리언 값을 갖는다. <br /> - [[Enumerable]]의 값이 false인 경우 해당 프로퍼티는 for…in 문이나 Object.keys 메서드 등으로 열거할 수 없다.</td>
    </tr>
    <tr>
      <td style="text-align: center">[[Configurable]]</td>
      <td style="text-align: center">configurable</td>
      <td style="text-align: left">- 프로퍼티의 <code class="language-plaintext highlighter-rouge">재정의 기능 여부</code>를 나타내며 불리언 값을 갖는다. <br /> - [[Configurable]]의 값이 false인 경우 해당 프로퍼티의 삭제, 프로퍼티 어트리뷰트 값이 변경이 금지된다. 단, [[Writable]]이 true인 경우 [[Value]]의 변경과 [[Writable]]을 false로 변경하는 것은 허용된다.</td>
    </tr>
  </tbody>
</table>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">firstName</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Hyeji</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">lastName</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span><span class="p">,</span>
  
    <span class="c1">// getter 함수</span>
    <span class="kd">get</span> <span class="nx">fullName</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="s2">`</span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">firstName</span><span class="p">}</span><span class="s2"> </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">lastName</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span>
    <span class="p">},</span>

    <span class="c1">// setter 함수</span>
    <span class="kd">set</span> <span class="nx">fullName</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
      <span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">firstName</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span><span class="p">]</span> <span class="o">=</span> <span class="nx">name</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="dl">'</span><span class="s1"> </span><span class="dl">'</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">};</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">+</span> <span class="dl">'</span><span class="s1"> </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">person</span><span class="p">.</span><span class="nx">lastName</span><span class="p">);</span> <span class="c1">// Hyeji Choi</span>

  <span class="c1">// 접근자 프로퍼티 fullName에 값을 저장하면 setter함수가 호출</span>
  <span class="nx">person</span><span class="p">.</span><span class="nx">fullName</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Hyeji Kim</span><span class="dl">"</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span> <span class="c1">// {firstName: 'Hyeji', lastName: 'Kim'}</span>

  <span class="c1">// 접근자 프로퍼티 fullName에 접근하면 getter 함수가 호출된다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">fullName</span><span class="p">);</span> <span class="c1">// Hyeji Kim</span>

  <span class="c1">// firstName은 데이터 프로퍼티다.</span>
  <span class="kd">let</span> <span class="nx">descriptor</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">getOwnPropertyDescriptor</span><span class="p">(</span><span class="nx">person</span><span class="p">,</span> <span class="dl">'</span><span class="s1">firstName</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">descriptor</span><span class="p">);</span> 
  <span class="c1">// {value: 'Hyeji', writable: true, enumerable: true, configurable: true}</span>

  <span class="c1">// fullName은 접근자 프로퍼티</span>
  <span class="nx">descriptor</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">getOwnPropertyDescriptor</span><span class="p">(</span><span class="nx">person</span><span class="p">,</span> <span class="dl">'</span><span class="s1">fullName</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">descriptor</span><span class="p">);</span> 
  <span class="c1">// {enumerable: true, configurable: true, get: ƒ, set: ƒ}</span>

</code></pre></div></div>

<p>접근자 프로퍼티 fullName으로 프로퍼티 값에 접근하면 내부적으로 [[Get]] 내부 메서드가 호출되어 다음과 같이 동작한다.</p>
<ol>
  <li>프로퍼티 키가 유효한지 확인한다. 프포퍼티 키는 문자열 또는 심벌이어야 한다. 프로퍼티 키 “fullName”은 문자열이므로 유효한 프로퍼티 키다.</li>
  <li>프로토타입 체인에서 프로퍼티를 검색한다. person 객체에 fullName으로 프로퍼티가 존재한다.</li>
  <li>검색된 fullName 프로퍼티가 에이터 프로퍼티인지 접근자 프로퍼티인지 확인한다. fullName 프로퍼티는 접근자 프로퍼티다.</li>
  <li>접근자 프로퍼티 fullName의 프로퍼티 어트리뷰트 [[Get]]의 값, 즉 getter 함수를 호출하여 그 결과를 반환한다. 프로퍼티 fullName의 프로퍼티 어트리뷰트 [[Get]]의 값은 Object.getOwnPropertyDescriptor 메서드가 반환하는 프로퍼티 디스크립터 객체의 get 프로퍼티 값과 같다.</li>
</ol>

<h2 id="164-프로퍼티-정의">16.4 프로퍼티 정의</h2>
<p>Object.defineProperty 메서드를 사용하면 프로퍼티의 어트리뷰트를 정의할 수 있다. 인수로는 객체의 참조와 데이터 프로퍼티의 키인 문자열, 프로퍼티 디스크립터 객체를 전달한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{};</span>

  <span class="c1">// 데이터 프로퍼티 정의</span>
  <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">person</span><span class="p">,</span> <span class="dl">'</span><span class="s1">firstName</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">value</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Hyeji</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">writable</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="na">enumerable</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="na">configurable</span><span class="p">:</span> <span class="kc">true</span>
  <span class="p">});</span>

  <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">person</span><span class="p">,</span> <span class="dl">'</span><span class="s1">lastName</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">value</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span>
  <span class="p">});</span>

  <span class="kd">let</span> <span class="nx">descriptor</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">getOwnPropertyDescriptor</span><span class="p">(</span><span class="nx">person</span><span class="p">,</span> <span class="dl">'</span><span class="s1">firstName</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">descriptor</span><span class="p">);</span>
  <span class="c1">// {value: 'Hyeji', writable: true, enumerable: false, configurable: true}</span>

  <span class="c1">// 디스크립터 객체의 프포퍼티를 누락시키면 undefined, false가 기본값이다.</span>
  <span class="nx">descriptor</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">getOwnPropertyDescriptor</span><span class="p">(</span><span class="nx">person</span><span class="p">,</span> <span class="dl">'</span><span class="s1">lastName</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">descriptor</span><span class="p">);</span>
  <span class="c1">// {value: 'Choi', writable: false, enumerable: false, configurable: false}</span>
  
  <span class="c1">// [[Enumerable]]의 값이 false인 경우</span>
  <span class="c1">// 해당 프로퍼티는 for...in문이나 Object.keys 등으로 열거할 수 없다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">person</span><span class="p">))</span> <span class="c1">// ["firstName"]</span>

  <span class="c1">// [[Writable]]의 값이 false인 경우 해당 프로퍼티의 [[value]]값을 변경할 수 없다.</span>
  <span class="c1">// 변경할 수 없는 값을 변경하려고 하면 에러는 발생하지 않고 무시된다.</span>
  <span class="nx">person</span><span class="p">.</span><span class="nx">lastName</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Kim</span><span class="dl">'</span><span class="p">;</span>

  <span class="c1">// [[Configurable]]의 값이 false인 경우 해당 프로퍼티를 삭제할 수 없다.</span>
  <span class="c1">// false인 프로퍼티를 삭제하려고 하면 에러는 발생하지 않고 무시된다.</span>
  <span class="k">delete</span> <span class="nx">person</span><span class="p">.</span><span class="nx">lastName</span><span class="p">;</span>

  <span class="c1">// [[Configurable]]의 값이 false인 경우 해당 프로퍼티를 재정의 할 수 없다.</span>
  <span class="c1">// Object.getOwnPropertyDescriptor(person, 'lastName', {enumerable: ture});</span>
  <span class="c1">// Uncaught TypeError: Cannot redefine property: lastName</span>

  <span class="nx">descriptor</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">getOwnPropertyDescriptor</span><span class="p">(</span><span class="nx">person</span><span class="p">,</span> <span class="dl">'</span><span class="s1">lastName</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">descriptor</span><span class="p">);</span>
  <span class="c1">// {value: 'Choi', writable: false, enumerable: false, configurable: false}</span>

  <span class="c1">// 접근자 프로퍼티</span>
  <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">person</span><span class="p">,</span> <span class="dl">'</span><span class="s1">fullName</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
    <span class="c1">// getter</span>
    <span class="kd">get</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="s2">`</span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">firstName</span><span class="p">}</span><span class="s2"> </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">lastName</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span>
    <span class="p">},</span>

    <span class="c1">// setter 함수</span>
    <span class="kd">set</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
      <span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">firstName</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span><span class="p">]</span> <span class="o">=</span> <span class="nx">name</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="dl">'</span><span class="s1"> </span><span class="dl">'</span><span class="p">);</span>
    <span class="p">},</span>
    <span class="na">enumerable</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="na">configurable</span><span class="p">:</span> <span class="kc">true</span>
  <span class="p">});</span>

  <span class="nx">descriptor</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">getOwnPropertyDescriptor</span><span class="p">(</span><span class="nx">person</span><span class="p">,</span> <span class="dl">'</span><span class="s1">fullName</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">fullName</span><span class="dl">'</span><span class="p">,</span> <span class="nx">descriptor</span><span class="p">);</span>
  <span class="c1">// fullName {enumerable: true, configurable: true, get: ƒ, set: ƒ}</span>

  <span class="nx">person</span><span class="p">.</span><span class="nx">fullName</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Hyeji Choi</span><span class="dl">'</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span>
  <span class="c1">// fullName {enumerable: true, configurable: true, get: ƒ, set: ƒ}</span>
</code></pre></div></div>

<p>프로퍼티 디스크립터 객체에서 생략된 어트리뷰트는 다음과 같이 기본값이 적용된다.</p>
<ul>
  <li>value, get, set -&gt; undefined</li>
  <li>writable, enumerable, configurable -&gt; false</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">Object.defineProperties</code> 메서드를 사용하면 여러개의 프로퍼티를 한 번에 정의할 수 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{};</span>

  <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperties</span><span class="p">(</span><span class="nx">person</span><span class="p">,</span> <span class="p">{</span>
    <span class="c1">// 데이터 프로퍼티 정의</span>
    <span class="na">firstName</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">value</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Hyeji</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">writable</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">enumerable</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">configurable</span><span class="p">:</span> <span class="kc">true</span>
    <span class="p">},</span>
    <span class="na">lastName</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">value</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">writable</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">enumerable</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">configurable</span><span class="p">:</span> <span class="kc">true</span>
    <span class="p">},</span>
    <span class="c1">// 접근자 프로퍼티 정의</span>
    <span class="na">fullName</span><span class="p">:</span> <span class="p">{</span>
      <span class="kd">get</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s2">`</span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">firstName</span><span class="p">}</span><span class="s2"> </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">lastName</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span>
      <span class="p">},</span>

      <span class="kd">set</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
        <span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">firstName</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span><span class="p">]</span> <span class="o">=</span> <span class="nx">name</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="dl">'</span><span class="s1"> </span><span class="dl">'</span><span class="p">);</span>
      <span class="p">},</span>
      <span class="na">enumerable</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">configurable</span><span class="p">:</span> <span class="kc">true</span>
    <span class="p">}</span>
  <span class="p">});</span>

  <span class="nx">person</span><span class="p">.</span><span class="nx">fullName</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Hyeji Choi</span><span class="dl">'</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span>
  <span class="c1">// {firstName: 'Hyeji', lastName: 'Choi'}</span>
</code></pre></div></div>

<h2 id="165-객체-변경-방지">16.5 객체 변경 방지</h2>
<p>자바스크립트는 객체의 변경을 방지하는 다양한 메서드를 제공한다. 객체 변경 방지 메서드들은 객체의 변경을 금지하는 강도가 다르다.
구분 | 메서드 | 프로퍼티 추가 | 프로퍼티 삭제 | 프로퍼티 값 읽기 | 프로퍼티 값 쓰기 | 프로퍼티 어트리뷰트 재정의
:–: | :–: | :–: | :–: | :–: | :–: | :–:
객체 확장 금지 | Object.preventExtensions | X | O | O | O | O
객체 밀봉 | Object.seal | X | X | O | O | X
객체 동결 | Object.freeze | X | X | O | X | X</p>

<h3 id="1651-객체-확장-금지">16.5.1 객체 확장 금지</h3>
<p>Object.preventExtensions 메서드는 객체의 확장을 금지한다. 즉, 확장이 금지된 객체는 프로퍼티 추가가 금지된다.<br />
Object.isExtensible 메서드로 확장 가능한 객체인지 확인 가능.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span> <span class="p">};</span>

  <span class="c1">// 확장 가능한 객체인지 확인 가능</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">isExtensible</span><span class="p">(</span><span class="nx">person</span><span class="p">));</span> <span class="c1">// true</span>

  <span class="c1">// person 객체의 확장을 금지 시킴.</span>
  <span class="nb">Object</span><span class="p">.</span><span class="nx">preventExtensions</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">isExtensible</span><span class="p">(</span><span class="nx">person</span><span class="p">));</span> <span class="c1">// false -&gt; 확장 금지 상태</span>

  <span class="nx">person</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span> <span class="c1">// 프로퍼티 추가 금지. 에러 없이 무시된다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span> <span class="c1">// {name: "Choi"}</span>

  <span class="c1">// 프로퍼티 추가는 금지되지만 삭제는 가능.</span>
  <span class="k">delete</span> <span class="nx">person</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span> <span class="c1">// {}</span>

  <span class="c1">// 프로퍼티 정의에 의한 프로퍼티 추가도 금지된다.</span>
  <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">person</span><span class="p">,</span> <span class="dl">'</span><span class="s1">age</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span> <span class="na">value</span><span class="p">:</span> <span class="mi">20</span> <span class="p">});</span>
  <span class="c1">// TypeError: Cannot define property age, object is not extensible</span>
</code></pre></div></div>

<h3 id="1652-객체-밀봉">16.5.2 객체 밀봉</h3>
<p>객체 밀봉이란 프로퍼티 <code class="language-plaintext highlighter-rouge">추가 및 삭제</code>와 프로퍼티 어트리뷰트 <code class="language-plaintext highlighter-rouge">재정의 금지</code>를 의미한다. 밀봉된 객체는 <code class="language-plaintext highlighter-rouge">읽기와 쓰기만 가능</code>하다.<br />
Object.isSealed 메서드로 밀봉된 객체인지 확인 가능.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span> <span class="p">};</span>

  <span class="c1">// person 객체는 밀봉된 객체가 아니다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">isSealed</span><span class="p">(</span><span class="nx">person</span><span class="p">));</span> <span class="c1">// false</span>

  <span class="c1">// person 객체를 밀봉</span>
  <span class="nb">Object</span><span class="p">.</span><span class="nx">seal</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">isSealed</span><span class="p">(</span><span class="nx">person</span><span class="p">));</span> <span class="c1">// true</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">getOwnPropertyDescriptors</span><span class="p">(</span><span class="nx">person</span><span class="p">));</span> 
  <span class="c1">// name: {value: 'Choi', writable: true, enumerable: true, configurable: false}</span>

  <span class="c1">// 프로퍼티 추가 금지</span>
  <span class="nx">person</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span> <span class="c1">// 무시</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span> <span class="c1">// {name: "Choi"}</span>

  <span class="c1">// 프로퍼티 삭제 금지</span>
  <span class="k">delete</span> <span class="nx">person</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span> <span class="c1">// 무시</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span> <span class="c1">// {name: "Choi"}</span>

  <span class="c1">// 프로퍼티 값 갱신 가능</span>
  <span class="nx">person</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Kim</span><span class="dl">'</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span> <span class="c1">// {name: "Kim"}</span>

  <span class="c1">// 프로퍼티 재정의 금지</span>
  <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">person</span><span class="p">,</span> <span class="dl">'</span><span class="s1">name</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span> <span class="na">configurable</span><span class="p">:</span> <span class="kc">true</span> <span class="p">});</span>
  <span class="c1">// TypeError: Cannot redefine property: name</span>
</code></pre></div></div>

<h3 id="1653-객체-동결">16.5.3 객체 동결</h3>
<p>객체 동결이란 프로퍼티 <code class="language-plaintext highlighter-rouge">추가 및 삭제</code>와 프로퍼티 어트리뷰트 <code class="language-plaintext highlighter-rouge">재정의</code> 금지, 프로퍼티 <code class="language-plaintext highlighter-rouge">값 갱신 금지</code>를 의미한다. 동결된 객체는 <code class="language-plaintext highlighter-rouge">읽기만 가능.</code><br />
Object.isFrozen 메서드로 동결된 객체인지 확인 가능.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span> <span class="p">};</span>

  <span class="c1">// person 객체는 동결된 객체가 아니다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">isFrozen</span><span class="p">(</span><span class="nx">person</span><span class="p">));</span> <span class="c1">// false</span>

  <span class="c1">// person 객체를 동결</span>
  <span class="nb">Object</span><span class="p">.</span><span class="nx">freeze</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">isFrozen</span><span class="p">(</span><span class="nx">person</span><span class="p">));</span> <span class="c1">// true</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">getOwnPropertyDescriptors</span><span class="p">(</span><span class="nx">person</span><span class="p">));</span> 
  <span class="c1">// name: {value: 'Choi', writable: false, enumerable: true, configurable: false}</span>

  <span class="c1">// 프로퍼티 추가 금지</span>
  <span class="nx">person</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span> <span class="c1">// 무시</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span> <span class="c1">// {name: "Choi"}</span>

  <span class="c1">// 프로퍼티 삭제 금지</span>
  <span class="k">delete</span> <span class="nx">person</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span> <span class="c1">// 무시</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span> <span class="c1">// {name: "Choi"}</span>

  <span class="c1">// 프로퍼티 값 갱신 금지</span>
  <span class="nx">person</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Kim</span><span class="dl">'</span><span class="p">;</span> <span class="c1">// 무시</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span> <span class="c1">// {name: "Choi"}</span>

  <span class="c1">// 프로퍼티 재정의 금지</span>
  <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">person</span><span class="p">,</span> <span class="dl">'</span><span class="s1">name</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span> <span class="na">configurable</span><span class="p">:</span> <span class="kc">true</span> <span class="p">});</span>
  <span class="c1">// TypeError: Cannot redefine property: name</span>
</code></pre></div></div>

<h3 id="1654-불변-객체">16.5.4 불변 객체</h3>
<p>변경 방지 메서드 들은 얕은 변경 방지로 중첩된 객체에는 영향을 주지 못한다. 중첩 객체까지 영향을 주려면 객체를 값으로 갖는 모든 프로퍼티에 대해 재귀적으로 메서드를 호출해야 한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 객체 동결 재귀적 호출</span>
  <span class="kd">function</span> <span class="nx">deepFreeze</span><span class="p">(</span><span class="nx">target</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 객체이고 동결되지 않은 객체만 동결한다.</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">target</span> <span class="o">&amp;&amp;</span> <span class="k">typeof</span> <span class="nx">target</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">object</span><span class="dl">'</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nb">Object</span><span class="p">.</span><span class="nx">isFrozen</span><span class="p">(</span><span class="nx">target</span><span class="p">))</span> <span class="p">{</span>
      <span class="nb">Object</span><span class="p">.</span><span class="nx">freeze</span><span class="p">(</span><span class="nx">target</span><span class="p">);</span>
      <span class="c1">// 모든 프로퍼티를 순회하여 재귀적으로 동결.</span>
      <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">target</span><span class="p">).</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">key</span> <span class="o">=&gt;</span> <span class="nx">deepFreeze</span><span class="p">(</span><span class="nx">target</span><span class="p">[</span><span class="nx">key</span><span class="p">]));</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">target</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="kd">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">address</span><span class="p">:</span> <span class="p">{</span><span class="na">city</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Seoul</span><span class="dl">'</span><span class="p">}</span>
  <span class="p">};</span>

  <span class="c1">// 깊은 객체 동결</span>
  <span class="nx">deepFreeze</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">isFrozen</span><span class="p">(</span><span class="nx">person</span><span class="p">));</span> <span class="c1">// true</span>
  <span class="c1">// 중첩된 객체까지 동결</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">isFrozen</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">address</span><span class="p">));</span> <span class="c1">// true</span>

  <span class="nx">person</span><span class="p">.</span><span class="nx">address</span><span class="p">.</span><span class="nx">city</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Busan</span><span class="dl">'</span><span class="p">;</span> <span class="c1">// 추가,삭제,재할당,갱신 금지 -&gt; 무시</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span> <span class="c1">// {name: 'Choi', address: {city: 'Seoul'}}</span>

</code></pre></div></div>]]></content><author><name>Hyejic</name></author><category term="js" /><category term="javascript" /><summary type="html"><![CDATA[모던 자바스크립트 Deep Dive 16장 프로퍼티 어트리뷰트 내용 정리]]></summary></entry><entry><title type="html">15장 let, const 키워드와 블록 레벨 스코프</title><link href="http://localhost:4000/js/modernJS15/" rel="alternate" type="text/html" title="15장 let, const 키워드와 블록 레벨 스코프" /><published>2022-04-26T00:00:00+09:00</published><updated>2022-04-26T00:00:00+09:00</updated><id>http://localhost:4000/js/modernJS15</id><content type="html" xml:base="http://localhost:4000/js/modernJS15/"><![CDATA[<p><br /></p>

<h1 id="15장-let-const-키워드와-블록-레벨-스코프">15장 let, const 키워드와 블록 레벨 스코프</h1>

<h2 id="151-var-키워드로-선언한-변수의-문제점">15.1 var 키워드로 선언한 변수의 문제점</h2>
<h3 id="1511-변수-중복-선언-허용">15.1.1 변수 중복 선언 허용</h3>
<p>var 키워드로 선언한 변수는 중복 선언이 가능하다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="kd">var</span> <span class="nx">y</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

  <span class="c1">// var 키워드로 선언된 변수는 같은 스코프 내에서 중복 선언을 허용</span>
  <span class="c1">// 초기화 문이 있는 경우 자바스크립트 엔지에 의해 var 키워드가 없는 것처럼 동작. 재선언.</span>
  <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
  <span class="c1">// 초기화문이 없는 변수 선언문은 무시된다.</span>
  <span class="kd">var</span> <span class="nx">y</span><span class="p">;</span> 

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span> <span class="c1">// 100</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">y</span><span class="p">);</span> <span class="c1">// 1</span>
</code></pre></div></div>
<p>위 예제와 같이 동일한 이름의 변수를 중복 선언하면서 값까지 할당했다면 의도치 않게 먼저 선언된 변수 값이 변경되는 부작용 발생.</p>

<h3 id="1512-함수-레벨-스코프">15.1.2 함수 레벨 스코프</h3>
<p>var 키워드로 선언한 변수는 오로지 함수의 코드 블록만을 지역 스코프로 인정한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

  <span class="k">if</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// var 키워드로 선언된 변수는 함수의 코드 블록만을 지역스코프로 인정하기 때문에 x 변수가 중복 선언된다.</span>
    <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="c1">// 10</span>
</code></pre></div></div>

<h3 id="1513-변수-호이스팅">15.1.3 변수 호이스팅</h3>
<p>변수 호이스팅에 의해 var 키워드로 선언한 변수는 변수 선언문이 이전에 참조할 수 있다. 단, 할당문 이전에 변수를 참조하면 언제나 undefined를 반환한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 이 시점에 호이스팅에 의해 foo변수가 선언</span>
  <span class="c1">// 변수 foo는 undefined로 초기화</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span> <span class="c1">// undefined</span>

  <span class="c1">// 변수에 값을 할당</span>
  <span class="nx">foo</span> <span class="o">=</span> <span class="mi">123</span><span class="p">;</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">)</span> <span class="c1">// 123</span>

  <span class="c1">// 변수 선언은 런타임 이전에 자바스크립트 엔진에 의해 암묵적으로 실행된다.</span>
  <span class="kd">var</span> <span class="nx">foo</span><span class="p">;</span>
</code></pre></div></div>
<p>변수 선언문 이전에 변수를 참조할 수 있지만 프로그램의 흐름상 맞지 않고 가독성을 떨어뜨리며 오류를 발생시킬 여지를 남긴다.</p>

<h2 id="152-let-키워드">15.2 let 키워드</h2>
<p>ES6에서 도입</p>

<h3 id="1521-변수-중복-선언-금지">15.2.1 변수 중복 선언 금지</h3>
<p>let 키워드로 이름이 같은 변수를 중복 선언하면 문법에러가 발생</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">let</span> <span class="nx">bar</span> <span class="o">=</span> <span class="mi">123</span><span class="p">;</span>
  
  <span class="kd">let</span> <span class="nx">bar</span> <span class="o">=</span> <span class="mi">456</span><span class="p">;</span> <span class="c1">// SyntaxError: Identifier 'bar' has already veen declared</span>
</code></pre></div></div>

<h3 id="1522-블록-레벨-스코프">15.2.2 블록 레벨 스코프</h3>
<p>let 키워드로 선언한 변수는 모든 코드 블록을 지역 스코프로 인정하는 블록 레벨 스코프를 따른다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">let</span> <span class="nx">foo</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// 전역변수</span>
  <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">foo</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="c1">// 지역변수</span>
    <span class="kd">let</span> <span class="nx">bar</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span> <span class="c1">// 지역변수</span>
  <span class="p">}</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span> <span class="c1">// 1</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">bar</span><span class="p">);</span> <span class="c1">// ReferenceError: bar is not defined -&gt; 전역에서 지역변수를 참조할 수 없다.</span>
</code></pre></div></div>

<p>함수도 코드 블록이으로 스코프를 따른다. 함수 내의 코드블록은 함수 레벨 스코프에 중첩된다.</p>

<p><img width="343" alt="그림 15-1 블록 레벨 스코프의 중첩" src="https://user-images.githubusercontent.com/44577555/165247412-a00c6168-efa6-4253-ac36-3a15f03ed5ae.png" /></p>

<h3 id="1523-변수-호이스팅">15.2.3 변수 호이스팅</h3>
<p>let 키워드로 선언한 변수는 변수 호이스팅이 발생하지 않는 것처럼 동작한다. 변수 선언문 이전에 참조하면 ReferenceError 발생.<br />
let 키워드 변수는 var 키워드 변수와 다르게 <code class="language-plaintext highlighter-rouge">선언 단계</code>와 <code class="language-plaintext highlighter-rouge">초기화 단계</code>가 <code class="language-plaintext highlighter-rouge">분리</code>되어 진행된다. 런타임 이전에 선언 단계가 먼저 실행되지만 초기화 단계는 변수 선언문에 도달했을 때 실행된다. 따라서 초기화 단계가 실행되기 전에 변수에 접근하면 참조에서가 발생한다. 스코프의 시작 지점부터 초기화 시작 지점까지 <code class="language-plaintext highlighter-rouge">변수를 참조할 수 없는 구간을 일시적 사각지대</code>라고 한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 초기화 이전의 일시적 사각지대에서는 참조할 수 없다. </span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span> <span class="c1">// ReferenceError: foo is not defined</span>
  
  <span class="kd">let</span> <span class="nx">foo</span><span class="p">;</span> <span class="c1">// 변수 선언문에서 초기화 단계가 실행</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span> <span class="c1">// undefined</span>

  <span class="nx">foo</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// 할당문에서 할단 단계 실행</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span> <span class="c1">// 1</span>
</code></pre></div></div>

<table>
  <thead>
    <tr>
      <th style="text-align: center">var 키워드 변수 생명주기</th>
      <th style="text-align: center">let 키워드 변수 생명주기</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"><img width="300" alt="var 키워드 변수 생명주기" src="https://user-images.githubusercontent.com/44577555/165249667-c6cebe00-cd26-406e-9d35-750d03cd8715.png" /></td>
      <td style="text-align: center"><img width="300" alt="let 키워드 변수 생명주기" src="https://user-images.githubusercontent.com/44577555/165249653-d750aacb-9dd8-4280-bd1c-3038170aa82e.png" /></td>
    </tr>
  </tbody>
</table>

<h3 id="1524-전역-객체와-let">15.2.4 전역 객체와 let</h3>
<p>let 키워드로 선언한 전역 변수는 전역 객체의 프로퍼티가 아니다. let 전역 변수는 보이지 않는 개념적인 블록 내에 존재하게 된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 브라우저 환경에서 실행</span>

  <span class="kd">let</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span> <span class="c1">// undefined -&gt; let, const로 선언한 변수는 전역 객체 window의 프로퍼티가 아니다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span> <span class="c1">// 1</span>
</code></pre></div></div>

<h2 id="153-const-키워드">15.3 const 키워드</h2>
<p>ES6에서 도입. const 키워드는 let 키워드와 대부분 동일하다.</p>

<h3 id="1531-선언과-초기화">15.3.1 선언과 초기화</h3>
<p>const 키워드로 선언한 변수는 반드시 선언과 동시에 초기화해야 한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 선언과 동시에 초기화를 하지 않으면 에러 발생</span>
  <span class="kd">const</span> <span class="nx">foo</span><span class="p">;</span> <span class="c1">// SyntaxError: Missing initializer in const declaration</span>
  <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span> <span class="c1">// ReferenceError: Cannot access 'foo' before initialization</span>
    <span class="kd">const</span> <span class="nx">foo</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span> <span class="c1">// 1</span>
  <span class="p">}</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span> <span class="c1">// ReferenceError: foo is not defined</span>

</code></pre></div></div>

<h3 id="1532-재할당-금지">15.3.2 재할당 금지</h3>
<p>var, let 키워드로 선언한 변수는 재할당이 자유롭지만 const 키워드로 선언한 변수는 재할당이 금지된다.</p>

<h3 id="1533-상수">15.3.3 상수</h3>
<p>const 키워드로 선언한 변수에 원시 값을 할당한 경우 변수 값을 변경할 수 없기때문에 상수를 표현하는 데 사용하기도 한다.<br />
상수는 재할당이 금지된 변수를 말한다. 상수는 상태 유지와 가독성, 유지보수의 편의를 위해 적극적으로 사용해야 한다. 일반적으로 상수의 이름은 대문자로 사용하고 여러 단어로 이뤄진 경우에는 스네이크 케이스로 표현한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 세율을 의미하는 0.1은 변경할 수 없는 상수로서 사용될 값</span>
  <span class="kd">const</span> <span class="nx">TAX_RATE</span> <span class="o">=</span> <span class="mf">0.1</span><span class="p">;</span>

  <span class="kd">let</span> <span class="nx">perTaxPrice</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>

  <span class="kd">let</span> <span class="nx">afterTaxPrice</span> <span class="o">=</span> <span class="nx">perTaxPrice</span> <span class="o">+</span> <span class="p">(</span><span class="nx">perTaxPrice</span> <span class="o">*</span> <span class="nx">TAX_RATE</span><span class="p">);</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">afterTaxPrice</span><span class="p">);</span> <span class="c1">// 110</span>
</code></pre></div></div>

<h3 id="1534-const-키워드와-객체">15.3.4 const 키워드와 객체</h3>
<p>const 키워드로 선언된 변수에 객체를 할당한 경우 값을 변경할 수 있다. 이때 객체가 변경되더라도 변수에 할당된 참조 값은 변경되지 않는다.<br />
const 키워드는 재할당을 금지할 뿐 “불변”을 의미하지는 않는다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span>
  <span class="p">};</span>

  <span class="nx">person</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Kim</span><span class="dl">'</span><span class="p">;</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span> <span class="c1">// {name: "Kim"}</span>
</code></pre></div></div>

<h2 id="154-var-vs-let-vs-const">15.4 var vs. let vs. const</h2>
<p>변수 선언에는 기본적으로 const를 사용하고 let은 재할당이 필요한 경우에 한정해 사용하는 것이 좋다.</p>
<ul>
  <li>ES6를 사용한다면 var 키워드를 사용하지 않는다.</li>
  <li>재할당이 필요한 경우에 한정해 let 키워드를 사용한다. 이때 변수의 스코프는 최대한 좁게 만든다.</li>
  <li>변경이 발생하지 않고 읽기 전용으로 사용하는 원시 값과 객체에는 const 키워드를 사용한다. const 키워드는 재할당을 금지하므로 var, let 키워드보다 안전하다.</li>
</ul>

<h2 id="변수-키워드-비교">변수 키워드 비교</h2>

<table>
  <thead>
    <tr>
      <th style="width:10%" class="text-center">키워드</th>
      <th style="width:10%" class="text-center">중복선언</th>
      <th style="width:10%" class="text-center">재할당</th>
      <th style="width:30%">스코프</th>
      <th style="width:40%">호이스팅</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td class="text-center">var</td>
      <td class="text-center">o</td>
      <td class="text-center">o</td>
      <td>함수의 코드 블록</td>
      <td>변수 선언문 이전에 참조 가능하고 할당문 이전에 참조하면 undefined 반환.</td>
    </tr>
    <tr>
      <td class="text-center">let</td>
      <td class="text-center">x</td>
      <td class="text-center">o</td>
      <td>모든 코드 블록(함수, if문, for문, while 문, try/catch문 등)</td>
      <td>호이스팅이 발생하지 않는 것처럼 동작한다.<br />선언단계와 초기화 단계가 분리되어 진행. <br />변수 선언 이전에 참조하면 참조 에러발생</td>
    </tr>
    <tr>
      <td class="text-center">const</td>
      <td class="text-center">x</td>
      <td class="text-center">x</td>
      <td>모든 코드 블록(함수, if문, for문, while 문, try/catch문 등)</td>
      <td>호이스팅이 발생하지 않는 것처럼 동작한다</td>
    </tr>
  </tbody>
</table>]]></content><author><name>Hyejic</name></author><category term="js" /><category term="javascript" /><summary type="html"><![CDATA[모던 자바스크립트 Deep Dive 15장 let, const 키워드와 블록 레벨 스코프 내용 정리]]></summary></entry><entry><title type="html">14장 전역 변수의 문제점</title><link href="http://localhost:4000/js/modernJS14/" rel="alternate" type="text/html" title="14장 전역 변수의 문제점" /><published>2022-04-25T00:00:00+09:00</published><updated>2022-04-25T00:00:00+09:00</updated><id>http://localhost:4000/js/modernJS14</id><content type="html" xml:base="http://localhost:4000/js/modernJS14/"><![CDATA[<p><br /></p>

<h1 id="14장-전역-변수의-문제점">14장 전역 변수의 문제점</h1>

<h2 id="141-변수의-생명-주기">14.1 변수의 생명 주기</h2>
<h3 id="1411-지역-변수의-생명-주기">14.1.1 지역 변수의 생명 주기</h3>
<p>변수는 자신이 선언된 위치에서 생성되고 소멸한다. 함수 내부에서 선언한 변수는 함수가 호출된 직후에 함수 몸체의 코드가 한 줄씩 순차적으로 실행되기 이전에 자스크립트 엔진에 의해 먼저 실행된다. 즉, 지역변수의 생명주기는 함수의 생명 주기와 일치한다.</p>

<p><img width="351" alt="14-1 지역 변수의 생명 주기" src="https://user-images.githubusercontent.com/44577555/165106439-35cda26f-b0b2-4f36-97ae-e730d2ab183f.png" /></p>

<p>변수는 메모리공간에 저장 되었다가 저장된 메모리 공간을 더이상 참조하지 않을 때 가비지 콜렉터에 의헤 해제되어 가용 메모리를 반환한다. 즉, 누군가가 메모리 공간을 참조하고 있으면 해제되지 않고 확보된 상태로 남아있게 되어 함수의 생명주기와 다를 수 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">global</span><span class="dl">'</span><span class="p">;</span>

  <span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span>  <span class="c1">// 🤔</span>
    <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">local</span><span class="dl">'</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="nx">foo</span><span class="p">();</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span> <span class="c1">// global</span>
</code></pre></div></div>

<p>위 예제에서 foo 함수 내부에서 선언된 지역 변수 x는 🤔 시점에 이미 선언되었고 undefined로 초기화되어 있다. x변수는 전역 변수 x가 아닌 지역 변수 x를 참조하고 할당문이 실행되기 전까지는 undefined 값을 갖는다. 이처럼 호이스팅은 스코프를 단위로 동작한다.</p>
<blockquote>
  <p><code class="language-plaintext highlighter-rouge">호이스팅?</code> 변수 선언이 스코프의 선두로 끌어 올려진 것처럼 동작하는 자바스크립트 고유의 특징</p>
</blockquote>

<h3 id="1412-전역-변수의-생명-주기">14.1.2 전역 변수의 생명 주기</h3>
<p>함수와 달리 전역 코드는 명시적인 호출 없이 실행된다. 전역 코드에는 반환문을 사용할 수 없으므로 마지막 문이 실행되어 더 이상 실행할 문이 없을 때 종료한다.<br />
var 키워드로 선언한 전역 변수는 전역 객체의 프로퍼티가 된다. 즉, 전역 변수의 생명 주기가 전역 객체의 생명 주기와 일치한다.</p>

<p><img width="420" alt="14-2 전역 변수의 생명 주기" src="https://user-images.githubusercontent.com/44577555/165118277-b36b8668-068f-42d8-b60d-8ef109348f5b.png" /></p>

<p>브라우저 환경에서 전역 객체는 window -&gt; var 키워드로 선언한 전역변수는 window의 프로퍼티이므로 생명주기는 전역 객체 window의 생명 주기와 같다.</p>

<h2 id="142-전역-변수의-문제점">14.2 전역 변수의 문제점</h2>
<ul>
  <li>암묵적 결합
    <ul>
      <li>전역 변수를 선언한 의도는 코드 어디서든 참조하고 할당할 수 있는 변수를 사용하겠다는 것. 모든 코드가 전역 변수를 참조하고 변경할 수 있는 암묵적 결합을 허용하는 것이다.</li>
    </ul>
  </li>
  <li>긴 생명 주기
    <ul>
      <li>전역 변수는 생명 주기가 길어서 메모리 리소스도 오랜 기간 소비한다. var 키워드는 중복 선언을 허용하므로 전역 변수로 선언했을때 변수 이름이 중복될 가능성이 있고 의도치 않은 재할당이 이뤄질 수 있다.</li>
    </ul>
  </li>
  <li>스코프 체인 상에서 종점에 존재
    <ul>
      <li>변수를 검색할 때 전역 변수가 가장 마지막에 검색된다. 즉 전역 변수의 검색 속도가 가장 느리다. (검색 시 지역 스코프에서 전역 스코프로 올라가기 때문)</li>
    </ul>
  </li>
  <li>네임스페이스 오염
    <ul>
      <li>자바스크립트는 파일이 분리되어 있다 해도 전역 스코프를 공유한다. 따라서 동일한 이름을 가진 변수나 함수가 같은 스코프에 존재할 수 있으며 예상치 못한 결과를 가져올 수 있다.</li>
    </ul>
  </li>
</ul>

<h2 id="143-전역-변수의-사용을-억제하는-방법">14.3 전역 변수의 사용을 억제하는 방법</h2>
<p>전역 변수를 반드시 사용해야 할 이유를 찾지 못한다면 지역 변수를 사용해야 한다. 변수의 스코프는 좁을수록 좋다.</p>

<h3 id="1431-즉시-실행-함수">14.3.1 즉시 실행 함수</h3>
<p>즉시 실행 함수는 단 한 번만 호출된다. 모든 코드를 즉시 실행 함수로 감싸면 모든 변수는 즉시 실행 함수의 지역 변수가 된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
  <span class="p">}());</span>
  
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span> <span class="c1">// ReferenceError: foo is not defined</span>
</code></pre></div></div>

<h3 id="1432-네임스페이스-객체">14.3.2 네임스페이스 객체</h3>
<p>전역에 네임스페이스 역할을 담당할 객체를 생성하고 전역 변수처럼 사용하고 싶은 변수를 프로퍼티로 추가하는 방법이다.
네임스페이스를 분리해서 식별자 충돌을 방지하는 효과는 있으나 네임스페이스 객체 자체가 전역 변수에 할당되므로 유용하지 않다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">MYAPP</span> <span class="o">=</span> <span class="p">{};</span>

  <span class="nx">MYAPP</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Choi</span><span class="dl">"</span><span class="p">;</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">MYAPP</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span> <span class="c1">// Choi</span>

</code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 계층적 구조 가능</span>
  <span class="kd">var</span> <span class="nx">MYAPP</span> <span class="o">=</span> <span class="p">{};</span>
  
  <span class="nx">MYAPP</span><span class="p">.</span><span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">address</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Seoul</span><span class="dl">'</span> 
  <span class="p">};</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">MYAPP</span><span class="p">.</span><span class="nx">person</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span> <span class="c1">// Choi</span>
</code></pre></div></div>

<h3 id="1433-모듈-패턴">14.3.3 모듈 패턴</h3>
<p><code class="language-plaintext highlighter-rouge">모듈 패턴</code>은 자바스크립트의 강력한 기능인 <code class="language-plaintext highlighter-rouge">클로저를 기반</code>으로 동작하고 전역 변수의 억제는 물론 <code class="language-plaintext highlighter-rouge">캡슐화</code>까지 구현할 수 있다. 모듈 패턴은 전역 네임스페이스의 오염을 막는 기능은 한정적이지만 정보 은닉을 구현하기 위해 사용한다.</p>
<blockquote>
  <p><code class="language-plaintext highlighter-rouge">캡슐화</code>는 객체의 상태를 나타내는 프로퍼티와 프로퍼티를 참조하고 조작할 수 있는 동작인 메서드를 하나로 묶는것을 말한다. 캡슐화는 객체의 특정 프로퍼티나 메서드를 감출 목적으로 사용하기도 하는데 이를 정보 은닉이라 한다.</p>
</blockquote>

<blockquote>
  <p>자바스크립트는 public, private, protected 등의 접근 제한자를 제공하지 않는다.</p>
</blockquote>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">Counter</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="c1">// private 변수</span>
    <span class="kd">var</span> <span class="nx">num</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="c1">// 외부로 공개할 데이터나 메서드를 프로퍼티로 추가한 객체를 반환한다.</span>
    <span class="c1">// public member</span>
    <span class="k">return</span> <span class="p">{</span>
      <span class="nx">increase</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="o">++</span><span class="nx">num</span><span class="p">;</span>
      <span class="p">},</span>
      <span class="nx">decrease</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="o">--</span><span class="nx">num</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}());</span>

  <span class="c1">// private 변수는 외부로 노출되지 않는다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">Counter</span><span class="p">.</span><span class="nx">num</span><span class="p">)</span> <span class="c1">// undefined</span>
  
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">Counter</span><span class="p">.</span><span class="nx">increase</span><span class="p">());</span> <span class="c1">// 1</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">Counter</span><span class="p">.</span><span class="nx">increase</span><span class="p">());</span> <span class="c1">// 2</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">Counter</span><span class="p">.</span><span class="nx">decrease</span><span class="p">());</span> <span class="c1">// 1</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">Counter</span><span class="p">.</span><span class="nx">decrease</span><span class="p">());</span> <span class="c1">// 0</span>
</code></pre></div></div>

<p>위 예제에서 외부에 노출하고 싶은 변수나 함수를 객체에 담아 프로퍼티를 퍼블릭 맴버로 만들었다.
노출하고 싶지 않은 변수나 함수는 반환하는 객체에 추가하지 않으면 외부에서 접근할 수 없는 프라이빗 맴버가 된다.</p>

<h3 id="1434-es6-모듈">14.3.4 ES6 모듈</h3>
<p>ES6 모듈은 파일 자체의 독자적인 모듈 스코프를 제공한다. script 테그에 type=”module” 어트리뷰트를 추가하면 로드된 자바스크립트 파일은 모듈로서 동작한다.</p>
<ul>
  <li>mjs 확장자 권장.</li>
  <li>구형 브라우저에서는 동작하지 않으며 브라우저의 ES6모듈 기능을 사용하더라도 트랜스파일링이나 번들링이 필요하다.</li>
</ul>]]></content><author><name>Hyejic</name></author><category term="js" /><category term="javascript" /><summary type="html"><![CDATA[모던 자바스크립트 Deep Dive 14장 전역 변수의 문제점 내용 정리]]></summary></entry></feed>