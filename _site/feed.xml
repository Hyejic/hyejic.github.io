<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-04-13T19:24:23+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">공부해서 남주자</title><subtitle>공부한것을 기록하고 공유하는 블로그입니다.</subtitle><author><name>Hyejic</name></author><entry><title type="html">10장 객체 리터럴</title><link href="http://localhost:4000/js/modernJS10/" rel="alternate" type="text/html" title="10장 객체 리터럴" /><published>2022-04-12T00:00:00+09:00</published><updated>2022-04-12T00:00:00+09:00</updated><id>http://localhost:4000/js/modernJS10</id><content type="html" xml:base="http://localhost:4000/js/modernJS10/"><![CDATA[<p><br /></p>

<h1 id="10장-객체-리터럴">10장 객체 리터럴</h1>

<h2 id="101-객체란">10.1 객체란?</h2>
<p>자바스크립트는 객체 기방의 프로그래밍 언어이며, 자바스크립트를 구성하는 거ㅣ “모든 것”이 객체다. 다양한 타입의 값을 하나의 단위로 구성한 복합적인 자료구조다.<br />
객체는 프로퍼티와 메서드로 구성된 집합체다.</p>
<ul>
  <li>프로퍼티 : 객체의 상태를 나타내는 값(data)</li>
  <li>메서드 : 프로퍼티상태 데이터를 참조하고 조작할 수 있는 동작(behavior)</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">counter</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">num</span> <span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="c1">// 프로퍼티</span>
    <span class="na">increase</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="c1">// 메서드</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">num</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
</code></pre></div></div>

<h2 id="102-객체-리터럴에-의한-객체-생성">10.2 객체 리터럴에 의한 객체 생성</h2>
<h3 id="자바스크립트의-객체-생성-방법">자바스크립트의 객체 생성 방법</h3>
<ul>
  <li>객체 리터럴</li>
  <li>Object 생성자 함수</li>
  <li>생성자 함수</li>
  <li>Object.create 메서드</li>
  <li>클래스(ES6)</li>
</ul>

<p>객체 생성 방법들중 가장 일반적이고 간단한 방법은 객체 리터럴이다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Lee</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">sayHello</span><span class="p">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Hello: My name is </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="s2">.`</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">};</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">person</span><span class="p">);</span> <span class="c1">// object</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span> <span class="c1">// {name: "Lee", sayHello: f}</span>
</code></pre></div></div>

<h2 id="103-프로퍼티">10.3 프로퍼티</h2>
<p>객체는 프로퍼티의 집합이며, 프로퍼티는 키와 값으로 구성된다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
    <span class="c1">// 프로퍼티 키는 name, 프로퍼티 값은 'Lee'</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Lee</span><span class="dl">'</span><span class="p">,</span>
    <span class="c1">// 프로퍼티 키는 age, 프로퍼티 값은 20</span>
    <span class="na">age</span><span class="p">:</span> <span class="mi">20</span>
  <span class="p">};</span>
</code></pre></div></div>
<ul>
  <li>프로퍼티 키: 빈 문자열을 포함하는 모든 문자열 또는 심벌 값</li>
  <li>프로퍼티 값: 자바스크립트에서 사용할 수 있는 모든 값</li>
</ul>

<p>프로퍼티 키는 가급적 네이밍 규칙을 준수하여 사용하는 것을 권장한다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">firstName</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Hye-ji</span><span class="dl">'</span><span class="p">,</span> <span class="c1">// 네이밍 규직 준수</span>
    <span class="dl">'</span><span class="s1">last-name</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span> <span class="c1">// 네이밍 규직 준수하지 않음 (반드시 따옴표 사용)</span>
  <span class="p">};</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span> <span class="c1">// {firstName: 'Hye-ji', last-name: 'Choi'}</span>
</code></pre></div></div>

<p>문자열 또는 문자열로 평가할 수 있는 표현식을 사용해 프로퍼티 키를 동적으로 생성할 수 있다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{};</span>
  <span class="kd">var</span> <span class="nx">key</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">hello</span><span class="dl">'</span><span class="p">;</span>

  <span class="c1">//ES5</span>
  <span class="nx">obj</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">world</span><span class="dl">'</span><span class="p">;</span>
  
  <span class="c1">//ES6</span>
  <span class="c1">// var obj = {[key]: 'world'};</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span> <span class="c1">// {hello: "world"}</span>
</code></pre></div></div>

<p>빈 문자열이나 var, function과 같은 예약어를 프로퍼티 키로 사용해도 에러가 발생하지 않는다. 하지만 예상치 못한 에러가 발생할 여지가 있으므로 권장하지 않는다. 이미 존재하는 <code class="language-plaintext highlighter-rouge">프로퍼티 키를 중복</code>으로 선언하면 나중에 선언한 프로퍼티가 기존 프로퍼티를 <code class="language-plaintext highlighter-rouge">덮어쓴다</code>.</p>

<h2 id="104-메서드">10.4 메서드</h2>
<p>프로퍼티 값이 함수일 경우 일반 함수와 구분하기 위해 메서드라 부른다. 즉 메서드는 <code class="language-plaintext highlighter-rouge">객체에 묶여있는 함수</code>다.</p>

<h2 id="105-프로퍼티-접근">10.5 프로퍼티 접근</h2>
<h3 id="프로퍼티-접근-방법">프로퍼티 접근 방법</h3>
<ul>
  <li>마침표 프로퍼티 접근 연사자(.)를 사용하는 <code class="language-plaintext highlighter-rouge">마침표 표기법</code></li>
  <li>대괄호 프로퍼티 접근 연산자([…])를 사용하는 <code class="language-plaintext highlighter-rouge">대괄호 표기법</code></li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Lee</span><span class="dl">'</span>
  <span class="p">};</span>

  <span class="c1">// 마침표 표기법</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span> <span class="c1">// "Lee"</span>
  <span class="c1">// 대괄호 표기법</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">[</span><span class="dl">'</span><span class="s1">name</span><span class="dl">'</span><span class="p">]);</span> <span class="c1">// "Lee"</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">대괄호 표기법</code>을 사용하는 경우 <code class="language-plaintext highlighter-rouge">프로퍼티 키는 반드시 따옴표</code>로 감싼 문자열이어야 한다. <code class="language-plaintext highlighter-rouge">존재하지 않는 프로퍼티</code>에 접근하면 <code class="language-plaintext highlighter-rouge">undefined를 반환</code>한다. 프로퍼티 키가 식별자 네이밍 규칙을 준수하지 않는 이름이면 반드시 대괄호 표기법을 사용해야 한다.</p>

<h2 id="106-프로퍼티-값-갱신">10.6 프로퍼티 값 갱신</h2>
<p>이미 존재하는 프로퍼티에 값을 할당하면 프로퍼티 값이 갱신된다.</p>

<h2 id="107-프로퍼티-동적-생성">10.7 프로퍼티 동적 생성</h2>
<p>존재하지 않는 프로퍼티에 값을 할당하면 프로퍼티가 동적으로 생성되어 추가된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span>
  <span class="p">};</span>

  <span class="nx">person</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="mi">30</span><span class="p">;</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">)</span> <span class="c1">// {name: 'Choi', age: 30}</span>
</code></pre></div></div>

<h2 id="108-프로퍼티-삭제">10.8 프로퍼티 삭제</h2>
<p>delete 연산사는 객체의 프로퍼티를 삭제한다. 만약 존재하지 않는 프로퍼티를 삭제하면 아무런 에러 없이 무시된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span>
  <span class="p">};</span>

  <span class="nx">person</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="mi">30</span><span class="p">;</span>

  <span class="k">delete</span> <span class="nx">person</span><span class="p">.</span><span class="nx">age</span><span class="p">;</span> <span class="c1">// 동적으로 생성된 age 프로퍼티 삭제</span>
  <span class="k">delete</span> <span class="nx">person</span><span class="p">.</span><span class="nx">address</span><span class="p">;</span>  <span class="c1">// 존재하지 않는 프로퍼티 라서 무시된다</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">)</span> <span class="c1">// {name: 'Choi'}</span>
</code></pre></div></div>

<h2 id="109-es6에서-추가된-객체-리터럴의-확장-기능">10.9 ES6에서 추가된 객체 리터럴의 확장 기능</h2>
<h3 id="1091-프로퍼티-축약-표현">10.9.1 프로퍼티 축약 표현</h3>
<p>프로퍼티 값으로 변수를 사용하는 경우 변수 이름과 프로퍼티 키가 동일한 이름일 때 프로퍼티 키를 생략할 수 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">//ES6</span>
  <span class="kd">let</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">y</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
  
  <span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">x</span><span class="p">,</span> <span class="nx">y</span> <span class="p">};</span> <span class="c1">// { x: x, y: y}</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="c1">// {x: 1, y: 2}</span>
</code></pre></div></div>

<h3 id="1092-계산된-프로퍼티-이름">10.9.2 계산된 프로퍼티 이름</h3>
<p>문자열 또는 문자열로 타입 변환할 수 있는 값으로 평가되는 표현식을 사용해 프로퍼티 키를 동적으로 생성 할 수도 있다. 단, 프로퍼티 키로 사용할 표현식을 대괄호([…])로 묶어야 한다.</p>

<h4 id="es5">ES5</h4>
<p>객체 리터럴 외부에서 대괄호 표기법 사용([…])</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">prefix</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">prop</span><span class="dl">'</span><span class="p">;</span>
  <span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

  <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{};</span>

  <span class="nx">obj</span><span class="p">[</span><span class="nx">prefix</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">-</span><span class="dl">'</span> <span class="o">+</span> <span class="o">++</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">i</span><span class="p">;</span>
  <span class="nx">obj</span><span class="p">[</span><span class="nx">prefix</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">-</span><span class="dl">'</span> <span class="o">+</span> <span class="o">++</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">i</span><span class="p">;</span>
  <span class="nx">obj</span><span class="p">[</span><span class="nx">prefix</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">-</span><span class="dl">'</span> <span class="o">+</span> <span class="o">++</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">i</span><span class="p">;</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="c1">// {prop-1: 1, prop-2: 2, prop-3: 3}</span>
</code></pre></div></div>

<h4 id="es6">ES6</h4>
<p>객체 리터럴 내부에서 동적 생성</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">prefix</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">prop</span><span class="dl">'</span><span class="p">;</span>
  <span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

  <span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
    <span class="p">[</span><span class="s2">`</span><span class="p">${</span><span class="nx">prefix</span><span class="p">}</span><span class="s2">-</span><span class="p">${</span><span class="o">++</span><span class="nx">i</span><span class="p">}</span><span class="s2">`</span><span class="p">]:</span> <span class="nx">i</span><span class="p">,</span>
    <span class="p">[</span><span class="s2">`</span><span class="p">${</span><span class="nx">prefix</span><span class="p">}</span><span class="s2">-</span><span class="p">${</span><span class="o">++</span><span class="nx">i</span><span class="p">}</span><span class="s2">`</span><span class="p">]:</span> <span class="nx">i</span><span class="p">,</span>
    <span class="p">[</span><span class="s2">`</span><span class="p">${</span><span class="nx">prefix</span><span class="p">}</span><span class="s2">-</span><span class="p">${</span><span class="o">++</span><span class="nx">i</span><span class="p">}</span><span class="s2">`</span><span class="p">]:</span> <span class="nx">i</span>
  <span class="p">};</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="c1">// {prop-1: 1, prop-2: 2, prop-3: 3}</span>
</code></pre></div></div>

<h3 id="1093-메서드-축약-표현">10.9.3 메서드 축약 표현</h3>
<h4 id="es5-1">ES5</h4>
<p>프로퍼티 값으로 함수를 할당</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">sayHi</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Hi </span><span class="dl">'</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">};</span>

  <span class="nx">obj</span><span class="p">.</span><span class="nx">sayHi</span><span class="p">();</span> <span class="c1">// Hi Choi</span>
</code></pre></div></div>

<h4 id="es6-1">ES6</h4>
<p>function 키워드를 생략</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Choi</span><span class="dl">'</span><span class="p">,</span>
    <span class="nx">sayHi</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Hi </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">};</span>

  <span class="nx">obj</span><span class="p">.</span><span class="nx">sayHi</span><span class="p">();</span> <span class="c1">// Hi Choi</span>
</code></pre></div></div>]]></content><author><name>Hyejic</name></author><category term="js" /><category term="javascript" /><summary type="html"><![CDATA[모던 자바스크립트 Deep Dive 10장 객체 리터럴 내용 정리]]></summary></entry><entry><title type="html">09장 타입 변환과 단축 평가</title><link href="http://localhost:4000/js/modernJS09/" rel="alternate" type="text/html" title="09장 타입 변환과 단축 평가" /><published>2022-04-07T00:00:00+09:00</published><updated>2022-04-07T00:00:00+09:00</updated><id>http://localhost:4000/js/modernJS09</id><content type="html" xml:base="http://localhost:4000/js/modernJS09/"><![CDATA[<p><br /></p>

<h1 id="09장-타입-변환과-단축-평가">09장 타입 변환과 단축 평가</h1>

<h2 id="91-타입-변환이란">9.1 타입 변환이란?</h2>
<p>개발자가 의도적으로 값의 타입을 변환하는 것을 <code class="language-plaintext highlighter-rouge">명시적 타입 변환</code> 또는 <code class="language-plaintext highlighter-rouge">타입 캐스팅</code>이라 한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>

  <span class="c1">// 의도적으로 x의 값의 타입을 string으로 변경</span>
  <span class="kd">var</span> <span class="nx">str</span> <span class="o">=</span> <span class="nx">x</span><span class="p">.</span><span class="nx">toString</span><span class="p">();</span> 
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">str</span><span class="p">,</span> <span class="nx">str</span><span class="p">)</span> <span class="c1">// string 10</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">x</span><span class="p">,</span> <span class="nx">x</span><span class="p">)</span> <span class="c1">// number 10</span>
</code></pre></div></div>

<p>개발자의 의도와는 상관없이 자바스크립트 엔진에 의해 암묵적으로 타입이 자동 변환되는 것을 <code class="language-plaintext highlighter-rouge">암묵적 타입 변환</code> 또는 <code class="language-plaintext highlighter-rouge">타입 강제 변환</code> 이라 한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>

  <span class="c1">// 문자열 연결 연산자는 숫자 타입 x의 값을 바탕으로 새로운 문자열을 생성한다.</span>
  <span class="kd">var</span> <span class="nx">str</span> <span class="o">=</span> <span class="nx">x</span> <span class="o">+</span> <span class="dl">''</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">str</span><span class="p">,</span> <span class="nx">str</span><span class="p">)</span> <span class="c1">// string 10</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">x</span><span class="p">,</span> <span class="nx">x</span><span class="p">)</span> <span class="c1">// number 10</span>
  
</code></pre></div></div>

<h2 id="92-암묵적-타입-변환">9.2 암묵적 타입 변환</h2>
<p>암묵적 타입 변환이 발생하면 문자열, 숫자, 불리언과 같은 원시 타입 중 하나로 타일을 자동 변환한다.</p>

<h3 id="921-문자열-타입으로-변환">9.2.1 문자열 타입으로 변환</h3>
<p>(+)연산자는 피연산자 중 하나 이상이 문자열이면 문자열 연결 연산자로 동작한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="mi">1</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">2</span><span class="dl">'</span> <span class="c1">// "12"</span>
  <span class="mi">0</span> <span class="o">+</span> <span class="dl">''</span> <span class="c1">//  "0"</span>
  <span class="kc">true</span> <span class="o">+</span> <span class="dl">''</span> <span class="c1">// "true"</span>
  <span class="kc">undefined</span> <span class="o">+</span> <span class="dl">''</span> <span class="c1">// "undefined"</span>
  <span class="p">(</span><span class="nb">Symbol</span><span class="p">())</span> <span class="o">+</span> <span class="dl">''</span> <span class="c1">// typeError : Cannot conver a Symbol value to a string</span>
  <span class="p">({})</span> <span class="o">+</span> <span class="dl">''</span> <span class="c1">// "[object Object]"</span>
  <span class="p">[</span><span class="mi">10</span><span class="p">,</span><span class="mi">20</span><span class="p">]</span> <span class="o">+</span> <span class="dl">''</span> <span class="c1">// "10,20"</span>
  <span class="p">(</span><span class="kd">function</span><span class="p">(){})</span> <span class="c1">// "function(){}"</span>
</code></pre></div></div>

<h3 id="922-숫자-타입으로-변환">9.2.2 숫자 타입으로 변환</h3>
<p>산술 연산자의 피연산자 중에서 숫자 타입이 아닌 피연산자를 숫자 타입으로 암묵적 타입 변환한다. <code class="language-plaintext highlighter-rouge">피연산자를 숫자 타입으로 변환할 수 없는 경우</code>는 산술 연산을 수행할 수 없으므로 표현식의 <code class="language-plaintext highlighter-rouge">평가 결과는 NaN</code>이 된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="mi">1</span> <span class="o">-</span> <span class="dl">'</span><span class="s1">1</span><span class="dl">'</span> <span class="c1">// 0</span>
  <span class="mi">1</span> <span class="o">*</span> <span class="dl">'</span><span class="s1">10</span><span class="dl">'</span> <span class="c1">// 10</span>
  <span class="mi">1</span> <span class="o">/</span> <span class="dl">'</span><span class="s1">one</span><span class="dl">'</span> <span class="c1">// NaN</span>
  <span class="dl">'</span><span class="s1">1</span><span class="dl">'</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="c1">// true</span>
  <span class="o">+</span><span class="dl">''</span> <span class="c1">// 0</span>
  <span class="o">+</span><span class="dl">'</span><span class="s1">0</span><span class="dl">'</span> <span class="c1">// 0</span>
  <span class="o">+</span><span class="dl">'</span><span class="s1">1</span><span class="dl">'</span> <span class="c1">// 1</span>
  <span class="o">+</span><span class="dl">'</span><span class="s1">string</span><span class="dl">'</span> <span class="c1">// NaN</span>
  <span class="o">+</span><span class="kc">true</span> <span class="c1">// 1</span>
  <span class="o">+</span><span class="kc">false</span> <span class="c1">// 0</span>
  <span class="o">+</span><span class="kc">null</span> <span class="c1">// 0</span>
  <span class="o">+</span><span class="kc">undefined</span> <span class="c1">// NaN</span>
</code></pre></div></div>

<h3 id="923-불리언-타입으로-변환">9.2.3 불리언 타입으로 변환</h3>
<p>자바스크립트 엔진은 조건식의 평가 결과를 불리언 타입으로 암묵적 타입 변환한다. 이때 자바스크립트 엔진은 <code class="language-plaintext highlighter-rouge">불리언 타입이 아닌 값을 Truthy값 또는 Falsy 값으로 구분</code>한다.</p>

<h4 id="false-값으로-평가되는-falsy값">false 값으로 평가되는 Falsy값</h4>
<ul>
  <li>false</li>
  <li>undefined</li>
  <li>null</li>
  <li>0, -0</li>
  <li>NaN</li>
  <li>’‘(빈문자열)</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">if</span><span class="p">(</span><span class="dl">''</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">1</span><span class="dl">'</span><span class="p">);</span>
  <span class="k">if</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">2</span><span class="dl">'</span><span class="p">);</span>
  <span class="k">if</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">3</span><span class="dl">'</span><span class="p">);</span>
  <span class="k">if</span><span class="p">(</span><span class="dl">'</span><span class="s1">str</span><span class="dl">'</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">4</span><span class="dl">'</span><span class="p">);</span>
  <span class="k">if</span><span class="p">(</span><span class="kc">null</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">5</span><span class="dl">'</span><span class="p">);</span>

  <span class="c1">// 2 4</span>
</code></pre></div></div>

<h2 id="93-명시적-타입-변환">9.3 명시적 타입 변환</h2>
<p>개발자의 의도에 따라 타입을 변경.</p>

<h3 id="931-문자열-타입으로-변환">9.3.1 문자열 타입으로 변환</h3>
<ol>
  <li>String 생성자 함수를 new 연산자 없이 호출</li>
  <li>Object.prototype.toString 메서드 사용</li>
  <li>문자열 연결 연산자 이용</li>
</ol>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 1. String 생성자 함수</span>
  <span class="nb">String</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> <span class="c1">// "1"</span>
  <span class="nb">String</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span> <span class="c1">// "true"</span>

  <span class="c1">// 2. toString 메서드</span>
  <span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="nx">toString</span><span class="p">();</span> <span class="c1">// "1"</span>
  <span class="p">(</span><span class="kc">NaN</span><span class="p">).</span><span class="nx">toString</span><span class="p">();</span> <span class="c1">// "NaN"</span>
  <span class="p">(</span><span class="kc">false</span><span class="p">).</span><span class="nx">toString</span><span class="p">();</span> <span class="c1">// "false"</span>

  <span class="c1">// 3. 문자열 연결 연산자</span>
  <span class="mi">1</span> <span class="o">+</span> <span class="dl">''</span><span class="p">;</span> <span class="c1">// "1"</span>
  <span class="kc">Infinity</span> <span class="o">+</span> <span class="dl">''</span><span class="p">;</span> <span class="c1">// "Infinity"</span>
  <span class="kc">true</span> <span class="o">+</span> <span class="dl">''</span><span class="p">;</span> <span class="c1">// "true"</span>
</code></pre></div></div>

<h3 id="932-숫자타입으로-변환">9.3.2 숫자타입으로 변환</h3>
<ol>
  <li>Number 생성자 함수를 new 연산자 없이 호출</li>
  <li>parseInt, parseFloat 함수 사용(문자열만 숫자 타입으로 변환 가능)</li>
  <li>단항 산술 연산자 이용 (+)</li>
  <li>산술 연산자 이용 (*)</li>
</ol>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 1. Number 생성자 함수</span>
  <span class="nb">Number</span><span class="p">(</span><span class="dl">'</span><span class="s1">0</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// 0</span>
  <span class="nb">Number</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span> <span class="c1">// 1</span>

  <span class="c1">// 2. parseInt, parseFloat 함수</span>
  <span class="nb">parseInt</span><span class="p">(</span><span class="dl">'</span><span class="s1">0</span><span class="dl">'</span><span class="p">)</span> <span class="c1">// "1"</span>
  <span class="nb">parseFloat</span><span class="p">(</span><span class="dl">'</span><span class="s1">10.53</span><span class="dl">'</span><span class="p">)</span> <span class="c1">// 10.53</span>

  <span class="c1">// 3. + 단항 산술 연산자</span>
  <span class="o">+</span><span class="dl">'</span><span class="s1">0</span><span class="dl">'</span><span class="p">;</span> <span class="c1">// 0</span>
  <span class="o">+</span><span class="dl">'</span><span class="s1">-1</span><span class="dl">'</span><span class="p">;</span> <span class="c1">// -1</span>
  <span class="o">+</span><span class="kc">false</span><span class="p">;</span> <span class="c1">// 0</span>

  <span class="c1">// 3. * 산술 연산자</span>
  <span class="dl">'</span><span class="s1">0</span><span class="dl">'</span> <span class="o">*</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// 0</span>
  <span class="dl">'</span><span class="s1">-1</span><span class="dl">'</span> <span class="o">*</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// -1</span>
  <span class="kc">true</span> <span class="o">*</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// 1</span>
  
</code></pre></div></div>
<h3 id="933-불리언-타입으로-변환">9.3.3 불리언 타입으로 변환</h3>
<ol>
  <li>Boolean 생성자 함수를 new 연산자 없이 호출</li>
  <li>! 부정 논리 연산자를 두 번 사용</li>
</ol>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 1. Boolean 생성자 함수</span>
  <span class="nb">Boolean</span><span class="p">(</span><span class="dl">'</span><span class="s1">x</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// true</span>
  <span class="nb">Boolean</span><span class="p">(</span><span class="dl">''</span><span class="p">);</span> <span class="c1">// false</span>
  <span class="nb">Boolean</span><span class="p">(</span><span class="dl">'</span><span class="s1">false</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// true</span>
  <span class="nb">Boolean</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span> <span class="c1">// false</span>
  <span class="nb">Boolean</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> <span class="c1">// true</span>
  <span class="nb">Boolean</span><span class="p">(</span><span class="kc">NaN</span><span class="p">);</span> <span class="c1">// false</span>
  <span class="nb">Boolean</span><span class="p">({});</span> <span class="c1">// true</span>
  <span class="nb">Boolean</span><span class="p">([]);</span> <span class="c1">// true</span>

  <span class="c1">// 2. 부정 논리 연산자를 두 번</span>
  <span class="o">!!</span><span class="dl">'</span><span class="s1">x</span><span class="dl">'</span><span class="p">;</span> <span class="c1">// true</span>
  <span class="o">!!</span><span class="dl">''</span><span class="p">;</span> <span class="c1">// false</span>
  <span class="o">!!</span><span class="dl">'</span><span class="s1">false</span><span class="dl">'</span><span class="p">;</span> <span class="c1">// true</span>
  <span class="o">!!</span><span class="mi">0</span><span class="p">;</span> <span class="c1">// false</span>
  <span class="o">!!</span><span class="kc">NaN</span><span class="p">;</span> <span class="c1">// false</span>
  <span class="o">!!</span><span class="kc">undefined</span><span class="p">;</span> <span class="c1">// false</span>
  <span class="o">!!</span><span class="p">{};</span> <span class="c1">//true</span>
  <span class="o">!!</span><span class="p">[];</span> <span class="c1">//true</span>
</code></pre></div></div>

<h2 id="94-단축-평가">9.4 단축 평가</h2>
<h3 id="941-논리-연산자를-사용한-단축-평가">9.4.1 논리 연산자를 사용한 단축 평가</h3>
<h4 id="논리합-논리곱">논리합(||) 논리곱(&amp;&amp;)</h4>
<p><code class="language-plaintext highlighter-rouge">논리곱(&amp;&amp;)</code> 연산자는 두 개의 피연산자가 <code class="language-plaintext highlighter-rouge">모두 true로 평가될 때 true를 반환</code>한다. 논리곱 연산자는 논리 연산의 결과를 결정하는 두 번째 피연산자를 그대로 반환한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="dl">'</span><span class="s1">Cat</span><span class="dl">'</span> <span class="o">||</span> <span class="dl">'</span><span class="s1">Dog</span><span class="dl">'</span> <span class="c1">// "Dog"</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">논리합(||)</code> 연산자는 두 개의 피연산자 중 <code class="language-plaintext highlighter-rouge">하나만 true로 평가되어도 true를 반환</code>한다. 논리합 연산자는 논리 연산의 결과를 첫 번째 피 연산자가 결정한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="dl">'</span><span class="s1">Cat</span><span class="dl">'</span> <span class="o">||</span> <span class="dl">'</span><span class="s1">Dog</span><span class="dl">'</span> <span class="c1">// "Cat"</span>
</code></pre></div></div>

<p>논리 연산의 결과를 결정하는 피연산자를 타입 변환하지 않고 그대로 반환한다. 이를 단축 평가라 한다. 단축평가는 표현식을 평가하는 도중에 평가가 확정된 경우 나머지 평가 과정을 생략한다.</p>

<table>
  <thead>
    <tr>
      <td>단축 평가 표현식</td>
      <td>평가 결과</td>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>true || anything</td>
      <td>true</td>
    </tr>
    <tr>
      <td>false || anything</td>
      <td>anything</td>
    </tr>
    <tr>
      <td>true &amp;&amp; anything</td>
      <td>anything</td>
    </tr>
    <tr>
      <td>false &amp;&amp; anything</td>
      <td>false</td>
    </tr>
  </tbody>
</table>

<h4 id="if문-대체">if문 대체</h4>
<p>어떤 조건이 Truthy 값일 때 무언가를 해야 한다면 논리곱(&amp;&amp;) 연산자 표현식으로 if문을 대체할 수 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">done</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
  <span class="kd">var</span> <span class="nx">message</span> <span class="o">=</span> <span class="dl">''</span><span class="p">;</span>
  
  <span class="c1">// if문 사용</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="nx">message</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">완료</span><span class="dl">'</span><span class="p">;</span>

  <span class="c1">// 논리곱 연산자 표현</span>
  <span class="nx">message</span> <span class="o">=</span> <span class="nx">done</span> <span class="o">&amp;&amp;</span> <span class="dl">'</span><span class="s1">완료</span><span class="dl">'</span><span class="p">;</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">message</span><span class="p">);</span> <span class="c1">// 완료</span>
</code></pre></div></div>
<p>어떤 조건이 Falsy 값일 때 무언가를 해야 한다면 논리합(||) 연산자 표현식으로 if문을 대체할 수 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">done</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
  <span class="kd">var</span> <span class="nx">message</span> <span class="o">=</span> <span class="dl">''</span><span class="p">;</span>
  
  <span class="c1">// if문 사용</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">done</span><span class="p">)</span> <span class="nx">message</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">미완료</span><span class="dl">'</span><span class="p">;</span>

  <span class="c1">// 논리곱 연산자 표현</span>
  <span class="nx">message</span> <span class="o">=</span> <span class="nx">done</span> <span class="o">||</span> <span class="dl">'</span><span class="s1">미완료</span><span class="dl">'</span><span class="p">;</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">message</span><span class="p">);</span> <span class="c1">// 미완료</span>
</code></pre></div></div>

<h3 id="942-옵셔널-체이닝-연산자">9.4.2 옵셔널 체이닝 연산자</h3>
<p>ES11에서 도입된 <code class="language-plaintext highlighter-rouge">옵셔널 체이닝 연산자 ?.는 좌항의 피연산자가 null 또는 undefined인 경우 undefined를 반환</code>하고, 그렇지 않으면 우항의 프로퍼티 참조를 이어간다. 객체를 가리키기를 기대하는 변수가 null 또는 undefined가 아닌지 확인하고 프로퍼티를 참조할 때 유용하다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">elem</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
  <span class="kd">var</span> <span class="nx">value</span> <span class="o">=</span> <span class="nx">elem</span><span class="p">?.</span><span class="nx">value</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">value</span><span class="p">);</span> <span class="c1">// undefined </span>
</code></pre></div></div>

<p>좌항 피연산자가 false로 평가되는 Falsy 값이라도 null 또는 undefined가 아니면 우항의 프로퍼티 참조를 이어간다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">str</span> <span class="o">=</span> <span class="dl">''</span><span class="p">;</span>
  <span class="kd">var</span> <span class="nx">length</span> <span class="o">=</span> <span class="nx">str</span><span class="p">?.</span><span class="nx">length</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">length</span><span class="p">);</span> <span class="c1">// 0</span>
</code></pre></div></div>

<h3 id="943-null-병합-연산자">9.4.3 null 병합 연산자</h3>
<p>ES11에서 도입된 null 병합 연산자 ??는 좌항의 피연산자가 null 또는 undefined인 경우 우항의 피연산자를 반환하고, 그렇지 않으면 좌항의 피연산자를 반환한다. 변수에 기본값을 설정할 때 유용하다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="kc">null</span> <span class="p">??</span> <span class="dl">'</span><span class="s1">default string</span><span class="dl">'</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span> <span class="c1">// "default string"</span>
</code></pre></div></div>]]></content><author><name>Hyejic</name></author><category term="js" /><category term="javascript" /><summary type="html"><![CDATA[모던 자바스크립트 Deep Dive 09장 타입 변환과 단축 평가 내용 정리]]></summary></entry><entry><title type="html">06장 데이터 타입</title><link href="http://localhost:4000/js/modernJS06/" rel="alternate" type="text/html" title="06장 데이터 타입" /><published>2022-04-06T00:00:00+09:00</published><updated>2022-04-06T00:00:00+09:00</updated><id>http://localhost:4000/js/modernJS06</id><content type="html" xml:base="http://localhost:4000/js/modernJS06/"><![CDATA[<p><br /></p>

<h1 id="06장-데이터-타입">06장 데이터 타입</h1>
<table>
  <tr>
    <td>구분</td>
    <td>데이터 티입</td>
    <td>설명</td>
  </tr>
  <tr>
    <td rowspan="6">원시 타입</td>
    <td>숫자 타입(number)</td>
    <td>숫자, 정수와 실수 구분 없이 하나의 숫자 타입만 존재</td>
  </tr>
  <tr>
    <td>문자열 타입(string)</td>
    <td>문자열</td>
  </tr>
  <tr>
    <td>불리언 타입(boolean)</td>
    <td>논리적 참(true)과 거짓(false)</td>
  </tr>
  <tr>
    <td>undefined 타입</td>
    <td>var 키워드로 선언된 변수에 암묵적으로 할당되는 값</td>
  </tr>
  <tr>
    <td>null 타입</td>
    <td>값이 없다는 것을 의도적으로 명시할 때 사용하는 값</td>
  </tr>
  <tr>
    <td>실벌 타입(symbol)</td>
    <td>ES6에 추가된 7번째 타입</td>
  </tr>
  <tr>
    <td colspan="2">객체 타입</td>
    <td>객체, 함수, 배열 등</td>
  </tr>

</table>

<h2 id="61-숫자-타입">6.1 숫자 타입</h2>
<p>자바스크립트에서는 <code class="language-plaintext highlighter-rouge">모슨 수를 실수로 처리</code>하며, 정수만 표현하기 위한 데이터 타입이 별도로 존재하지 않는다. 따라서 정수로 표시된다 해도 사실은 실수라는 것을 의미한다. 자바스크립트는 2진수, 8진수, 16진수를 표현하기 위한 데이터 타입을 제공하지 않기 때문에 이들 값을 참조하면 모두 10진수로 해석된다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 모두 숫자 타입</span>
  <span class="kd">var</span> <span class="nx">integer</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span> <span class="c1">// 정수</span>
  <span class="kd">var</span> <span class="nx">double</span> <span class="o">=</span> <span class="mf">10.12</span><span class="p">;</span> <span class="c1">// 실수</span>
  <span class="kd">var</span> <span class="nx">negative</span> <span class="o">=</span> <span class="o">-</span><span class="mi">20</span><span class="p">;</span> <span class="c1">// 음의 정수</span>

  <span class="c1">// 진수</span>
  <span class="kd">var</span> <span class="nx">binary</span> <span class="o">=</span> <span class="mb">0b01000001</span><span class="p">;</span> <span class="c1">// 2진수</span>
  <span class="kd">var</span> <span class="nx">octal</span> <span class="o">=</span> <span class="mo">0o101</span><span class="p">;</span> <span class="c1">// 8진수</span>
  <span class="kd">var</span> <span class="nx">hex</span> <span class="o">=</span> <span class="mh">0x41</span><span class="p">;</span> <span class="c1">// 16진수</span>

  <span class="c1">// 표기법만 다를 뿐 모두 같은 값이다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">binary</span><span class="p">)</span> <span class="c1">// 65</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">octal</span><span class="p">)</span> <span class="c1">// 65</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">hex</span><span class="p">)</span> <span class="c1">// 65</span>
</code></pre></div></div>

<h2 id="62-문자열-타입">6.2 문자열 타입</h2>
<p>문자열 타입은 <code class="language-plaintext highlighter-rouge">텍스트 데이터</code>를 나타내는데 사용한다. 자바스크립트에서 가장 일반적인 표기법은 작은따옴표(‘‘)를 사용하는 것이다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">string</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">hello</span><span class="dl">'</span><span class="p">;</span>
</code></pre></div></div>

<h2 id="63-템플릿-리터럴">6.3 템플릿 리터럴</h2>
<p>ES6부터 템플릿 리터럴이라고 하는 새로운 문자열 표기법이 도입되었다. <code class="language-plaintext highlighter-rouge">백틱</code>을 사용해 표현한다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">string</span> <span class="o">=</span> <span class="s2">`hello`</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="631-멀티라인-문자열">6.3.1 멀티라인 문자열</h3>
<p>일반 문자열 내에서는 줄바꿈이 허용되지 않는다. 따라서 일반 문자열 내에서 줄바꿈을 표현하려면 백슬래스로 시작하는 이스케이프 시퀀스를 사용해야한다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">string</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">hello
  world.</span><span class="dl">'</span><span class="p">;</span> 
  <span class="c1">// syntaxError</span>
  <span class="kd">var</span> <span class="nx">string</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">hello </span><span class="se">\n</span><span class="s1"> world.</span><span class="dl">'</span><span class="p">;</span> 
  <span class="kd">var</span> <span class="nx">template</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">&lt;ul&gt;</span><span class="se">\n\t</span><span class="s1">&lt;li&gt;hello&lt;/li&gt;</span><span class="se">\n</span><span class="s1">&lt;/ul&gt;</span><span class="dl">'</span><span class="p">;</span> 
</code></pre></div></div>

<p>템플릿 리터럴 내에서는 이스케이프 시퀀스를 사용하지 않고도 줄바꿈과 공백이 허용된다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">string</span> <span class="o">=</span> <span class="s2">`hello
    wolrd`</span><span class="p">;</span>
  <span class="kd">var</span> <span class="nx">template</span> <span class="o">=</span> <span class="s2">`&lt;ul&gt;
    &lt;li&gt;hello&lt;/li&gt;
  &lt;/ul&gt;`</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="632-표현식-삽입">6.3.2 표현식 삽입</h3>
<p>문자열은 문자열 연산자 +를 사용해 연결이 가능하고, 템플릿 리터럴 내에서는 ${}으로 표현식을 감싸 사용한다. 이때 표현식의 평가 결과가 문자열이 아니더라도 문자열로 타입이 강제 변환되어 삽입된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="kd">var</span> <span class="nx">first</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Ung-mo</span><span class="dl">'</span><span class="p">;</span>
   <span class="kd">var</span> <span class="nx">last</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Lee</span><span class="dl">'</span><span class="p">;</span>

   <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">My name is </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">first</span> <span class="o">+</span> <span class="dl">'</span><span class="s1"> </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">last</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">.</span><span class="dl">'</span><span class="p">)</span> <span class="c1">// 문자열</span>
   <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`My name is </span><span class="p">${</span><span class="nx">first</span><span class="p">}</span><span class="s2"> </span><span class="p">${</span><span class="nx">last</span><span class="p">}</span><span class="s2">.`</span><span class="p">)</span> <span class="c1">// 템플릿 리터럴</span>

   <span class="c1">// My name is Ung-mo Lee</span>
</code></pre></div></div>
<h2 id="64-불리언-타입">6.4 불리언 타입</h2>
<p>논리적 참, 거짓을 나타내는 true와 false뿐이다.</p>

<h2 id="65-undefined-타입">6.5 undefined 타입</h2>
<p>undefined가 유일하다.<br />
undefined는 개발자가 의도적으로 할당하기 위한 값이 아니라 자바스크립트 엔진이 변수를 초기화 할 때 사용하는 값이다.
따라서 변수를 <code class="language-plaintext highlighter-rouge">참조했을 때 undefined가 반환된다면</code> 참조한 변수가 선언 이후 값이 할당된적이 없는, 즉 <code class="language-plaintext highlighter-rouge">초기화 되지 않은 변수</code>라는 것을 간파할 수 있다.<br />
<code class="language-plaintext highlighter-rouge">변수에 값이 없다는 것을 명시</code>하고 싶을 때는 <code class="language-plaintext highlighter-rouge">null</code>을 할당한다.</p>

<h2 id="66-null-타입">6.6 null 타입</h2>
<p>null은 변수에 값이 없다는 것을 의도적으로 명시할 때 사용한다. 또는 함수가 유효한 값을 반환할 수 없는 경우 명시적으로 null을 반환하기도 한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">element</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">'</span><span class="s1">.myClass</span><span class="dl">'</span><span class="p">);</span>
  <span class="c1">// HTML문서에 myClass라는 클래스를 가진 요소가 없다면 null 반환</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">element</span><span class="p">)</span> <span class="c1">// null</span>
</code></pre></div></div>

<h2 id="67-심벌-타입">6.7 심벌 타입</h2>
<p>ES6에서 추가된 7번째 타입으로, 변경 불가능한 원시 타입의 값이다. 심벌은 symbol 함수를 호출해 생성한다.  이때 생성된 심벌값은 <code class="language-plaintext highlighter-rouge">외부에 노출되지 않으며, 다른 값과 절대 중복되지 않는 유일무이한 값</code>이다.</p>

<h2 id="68-객체-타입">6.8 객체 타입</h2>
<p>자바스크립트 타입은 크게 원시 타입과 객체타입으로 분류된다. 자바스크립트는 객체 기반의 언어이며, 자바스크립트를 이루고 있는 거의 모든 것이 객체다.</p>

<h2 id="69-데이터-타입의-필요성">6.9 데이터 타입의 필요성</h2>
<ul>
  <li><code class="language-plaintext highlighter-rouge">값을 저장</code>할 때 확보해야 하는 <code class="language-plaintext highlighter-rouge">메모리 공간의 크기를 결정</code>하기 위해<br />
변수에 할당되는 값의 데이터 타입에 따라 확보해야 할 메모리 공간의 크기가 결정된다.</li>
  <li><code class="language-plaintext highlighter-rouge">값을 참조</code>할 때 한 번에 읽어 들여야 할 <code class="language-plaintext highlighter-rouge">메모리 공간의 크기를 결정</code>하기 위해<br />
선두 메모리 셀 주소를 기준으로 값의 데이터 타입에 맞는 메모리 셀의 개수를 읽어들인다.</li>
  <li>메모리에서 읽어 들인 <code class="language-plaintext highlighter-rouge">2진수를 어떻게 해석할지 결정</code>하기 위해<br />
01000001 이라는 2진수를 숫자로 해석하면 65지만 문자열로 해석하면 ‘A’다</li>
</ul>

<h2 id="610-동적-타이핑">6.10 동적 타이핑</h2>
<p><code class="language-plaintext highlighter-rouge">자바스크립트의 변수는 선언이 아닌 할당에 의해 타입이 결정(타입 추론)된다.</code> 그리고 재할당에 의해 변수의 타입은 언제든지 동적으로 변할 수 있다. 이러한 특징을 동적 타이핑 이라 하며, 자바스크립트를 동적 타입 언어라 한다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">foo</span><span class="p">;</span>
  <span class="nx">foo</span> <span class="o">=</span> <span class="mi">123</span><span class="p">;</span> <span class="c1">// number</span>
  <span class="nx">foo</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">문자열</span><span class="dl">'</span><span class="p">;</span> <span class="c1">// string</span>
  <span class="nx">foo</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span> <span class="c1">// boolean</span>
  <span class="nx">foo</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span> <span class="c1">// object</span>
  <span class="nx">foo</span> <span class="o">=</span> <span class="nb">Symbol</span><span class="p">();</span> <span class="c1">// symbol</span>
  <span class="nx">foo</span> <span class="o">=</span> <span class="p">[];</span> <span class="c1">// object</span>
  <span class="nx">foo</span> <span class="o">=</span> <span class="p">{};</span> <span class="c1">// object</span>
  <span class="nx">foo</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{}</span> <span class="c1">// function</span>
</code></pre></div></div>]]></content><author><name>Hyejic</name></author><category term="js" /><category term="javascript" /><summary type="html"><![CDATA[모던 자바스크립트 Deep Dive 06장 데이터 타입 내용 정리]]></summary></entry><entry><title type="html">04장 변수</title><link href="http://localhost:4000/js/modernJS04/" rel="alternate" type="text/html" title="04장 변수" /><published>2022-04-05T00:00:00+09:00</published><updated>2022-04-05T00:00:00+09:00</updated><id>http://localhost:4000/js/modernJS04</id><content type="html" xml:base="http://localhost:4000/js/modernJS04/"><![CDATA[<p><br /></p>

<h1 id="04장-변수">04장 변수</h1>
<h2 id="41-변수란-무엇인가-왜-필요한가">4.1 변수란 무엇인가? 왜 필요한가?</h2>
<h3 id="변수란">변수란?</h3>
<p><code class="language-plaintext highlighter-rouge">변수</code>는 하나의 값을 저장하기 위해 확보한 메모리 공간 자체 또는 그 멤모리 공간을 식별하기 위해 붙인 이름이다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">userId</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="kd">var</span> <span class="nx">userName</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Lee</span><span class="dl">'</span><span class="p">;</span>
  <span class="c1">// 객체나 배열 같은 자료구조를 사용하면 여러개의 값을 하나로 그룹화해서 하나의 값처럼 사용할 수 있다.</span>
  <span class="kd">var</span> <span class="nx">user</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="na">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Lee</span><span class="dl">'</span><span class="p">},</span>
    <span class="p">{</span><span class="na">id</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Kim</span><span class="dl">'</span><span class="p">}</span>
  <span class="p">]</span>
</code></pre></div></div>
<h3 id="변수-명칭">변수 명칭</h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">resualt</span> <span class="o">=</span> <span class="mi">10</span> <span class="o">+</span> <span class="mi">20</span><span class="p">;</span>
</code></pre></div></div>
<p>변수 명 -&gt; result<br />
변수 값 -&gt; 변수에 저장된 값 30<br />
할당 -&gt; 변수에 값을 저장하는 것<br />
참초 -&gt; 변수에 저장된 값을 읽어 들이는 것</p>

<h2 id="42-식별자">4.2 식별자</h2>
<p>변수 이름을 <code class="language-plaintext highlighter-rouge">식별자</code>라고도 한다. <code class="language-plaintext highlighter-rouge">식별자는 값이 아니라 메모리 주소를 기억하고 있다.</code> 식별자로 값을 구별해서 식별한다는 것은 식별자가 기억하고 있는 메모리 주소를 통해 메모리 공간에 저장된 값에 접근할 수 있다는 의미이다. 식별자는 메모리 주소에 붙인 이름이라고 할 수 있다.</p>

<h2 id="43-변수-선언">4.3 변수 선언</h2>
<p>변수를 선언할 때는 var, let, const 키워드를 사용한다.</p>
<blockquote>
  <p>var 키워드는 여러 단점이 있다. 가장 대표적인 것이 블록 레벨 스코프를 지원하지 않고 함수 레벨 스코프를 지원한다는 것이다. 이로 인해 의도치 않게 전역 변수가 선언되어 심각한 부작용이 발생하기도 한다.
<br />
자바스크립트 엔진은 변수 선언을 다음과 같은 2단계에 거쳐 수행한다.</p>
</blockquote>

<ol>
  <li>변수 선언<br />
변수의 이름을 등록하고 값을 저장할 메모리 공간 확보.
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="kd">var</span> <span class="nx">score</span><span class="p">;</span> <span class="c1">// 변수 선언</span>
</code></pre></div>    </div>
  </li>
  <li>변수 초기화<br />
변수 선언 후, 아직 변수에 값을 할당하지 않았지만 자바스크립트 엔진에 의해 <code class="language-plaintext highlighter-rouge">undefined라는 값이 암묵적으로 할당되어 초기화</code> 된다.</li>
</ol>

<h2 id="44-변수-선언의-실행-시점과-변수-호이스팅">4.4 변수 선언의 실행 시점과 변수 호이스팅</h2>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">80</span>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">score</span><span class="p">)</span> <span class="c1">// undefined</span>

  <span class="kd">var</span> <span class="nx">score</span><span class="p">;</span> <span class="c1">// 변수 선언</span>
</code></pre></div></div>
<p>console.log(score);가 실행되는 시점에는 아직 score 변수의 선언이 실행되지 않았으므로 참조에러가 발생할 것처럼 보인다. 하지만 참조 에러가 발생하지 않고 undefined가 출력된다.<br />
그 이유는 <code class="language-plaintext highlighter-rouge">변수 선언</code>이 소스코드가 한 줄씩 순차적으로 실행되는 시점, 즉 <code class="language-plaintext highlighter-rouge">런타임이 아니라 그 이전 단계(소스코드 평가 과정)에서 먼저 실행되기 때문이다.</code><br />
변수 선언문이 코드의 선두로 끌어 올려진 것처럼 동작하는 자바스크립트 고유의 특징을 <code class="language-plaintext highlighter-rouge">호이스팅</code>이라 한다.</p>

<h2 id="45-값의-할당">4.5 값의 할당</h2>
<p><code class="language-plaintext highlighter-rouge">변수 선언</code>은 소스코드가 순차적으로 실행되는 시점인 <code class="language-plaintext highlighter-rouge">런타임 이전</code>에 먼저 실행되지만 <code class="language-plaintext highlighter-rouge">변수 값의 할당은</code> 소스코드가 순차적으로 실행되는 시점인 <code class="language-plaintext highlighter-rouge">런타임에 실행</code>된다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">score</span><span class="p">)</span> <span class="c1">// undefined</span>

  <span class="kd">var</span> <span class="nx">score</span><span class="p">;</span> <span class="c1">// 1 변수 선언</span>
  <span class="nx">score</span> <span class="o">=</span> <span class="mi">80</span><span class="p">;</span> <span class="c1">// 2 값의 할당</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">score</span><span class="p">);</span> <span class="c1">// 80</span>
</code></pre></div></div>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">score</span><span class="p">)</span> <span class="c1">// undefined</span>

  <span class="nx">score</span> <span class="o">=</span> <span class="mi">80</span><span class="p">;</span> <span class="c1">// 값의 할당</span>
  <span class="kd">var</span> <span class="nx">score</span><span class="p">;</span> <span class="c1">// 변수 선언</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">score</span><span class="p">);</span> <span class="c1">// 80</span>
  <span class="c1">// score 변수 선언이 호이스팅되어 undefinde로 초기화 되었고, 런타임 시 순차적인 실행에 의해 80으로 값이 할당되었다.</span>
</code></pre></div></div>

<h2 id="46-값의-재할당">4.6 값의 재할당</h2>
<p>재할당은 변수에 저장된 값을 다른 값으로 변경한다. 만약 <code class="language-plaintext highlighter-rouge">값을 재할당할 수 없어서 변수에 저장된 값을 변경할 수 없다면 변수가 아니라 상수라 한다.</code> 상수는 단 한번만 할당할 수 있는 변수다.</p>
<blockquote>
  <p>ES6에서 도입된 const 키워드를 사용해 선언한 변수는 재할당이 금지된다. const 키워드를 사용하면 상수를 표현할 수 있다.</p>
</blockquote>

<h3 id="변수-값-할당에-따른-메모리-변화">변수 값 할당에 따른 메모리 변화</h3>
<ol>
  <li>변수 선언시 undefined로 초기화</li>
  <li>80이라는 값을 할당</li>
  <li>90으로 값을 재할당</li>
</ol>

<p>(메모리 그림)</p>

<p>저장되어 있던 이전 값의 메모리 공간을 지우고 새롭게 저장하는 것이 아니라 새로운 메모리 공간을 확보하고 그 공간에 재할당한 값을 저장한다.</p>

<p>그림에서 알 수 있듯이 undefined와 80이 더 이상 필요하지 않다는 것을 의미한다. 이런 불필요한 값들은 가비지 콜렉터에 의해 메모리에서 자동 해제된다.</p>

<h2 id="47-식별자-네이밍-규칙">4.7 식별자 네이밍 규칙</h2>
<ul>
  <li>특수문자를 제외한 문자, 숫자, 언더스코어(_), 달러 기호($)를 포함할 수 있다.</li>
  <li>숫자로 시작하는 것은 허용하지 않는다.</li>
  <li>예약어는 식별자로 사용할 수 없다. [ <a href="http://www.w3bai.com/ko/js/js_reserved.html" title="예약어 확인 링크">javascript 예약어</a> ]</li>
  <li>변수 이름은 변수의 존재 목적을 쉽게 이해할 수 있도록 의미를 명확히 표현해야 한다. (가독성 고려)
    <h3 id="네이밍-컨벤션">네이밍 컨벤션</h3>
    <p>하나 이상의 영어 단어로 구성된 식별자를 만들때 가독성 좋게 단어를 한눈에 구분하기 위해 규정한 명명 규칙</p>
  </li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">firstName</span><span class="p">;</span> <span class="c1">// 카멜 케이스(camelCase)</span>
  <span class="kd">var</span> <span class="nx">first_name</span><span class="p">;</span> <span class="c1">// 스네이크 케이스(snake_case)</span>
  <span class="kd">var</span> <span class="nx">FirstName</span><span class="p">;</span> <span class="c1">// 파스칼 케이스(PascalCase)</span>
   
  <span class="c1">// 헝가이언 케이스 (typeHungarianCase)</span>
  <span class="kd">var</span> <span class="nx">strFirstName</span><span class="p">;</span> <span class="c1">// type + identifier</span>
  <span class="kd">var</span> <span class="nx">$elem</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">myId</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// Dom 노드</span>
  <span class="kd">var</span> <span class="nx">ovservable$</span> <span class="o">=</span> <span class="nx">fromEvent</span><span class="p">(</span><span class="nb">document</span><span class="p">,</span> <span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// RxJS 옵저버블</span>
</code></pre></div></div>]]></content><author><name>Hyejic</name></author><category term="js" /><category term="javascript" /><summary type="html"><![CDATA[모던 자바스크립트 Deep Dive 04장 변수 내용 정리]]></summary></entry><entry><title type="html">github.io 블로그 첫 포스팅입니다</title><link href="http://localhost:4000/js/firstpost/" rel="alternate" type="text/html" title="github.io 블로그 첫 포스팅입니다" /><published>2022-04-04T00:00:00+09:00</published><updated>2022-04-04T00:00:00+09:00</updated><id>http://localhost:4000/js/firstpost</id><content type="html" xml:base="http://localhost:4000/js/firstpost/"><![CDATA[<h1 id="제목">제목</h1>
<p>테스트입니다.</p>]]></content><author><name>Hyejic</name></author><category term="js" /><category term="javascript" /><summary type="html"><![CDATA[Github Blog글을 처음 써보며.]]></summary></entry><entry><title type="html">Markdown 기본 문법</title><link href="http://localhost:4000/md/markdown/" rel="alternate" type="text/html" title="Markdown 기본 문법" /><published>2022-04-04T00:00:00+09:00</published><updated>2022-04-04T00:00:00+09:00</updated><id>http://localhost:4000/md/markdown</id><content type="html" xml:base="http://localhost:4000/md/markdown/"><![CDATA[<p><br /></p>

<h2 id="제목header">제목(header)</h2>
<p>#의 갯수로 제목의 레벨 결정 h1 ~ h6</p>
<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gh"># 제목 1</span>
<span class="gu">## 제목 2</span>
<span class="gu">### 제목 3</span>
<span class="gu">#### 제목 4</span>
<span class="gu">##### 제목 5</span>
<span class="gu">###### 제목 6</span>
</code></pre></div></div>
<p><br />
<br /></p>

<h2 id="문장paragraph">문장(Paragraph)</h2>
<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>동해물과 백두산이 마르고 닳도록
하느님이 보우하사 우리나라 만세
</code></pre></div></div>
<p>동해물과 백두산이 마르고 닳도록
하느님이 보우하사 우리나라 만세
<br />
<br /></p>

<h2 id="줄바꿈line-breaks">줄바꿈(Line Breaks)</h2>
<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>동해물과 백두산이 마르고 닳도록  <span class="c">&lt;!--띄어쓰기 2번--&gt;</span>
하느님이 보우하사 우리나라 만세  
무궁화 삼천리 화려 강산<span class="nt">&lt;br/&gt;</span>
대한 사람 대한으로 길이 보전하세  
</code></pre></div></div>
<p>동해물과 백두산이 마르고 닳도록<br />
하느님이 보우하사 우리나라 만세<br />
무궁화 삼천리 화려 강산<br />
대한 사람 대한으로 길이 보전하세
<br />
<br /></p>

<h2 id="강조emphasis">강조(Emphasis)</h2>
<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="ge">_이텔릭_</span>  
<span class="gs">**두껍게**</span>  
<span class="gs">**_이텔릭 + 두껍게_**</span>  
~~취소선~~  
<span class="nt">&lt;u&gt;</span>밑줄<span class="nt">&lt;/u&gt;</span>
</code></pre></div></div>
<p><em>이텔릭</em><br />
<strong>두껍게</strong><br />
<strong><em>이텔릭 + 두껍게</em></strong><br />
<del>취소선</del><br />
<u>밑줄</u>
<br />
<br /></p>

<h2 id="목록list">목록(List)</h2>
<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">1.</span> 순서가 필요한 목록
<span class="p">1.</span> 순서가 필요한 목록
<span class="p">    1.</span> 순서가 필요한 목록 
<span class="p">    1.</span> 순서가 필요한 목록
<span class="p">    1.</span> 순서가 필요한 목록
<span class="p">1.</span> 순서가 필요한 목록
<span class="p">
-</span> 순서가 필요하지 않은 목록
<span class="p">-</span> 순서가 필요하지 않은 목록
<span class="p">-</span> 순서가 필요하지 않은 목록
<span class="p">    -</span> 순서가 필요하지 않은 목록
<span class="p">    -</span> 순서가 필요하지 않은 목록
<span class="p">    -</span> 순서가 필요하지 않은 목록
<span class="p">-</span> 순서가 필요하지 않은 목록
</code></pre></div></div>
<ol>
  <li>순서가 필요한 목록</li>
  <li>순서가 필요한 목록
    <ol>
      <li>순서가 필요한 목록</li>
      <li>순서가 필요한 목록</li>
      <li>순서가 필요한 목록</li>
    </ol>
  </li>
  <li>순서가 필요한 목록</li>
</ol>

<ul>
  <li>순서가 필요하지 않은 목록</li>
  <li>순서가 필요하지 않은 목록</li>
  <li>순서가 필요하지 않은 목록
    <ul>
      <li>순서가 필요하지 않은 목록</li>
      <li>순서가 필요하지 않은 목록</li>
      <li>순서가 필요하지 않은 목록</li>
    </ul>
  </li>
  <li>순서가 필요하지 않은 목록
<br />
<br /></li>
</ul>

<h2 id="링크links">링크(Links)</h2>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"https://google.com"</span><span class="nt">&gt;</span>GOOGLE<span class="nt">&lt;/a&gt;</span>
<span class="p">[</span><span class="nv">GOOGLE</span><span class="p">](</span><span class="sx">https://google.com</span><span class="p">)</span>

<span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"https://naver.com"</span> <span class="na">title=</span><span class="s">"naver로 이동!!!"</span><span class="nt">&gt;</span>naver<span class="nt">&lt;/a&gt;</span>
<span class="p">[</span><span class="nv">NAVER</span><span class="p">](</span><span class="sx">https://naver.com</span> <span class="nn">"naver로 이동!!!"</span><span class="p">)</span>
</code></pre></div></div>
<p><a href="https://google.com">GOOGLE</a>
<a href="https://google.com">GOOGLE</a></p>

<p><a href="https://naver.com" title="naver로 이동!!!">naver</a>
<a href="https://naver.com" title="naver로 이동!!!">NAVER</a>
<br />
<br /></p>

<h2 id="이미지images">이미지(Images)</h2>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">![](</span><span class="sx">)</span>
<span class="p">![</span><span class="nv">Hyejic</span><span class="p">](</span><span class="sx">/assets/images/logo.png</span><span class="p">)</span>
<span class="p">[</span><span class="nv">![Hyejic</span><span class="p">](</span><span class="sx">assets/images/logo.png</span><span class="p">)</span>](https://hyejic.github.io/)
</code></pre></div></div>
<p><img src="" alt="" />
<img src="/assets/images/logo.png" alt="Hyejic" />
<a href="https://hyejic.github.io/"><img src="/assets/images/logo.png" alt="Hyejic" /></a>
<br />
<br /></p>

<h2 id="인용문blockquote">인용문(BlockQuote)</h2>
<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gt">&gt; 남의 말이나 글에서 직접 또는 간접으로 따온 문장.  </span>
<span class="gt">&gt; (네이버 국어 사전)</span>
<span class="gt">
&gt; 인용문을 작성하세요!</span>
<span class="gt">&gt;&gt; 중첩</span>
<span class="gt">&gt;&gt;&gt; 중첩1</span>
<span class="gt">&gt;&gt;&gt; 중첩2</span>
<span class="gt">&gt;&gt;&gt; 중첩3</span>
</code></pre></div></div>
<blockquote>
  <p>남의 말이나 글에서 직접 또는 간접으로 따온 문장.<br />
(네이버 국어 사전)</p>
</blockquote>

<blockquote>
  <p>인용문을 작성하세요!</p>
  <blockquote>
    <p>중첩</p>
    <blockquote>
      <p>중첩1
중첩2
중첩3
<br />
<br /></p>
    </blockquote>
  </blockquote>
</blockquote>

<h2 id="인라인inline-코드-강조">인라인(Inline) 코드 강조</h2>
<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>css에서 <span class="sb">`background`</span> 혹은 <span class="sb">`background-image`</span> 속성으로 요소에 배경 이미지를 삽입할 수 있습니다.
</code></pre></div></div>
<p>css에서 <code class="language-plaintext highlighter-rouge">background</code> 혹은 <code class="language-plaintext highlighter-rouge">background-image</code> 속성으로 요소에 배경 이미지를 삽입할 수 있습니다.
<br />
<br /></p>

<h2 id="블럭block-코드-강조">블럭(Block) 코드 강조</h2>
<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="p">```</span><span class="nl">html
</span>  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"https://google.com"</span><span class="nt">&gt;</span>GOOGLE<span class="nt">&lt;/a&gt;</span>
  <span class="p">```</span>

  <span class="p">```</span><span class="nl">css
</span>  <span class="nc">.inner</span> <span class="p">{</span>
    <span class="nl">width</span><span class="p">:</span> <span class="m">100%</span>
  <span class="p">}</span>
  <span class="p">```</span>

  <span class="p">```</span><span class="nl">javascript
</span>  <span class="kd">function</span> <span class="nx">func</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">AAA;
    return a;
  }</span>
  <span class="p">```</span>

  <span class="p">```</span><span class="nl">bash
</span>  <span class="nv">$ </span>git commit <span class="nt">-m</span> <span class="s1">'study markdown'</span>
  <span class="p">```</span>

  <span class="p">```</span><span class="nl">plaintext
</span>  동해물과 백두산이 
  <span class="p">```</span>
</code></pre></div></div>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"https://google.com"</span><span class="nt">&gt;</span>GOOGLE<span class="nt">&lt;/a&gt;</span>
</code></pre></div></div>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.inner</span> <span class="p">{</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">100%</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">func</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">AAA;
  return a;
}
</span></code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git commit <span class="nt">-m</span> <span class="s1">'study markdown'</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>동해물과 백두산이 
</code></pre></div></div>

<p><br />
<br /></p>

<h2 id="표table">표(Table)</h2>
<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>값 | 의미 | 기본값
--|:--:|--:
static | 기준 없음 | o
relative | 요소 자신 | x
absolute | 위치상 부모 요소 | x
fixed | 뷰포트 | x
</code></pre></div></div>
<p>값 | 의미 | 기본값
–|:–:|–:
static | 기준 없음 | o
relative | 요소 자신 | x
absolute | 위치상 부모 요소 | x
fixed | 뷰포트 | x
<br />
<br /></p>

<h2 id="원시-htmlraw-html">원시 HTML(Raw HTML)</h2>
<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>동해물과 <span class="nt">&lt;span</span> <span class="na">style=</span><span class="s">"text-decoration: underline"</span><span class="nt">&gt;</span>백두산<span class="nt">&lt;/span&gt;</span>이 마르고 닳도록<span class="nt">&lt;br/&gt;</span>
하느님이 보우하사 우리나라 만세  

<span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"https://naver.com"</span> <span class="na">title=</span><span class="s">"naver로 이동!!!"</span> <span class="na">target=</span><span class="s">"_blank"</span><span class="nt">&gt;</span>naver<span class="nt">&lt;/a&gt;</span>

<span class="nt">&lt;img</span> <span class="na">width=</span><span class="s">"70"</span> <span class="na">src=</span><span class="s">"/assets/images/logo.png"</span> <span class="na">alt=</span><span class="s">"Startbucks"</span> <span class="nt">/&gt;</span>
</code></pre></div></div>
<p>동해물과 <span style="text-decoration: underline">백두산</span>이 마르고 닳도록<br />
하느님이 보우하사 우리나라 만세</p>

<p><a href="https://naver.com" title="naver로 이동!!!" target="_blank">naver</a></p>

<p><img width="70" src="/assets/images/logo.png" alt="logo" />
<br />
<br /></p>

<h2 id="수평선horizontal-rule">수평선(Horizontal Rule)</h2>
<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">---</span>
<span class="p">***</span>
<span class="ge">__</span>_
</code></pre></div></div>
<hr />
<hr />
<hr />]]></content><author><name>Hyejic</name></author><category term="md" /><category term="Markdown" /><summary type="html"><![CDATA[마크다운 기본 문법 및 레이아웃 정리]]></summary></entry></feed>